%!PS-Adobe-2.0
%%Creator: dvips 5.54 Copyright 1986, 1994 Radical Eye Software
%%Title: dirc_online.dvi
%%CreationDate: Mon Nov 20 14:24:20 1995
%%Pages: 15
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%EndComments
%DVIPSCommandLine: dvips -M -o
%+ /home/design/brownd/scratch/dirc_online.ps dirc_online
%DVIPSParameters: dpi=300, compressed, comments removed
%DVIPSSource:  TeX output 1995.11.20:1423
%%BeginProcSet: texc.pro
/TeXDict 250 dict def TeXDict begin /N{def}def /B{bind def}N /S{exch}N
/X{S N}B /TR{translate}N /isls false N /vsize 11 72 mul N /hsize 8.5 72
mul N /landplus90{false}def /@rigin{isls{[0 landplus90{1 -1}{-1 1}
ifelse 0 0 0]concat}if 72 Resolution div 72 VResolution div neg scale
isls{landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div
hsize mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul
TR matrix currentmatrix dup dup 4 get round 4 exch put dup dup 5 get
round 5 exch put setmatrix}N /@landscape{/isls true N}B /@manualfeed{
statusdict /manualfeed true put}B /@copies{/#copies X}B /FMat[1 0 0 -1 0
0]N /FBB[0 0 0 0]N /nn 0 N /IE 0 N /ctr 0 N /df-tail{/nn 8 dict N nn
begin /FontType 3 N /FontMatrix fntrx N /FontBBox FBB N string /base X
array /BitMaps X /BuildChar{CharBuilder}N /Encoding IE N end dup{/foo
setfont}2 array copy cvx N load 0 nn put /ctr 0 N[}B /df{/sf 1 N /fntrx
FMat N df-tail}B /dfs{div /sf X /fntrx[sf 0 0 sf neg 0 0]N df-tail}B /E{
pop nn dup definefont setfont}B /ch-width{ch-data dup length 5 sub get}
B /ch-height{ch-data dup length 4 sub get}B /ch-xoff{128 ch-data dup
length 3 sub get sub}B /ch-yoff{ch-data dup length 2 sub get 127 sub}B
/ch-dx{ch-data dup length 1 sub get}B /ch-image{ch-data dup type
/stringtype ne{ctr get /ctr ctr 1 add N}if}B /id 0 N /rw 0 N /rc 0 N /gp
0 N /cp 0 N /G 0 N /sf 0 N /CharBuilder{save 3 1 roll S dup /base get 2
index get S /BitMaps get S get /ch-data X pop /ctr 0 N ch-dx 0 ch-xoff
ch-yoff ch-height sub ch-xoff ch-width add ch-yoff setcachedevice
ch-width ch-height true[1 0 0 -1 -.1 ch-xoff sub ch-yoff .1 add]/id
ch-image N /rw ch-width 7 add 8 idiv string N /rc 0 N /gp 0 N /cp 0 N{
rc 0 ne{rc 1 sub /rc X rw}{G}ifelse}imagemask restore}B /G{{id gp get
/gp gp 1 add N dup 18 mod S 18 idiv pl S get exec}loop}B /adv{cp add /cp
X}B /chg{rw cp id gp 4 index getinterval putinterval dup gp add /gp X
adv}B /nd{/cp 0 N rw exit}B /lsh{rw cp 2 copy get dup 0 eq{pop 1}{dup
255 eq{pop 254}{dup dup add 255 and S 1 and or}ifelse}ifelse put 1 adv}
B /rsh{rw cp 2 copy get dup 0 eq{pop 128}{dup 255 eq{pop 127}{dup 2 idiv
S 128 and or}ifelse}ifelse put 1 adv}B /clr{rw cp 2 index string
putinterval adv}B /set{rw cp fillstr 0 4 index getinterval putinterval
adv}B /fillstr 18 string 0 1 17{2 copy 255 put pop}for N /pl[{adv 1 chg}
{adv 1 chg nd}{1 add chg}{1 add chg nd}{adv lsh}{adv lsh nd}{adv rsh}{
adv rsh nd}{1 add adv}{/rc X nd}{1 add set}{1 add clr}{adv 2 chg}{adv 2
chg nd}{pop nd}]dup{bind pop}forall N /D{/cc X dup type /stringtype ne{]
}if nn /base get cc ctr put nn /BitMaps get S ctr S sf 1 ne{dup dup
length 1 sub dup 2 index S get sf div put}if put /ctr ctr 1 add N}B /I{
cc 1 add D}B /bop{userdict /bop-hook known{bop-hook}if /SI save N @rigin
0 0 moveto /V matrix currentmatrix dup 1 get dup mul exch 0 get dup mul
add .99 lt{/QV}{/RV}ifelse load def pop pop}N /eop{SI restore showpage
userdict /eop-hook known{eop-hook}if}N /@start{userdict /start-hook
known{start-hook}if pop /VResolution X /Resolution X 1000 div /DVImag X
/IE 256 array N 0 1 255{IE S 1 string dup 0 3 index put cvn put}for
65781.76 div /vsize X 65781.76 div /hsize X}N /p{show}N /RMat[1 0 0 -1 0
0]N /BDot 260 string N /rulex 0 N /ruley 0 N /v{/ruley X /rulex X V}B /V
{}B /RV statusdict begin /product where{pop product dup length 7 ge{0 7
getinterval dup(Display)eq exch 0 4 getinterval(NeXT)eq or}{pop false}
ifelse}{false}ifelse end{{gsave TR -.1 -.1 TR 1 1 scale rulex ruley
false RMat{BDot}imagemask grestore}}{{gsave TR -.1 -.1 TR rulex ruley
scale 1 1 false RMat{BDot}imagemask grestore}}ifelse B /QV{gsave newpath
transform round exch round exch itransform moveto rulex 0 rlineto 0
ruley neg rlineto rulex neg 0 rlineto fill grestore}B /a{moveto}B /delta
0 N /tail{dup /delta X 0 rmoveto}B /M{S p delta add tail}B /b{S p tail}
B /c{-4 M}B /d{-3 M}B /e{-2 M}B /f{-1 M}B /g{0 M}B /h{1 M}B /i{2 M}B /j{
3 M}B /k{4 M}B /w{0 rmoveto}B /l{p -4 w}B /m{p -3 w}B /n{p -2 w}B /o{p
-1 w}B /q{p 1 w}B /r{p 2 w}B /s{p 3 w}B /t{p 4 w}B /x{0 S rmoveto}B /y{
3 2 roll p a}B /bos{/SS save N}B /eos{SS restore}B end
%%EndProcSet
%%BeginProcSet: special.pro
TeXDict begin /SDict 200 dict N SDict begin /@SpecialDefaults{/hs 612 N
/vs 792 N /ho 0 N /vo 0 N /hsc 1 N /vsc 1 N /ang 0 N /CLIP 0 N /rwiSeen
false N /rhiSeen false N /letter{}N /note{}N /a4{}N /legal{}N}B
/@scaleunit 100 N /@hscale{@scaleunit div /hsc X}B /@vscale{@scaleunit
div /vsc X}B /@hsize{/hs X /CLIP 1 N}B /@vsize{/vs X /CLIP 1 N}B /@clip{
/CLIP 2 N}B /@hoffset{/ho X}B /@voffset{/vo X}B /@angle{/ang X}B /@rwi{
10 div /rwi X /rwiSeen true N}B /@rhi{10 div /rhi X /rhiSeen true N}B
/@llx{/llx X}B /@lly{/lly X}B /@urx{/urx X}B /@ury{/ury X}B /magscale
true def end /@MacSetUp{userdict /md known{userdict /md get type
/dicttype eq{userdict begin md length 10 add md maxlength ge{/md md dup
length 20 add dict copy def}if end md begin /letter{}N /note{}N /legal{}
N /od{txpose 1 0 mtx defaultmatrix dtransform S atan/pa X newpath
clippath mark{transform{itransform moveto}}{transform{itransform lineto}
}{6 -2 roll transform 6 -2 roll transform 6 -2 roll transform{
itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll curveto}}{{
closepath}}pathforall newpath counttomark array astore /gc xdf pop ct 39
0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}if}N
/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1 -1
scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3 get
ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip yflip
not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub neg 0
TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{noflips{TR
pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop 90 rotate 1
-1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg
TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr 1 get neg
sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr 2 get ppr
0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4 -1 roll add
2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S TR}if}N /cp
{pop pop showpage pm restore}N end}if}if}N /normalscale{Resolution 72
div VResolution 72 div neg scale magscale{DVImag dup scale}if 0 setgray}
N /psfts{S 65781.76 div N}N /startTexFig{/psf$SavedState save N userdict
maxlength dict begin /magscale false def normalscale currentpoint TR
/psf$ury psfts /psf$urx psfts /psf$lly psfts /psf$llx psfts /psf$y psfts
/psf$x psfts currentpoint /psf$cy X /psf$cx X /psf$sx psf$x psf$urx
psf$llx sub div N /psf$sy psf$y psf$ury psf$lly sub div N psf$sx psf$sy
scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub TR
/showpage{}N /erasepage{}N /copypage{}N /p 3 def @MacSetUp}N /doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N /endTexFig{end psf$SavedState restore}N /@beginspecial{SDict
begin /SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count /ocount X /dcount countdictstack N}N /@setspecial
{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if /showpage{}N /erasepage{}N /copypage{}N newpath
}N /@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{
end}repeat grestore SpecialSave restore end}N /@defspecial{SDict begin}
N /@fedspecial{end}B /li{lineto}B /rl{rlineto}B /rc{rcurveto}B /np{
/SaveX currentpoint /SaveY X N 1 setlinecap newpath}N /st{stroke SaveX
SaveY moveto}N /fil{fill SaveX SaveY moveto}N /ellipse{/endangle X
/startangle X /yrad X /xrad X /savematrix matrix currentmatrix N TR xrad
yrad scale 0 0 1 startangle endangle arc savematrix setmatrix}N end
%%EndProcSet
TeXDict begin 40258431 52099146 1000 300 300
(/home/design/brownd/dirc/online/dirc_online.dvi) @start
/Fa 9 118 df<137EEA01C138030080EA0E07121E001C1300EA3C0248C7FCA35AA5EA70
011302EA3004EA1838EA07C011147C9315>99 D<1478EB03F8EB0070A414E0A4EB01C0A2
13F1EA038938070780EA0E03121C123C383807001278A3EAF00EA31420EB1C40A2EA703C
135C38308C80380F070015207C9F17>I<137CEA01C2EA0701120E121C123CEA3802EA78
0CEA7BF0EA7C0012F0A4127013011302EA3804EA1838EA07C010147C9315>I<EA03C012
1FEA0380A4EA0700A4120EA45AA45AA45AA3127112E2A4126412380A207C9F0C>108
D<381C0F80382630C0384740601380EB0070A2008E13E0120EA3381C01C0A3EB03840038
138814081307EB031000701330383001C016147C931A>110 D<137CEA01C33803018000
0E13C0121E001C13E0123C1278A338F003C0A3EB07801400EA700F130EEA3018EA1870EA
07C013147C9317>I<EA1C1EEA26613847838013871307EB0300008EC7FC120EA35AA45A
A45A123011147C9313>114 D<EA018013C0EA0380A4EA0700A2EAFFF0EA0700120EA45A
A45AA31320EA7040A21380A2EA3100121E0C1C7C9B0F>116 D<000E13C0003313E03823
01C0EA43811301124738870380120EA3381C0700A31410EB0E201218A2EA1C1E380C2640
3807C38014147C9318>I E /Fb 24 120 df<121C127FA2EAFF80A3EA7F00A2121C0909
7B8813>46 D<130E131E137EEA07FE12FFA212F81200B3AB387FFFFEA317277BA622>49
D<EBFF80000713F04813FC381E03FE393800FF80007C133F00FE14C06C131F15E0140FA2
127E003C131FC7FC15C0A2EC3F801500147E5C5C495A495AEB078049C7FC131E4913E013
705B3901C001C0EA0380EA0600000FB5FC5A5A5AB61280A31B277DA622>I<140E141E14
3E147E14FEA213011303EB077E130EA2131C1338137013E0A2EA01C0EA0380EA0700120E
A25A5A5A5AB612F8A3C7EAFE00A890387FFFF8A31D277EA622>52
D<B612FCEDFF8016E03A03FC001FF8ED03FCED00FE167FEE3F80EE1FC0A2EE0FE0A2EE07
F0A417F8AA17F0A3EE0FE0A217C0161FEE3F80EE7F005EED03FCED1FF8B75A168003FCC7
FC2D297EA834>68 D<B712E0A33903FC001FED07F01501A215001670A3913801C0781638
A302031300A2140F90B5FCA3EBFC0F1403A20201130EA3161C91C7FCA3163C1638167816
F815011503151FB712F0A327297EA82C>I<ECFFC0010F13FC90383F807F9039FE001FC0
D801F8EB07E048486D7E48486D7E000F8148486D7EA24848147FA2007F168090C8123FA3
4816C0AA6C16806D147FA2003F1600A26C6C14FEA26C6C495A6C6C495A6C6C495A6C6C49
5A6C6C495A90263FC0FFC7FC90380FFFFC010013C02A297CA833>79
D<01FF13C0000313E1000F13F9381F80FF383F003F003E130F481307A200FC1303A21401
7EA26C90C7FC13C0EA7FFCEBFFE06C13F86C13FE80000714806C14C0C6FC010F13E0EB00
7FEC1FF0140F140700E01303A46C14E0A26C13076C14C0B4EB0F80EBE01F00E3B5120000
E113FC38C01FF01C297CA825>83 D<007FB71280A39039807F807FD87C00140F00781507
A20070150300F016C0A2481501A5C791C7FCB3A490B612C0A32A287EA72F>I<3803FF80
000F13F0381F01FC383F80FE147F801580EA1F00C7FCA4EB3FFF3801FC3FEA0FE0EA1F80
EA3F00127E5AA4145F007E13DF393F839FFC381FFE0F3803F8031E1B7E9A21>97
D<EB3FF03801FFFC3803F03E380FC07FEA1F80EA3F00A248133E007E90C7FCA212FEA712
7EA2127F6CEB03801380001FEB0700380FE00E3803F83C3801FFF838003FC0191B7E9A1E
>99 D<EB3FC03801FFF03803E07C380F803E001F7F130048EB0F80127E15C0A200FE1307
A2B6FCA248C8FCA3127EA2127F6CEB01C07E390F8003803907C007003803F01E3800FFFC
EB3FE01A1B7E9A1F>101 D<EB07F8EB3FFCEB7E3E3801FC7FEA03F813F01207143E1400
A7B512C0A33807F000B3A3387FFF80A3182A7EA915>I<1207EA0FC0EA1FE0123FA3121F
EA0FC0EA0700C7FCA7EAFFE0A3120FB3A3EAFFFEA30F2B7EAA12>105
D<EAFFE0A3120FB3B2EAFFFEA30F2A7EA912>108 D<26FFC07FEB1FC0903AC1FFC07FF0
903AC307E0C1F8D80FC49038F101FC9039C803F20001D801FE7F01D05BA201E05BB03CFF
FE3FFF8FFFE0A3331B7D9A38>I<38FFC07E9038C1FF809038C30FC0D80FC413E0EBC807
01D813F013D0A213E0B039FFFE3FFFA3201B7D9A25>I<EB3FE03801FFFC3803F07E390F
C01F80391F800FC0393F0007E0A2007EEB03F0A300FE14F8A8007E14F0A26CEB07E0A239
1F800FC0390FC01F803907F07F003801FFFC38003FE01D1B7E9A22>I<38FFE1FE9038E7
FF809038FE0FE0390FF803F09038F001F801E013FC140015FEA2157FA8157E15FEA215FC
140101F013F89038F803F09038FC0FE09038EFFF809038E1FC0001E0C7FCA9EAFFFEA320
277E9A25>I<38FFC3E0EBC7F8EBCC7C380FD8FE13D0A213F0EBE07C1400B0B5FCA3171B
7E9A1B>114 D<3803FE30380FFFF0EA3E03EA7800127000F01370A27E00FE1300EAFFE0
6CB4FC14C06C13E06C13F0000713F8C6FCEB07FC130000E0137C143C7E14387E6C137038
FF01E038E7FFC000C11300161B7E9A1B>I<1370A413F0A312011203A21207381FFFE0B5
FCA23807F000AD1470A7000313E03801F8C0EA00FFEB3F0014267FA51A>I<39FFFE07FF
A33907F000E0A2EBF801000314C0A23901FC0380A2EBFE07000014006D5AEB7F0EA2EB3F
9CA214FC6D5AA26D5AA36D5AA26D5AA2201B7F9A23>118 D<3BFFFC7FFC1FFCA33B0FE0
0FE001C02607F007EB0380A201F8EBF0070003160015F82601FC0F130EA29039FE1FFC1E
0000011C131C15FE9039FF387E3C017F1438EC787F6D486C5AA29138E01FF0011F5CA26D
486C5AA36D486C5AA22E1B7F9A31>I E /Fc 4 25 df<EA03C0EA0FF0EA1FF8EA3FFCEA
7FFEA2B5FCA6EA7FFEA2EA3FFCEA1FF8EA0FF0EA03C010127D9317>15
D<15C01403EC0F00143C14F0EB03C049C7FC131C1378EA01E0EA0780001EC8FC127812E0
1278121EEA0780EA01E0EA0078131C1307EB03C0EB00F0143C140FEC03C014001500A700
7FB51280B612C01A247C9C23>20 D<12C012F0123C120FEA03C0EA00F01338130E6D7EEB
01E0EB0078141EEC0780EC01C0EC0780EC1E001478EB01E0EB0780010EC7FC133813F0EA
03C0000FC8FC123C127012C0C9FCA7007FB51280B612C01A247C9C23>I<D807C01310EA
1FE0487EEA7838D8601E1330487E9038078060398001C1E0903800FFC0EC7F80EC3E001C
0B7D9023>24 D E /Fd 5 116 df<EC01C0EC0780EC1E001478EB01E0EB0780010EC7FC
133813F0EA03C0000FC8FC123C12F0A2123C120FEA03C0EA00F01338130E6D7EEB01E0EB
0078141EEC0780EC01C01A1A7C9723>60 D<13011303A21306A3130CA31318A31330A313
60A313C0A3EA0180A3EA0300A31206A35AA35AA35AA35AA35AA3102D7DA117>I<13E012
01A2EA00C01300A7120E1213EA23801243A3EA87001207A2120EA25AA21320EA3840A313
80EA1900120E0B1F7E9E10>105 D<391E07C07C39231861869038A032033843C034D980
381380A23A87007007001207A3000EEBE00EA3ED1C10261C01C013201538164015182638
03801380D81801EB0F0024147E9328>109 D<137CEA0182EA0301EA060313071306EA0E
00EA078013F8EA03FCEA01FEEA001F13071270EAF006A2EAE004EA4008EA2030EA1FC010
147E9315>115 D E /Fe 40 122 df<EB01C01303130F137FEA1FFFB5FC13BFEAE03F12
00B3B1007FB512E0A31B2E7AAD28>49 D<EB3FE03801FFFE0007EBFF80D80F8013C0391E
003FE00038EB1FF0007CEB0FF8007EEB07FCB4FC018013FEA21403A2EA7F00003E1307C7
FC15FCA2EC0FF8A215F0EC1FE015C0EC3F80EC7F00147E14F8495A495A495A49C7FC011E
130E5B133849131E49131C485A48C7123C48B512FC5A5A5A4814F8B6FCA31F2E7CAD28>
I<EB1FF8EB7FFF48B512C03903E03FE03907800FF0D80FC07F381FE00781A4EA0FC0EA07
80C7485AA25D4A5A5D4A5A02FEC7FCEB3FF8ECFF809038001FE0EC07F0816E7E816E7EA2
1680A3121C123E127FEAFF801600A24A5AEA7F00007E495A003C5C391FC01FF06CB512C0
000391C7FC38003FF8212E7DAD28>I<157015F0140114031407140FA2141F143F147714
F714E7EB01C7EB0387EB0707130F130E131C1338137013F013E0EA01C0EA0380EA07005A
120E5A5A5A5AB712E0A3C7380FF000A9010FB512E0A3232E7EAD28>I<000C1430390FC0
03F090B512E015C0158015005C14F85C1480000EC8FCA8EB1FF0EB7FFE390FE03F809038
800FC0390E0007E0000C14F0C713F8EC03FCA315FEA21218123E127F5AA215FCA25A0078
EB07F815F06CEB0FE06CEB1FC0390FC07F806CB51200000113FC38003FE01F2E7CAD28>
I<ECFF80010713E0011F7F90387F80F89038FE003CD801F8137C484813FE00071301EA0F
E0A2EA1FC0003F6D5A157892C7FC485AA338FF83FC90388FFF8090389C0FC09038B003F0
6E7E01E07F01C07F140081A2491480A4127FA4003F15007F121F5D000F495AEA07E06C6C
485A3901FC0FE06CB55A013F90C7FCEB0FFC212E7DAD28>I<1238123E003FB612C0A316
804815005D5D5D0078C7123800705C5D00F0495A48495A4AC7FCA2C7120E5C5CA214785C
A213015C1303A21307A2495AA3131FA5133FA86D5A6DC8FC22307CAF28>I<1578A215FC
A34A7EA24A7EA24A7FA34A7FEC0E7F021E7FEC1C3FA202387F151F02787FEC700FA202E0
7F1507010180ECC003A2D903807F8101078191C7FCA249B67EA24981011CC7123F013C81
0138141FA24981160F01F081491407A2484881486C1403B56C48B512FCA336317DB03D>
65 D<B712E016FE707EC690C77FEE3FF0707E160F707EA2831603A41607A25FA24C5A4C
5A4C5AEEFF80030F90C7FC91B55AEEFFC091C7EA1FF0EE07F8EE03FEA2707E18808218C0
A718805E18005E4C5A4C5AEE7FF8B812E0178004FCC7FC32317EB039>I<913A03FF8001
80023FEBF00349B5EAFC0701079038003F0FD91FF8EB079FD93FC0EB01FFD9FF807F4848
C8127F4848153F0007161F49150F485A001F1607A2485A1703127FA24992C7FCA212FFA9
127FA27FEF0380123FA26C7E1707000F17006C7E6D150E0003161E6C6C151C6C6C6C1478
D93FC05CD91FF8EB03E0D907FFEB3F800101D9FFFEC7FCD9003F13F80203138031317CB0
3A>I<B712F016FF17C0C6D9800013F0EE0FF8EE03FE707E701380EF7FC0173FEF1FE018
F0170F18F8A2EF07FCA418FEAB18FCA4EF0FF8A218F0171F18E0173FEF7FC01880933801
FF004C5AEE0FFCEE7FF0B812C094C7FC16F037317EB03E>I<B812F0A3C6903880003FEE
07F816031600A21778A21738A3171C1507A31700A25D5D5D91B5FCA3EC803F818181A217
07A392C7120EA4171EA2173CA2177C17FC16011607163FB812F8A330317EB035>I<B6D8
807FB512C0A3C60180C7387FC000B391B7FCA30280C7127FB3A3B6D8807FB512C0A33A31
7EB03F>72 D<B61280A3C6EB8000B3B3A7B61280A319317EB01E>I<B612E0A3C60180C8
FCB3A9EE01C0A416031780A21607A3160F161F163F167FEEFF001507B8FCA32A317EB030
>76 D<EC0FFF91B512F0903907FC03FE903A1FE0007F8049486D7E49C7EA0FE0D801FEEC
07F848486E7E000782491401000F8248486E1380A24848ED7FC0A3007F17E049153FA200
FF17F0AB007F17E0A26D157FA2003F17C0A26C6CEDFF80A2000FD901F814003B07F807FC
01FE9039FC0E06030003D90C035B3B01FE180187F8D800FFECCFF0903A3FD800FFC06D6C
5C902707FE03FEC7FC0100B512F0020F0178133091C7FC167C70137093383F81F017FF18
E082A218C0821880701300705AEE00F8343F7CB03D>81 D<B77E16F816FEC690398003FF
809238007FE0EE1FF0707EA283160783A65F160F5F4C5A4C5A4C5ADB03FFC8FC91B512F8
16E091388007F8ED01FC6F7E167F83707EA283A583A4F0038017F8161F1900706C5AB639
8003FE0E933801FFFC9338001FF039317EB03C>I<90391FF8018090B51203000314C739
07F007EF390F8000FF48C7127F003E141F150F5A150712FCA215037EA26C91C7FC13C0EA
7FF0EBFF806C13F8ECFF806C14F06C806C14FE6C80C61580133F010114C0D9001F13E014
00153FED1FF0150F1507126000E01403A316E07EA26CEC07C07EB4EC0F8001C0EB1F00D8
FBFC13FE00F1B512F8D8E03F5BD8C003138024317CB02D>I<007FB8FCA39039C00FF801
D87E00EC003F007C82007882A200708200F01780A3481603A5C792C7FCB3AA017FB6FCA3
31307DAF38>I<EBFFF0000313FE390F803F809038C00FE0486C6C7EA26E7ED80FC07FEA
0780C7FCA414FF131FEBFFE33803FC03EA0FF0EA1FC0123FEA7F80A2EAFF00A31407A238
7F800D393FC019FE3A1FE070FFF03907FFE07FC6EB803F24207E9F27>97
D<EA01F812FFA3120F1207ADEC3FE0ECFFFC9038FBE07F9039FF001F8049EB0FC04914E0
49EB07F016F8A2ED03FCA316FEA816FCA3ED07F8A216F06DEB0FE06D14C001E7EB3F8090
39C3C0FE00903880FFF89038003FC027327EB12D>I<EB0FFF017F13C03901FC01F03803
F0033907E007F8120FEA1FC0003FEB03F0EC01E04848C7FCA312FFA8127FA36C6C131CA2
001F14386C7E000714703903F001E03901FC07C039007FFF00EB0FF81E207D9F24>I<ED
0FC0EC07FFA3EC007F153FADEB07F8EB3FFF9038FE07BF3903F801FF3907E0007F120F48
48133F123FA2485AA312FFA8127FA36C7EA2121F6C6C137F000714FF2603F00313E03A01
FC0F3FFE38007FFEEB0FF027327DB12D>I<EB0FFC90387FFF803901FC0FC03903F003E0
3907E001F0000F14F8391FC000FC003F14FEA24848137E157FA212FFA290B6FCA20180C7
FCA4127FA36C6C1307121F150E6C7E6C6C131C6C6C13783900FE03E090383FFFC0903807
FE0020207E9F25>I<EB01FE90380FFF8090381FC3C090387F07E09038FE0FF0120113FC
1203EC07E0EC018091C7FCA8B512FCA3D803FCC7FCB3A8387FFFF0A31C327EB119>I<90
391FF007C09039FFFE3FE03A01F83F79F03907E00FC3000F14E19039C007E0E0001FECF0
00A2003F80A5001F5CA2000F5CEBE00F00075C2603F83FC7FC3806FFFE380E1FF090C9FC
121EA2121F7F90B57E6C14F015FC6C806C801680000F15C048C7127F007EEC1FE0007C14
0F00FC1407A4007EEC0FC0003E1580003F141FD80FC0EB7E003907F803FC0001B512F0D8
001F90C7FC242F7E9F28>I<EA01F812FFA3120F1207ADEC07F8EC3FFEEC783F02C01380
9039F9801FC0EBFB0001FE14E05BA35BB3B500C3B5FCA328327DB12D>I<EA03C0487E48
7E487EA46C5A6C5A6C5AC8FCA9EA01F812FFA3120F1207B3A6B51280A311337DB217>I<
EA01F812FFA3120F1207B3B3A6B512C0A312327DB117>108 D<2703F007F8EB1FE000FF
D93FFEEBFFF8913A783F01E0FC02C090388300FE280FF1801FC6137F2607F30013CC01F6
02F8148001FC5CA3495CB3B500C3B5380FFFFCA33E207D9F43>I<3903F007F800FFEB3F
FEEC783F02C013803A0FF1801FC03807F30001F614E013FCA35BB3B500C3B5FCA328207D
9F2D>I<EB07FC90387FFFC03901FC07F03903F001F848486C7E4848137E001F147F003F
158049133F007F15C0A300FF15E0A8007F15C0A36C6CEB7F80A2001F15006C6C13FE0007
5C3903F803F83901FE0FF039007FFFC0D907FCC7FC23207E9F28>I<3901F83FE000FFEB
FFFC9038FBE07F9039FF003F80D807FEEB1FC049EB0FE04914F0ED07F8A216FC1503A216
FEA816FC1507A216F8A2ED0FF06D14E06DEB1FC06DEB3F809039FBC0FE009038F8FFF8EC
3FC091C8FCABB512C0A3272E7E9F2D>I<3803F03F00FFEB7FC09038F1C3E01487390FF3
0FF0EA07F6A29038FC07E0EC03C091C7FCA25BB2B512E0A31C207E9F21>114
D<3801FF86000713FEEA1F00003C133E48131E140E12F8A36C90C7FCB47E13FC387FFFC0
14F06C7F6C7F00077F00017FEA003F01001380143F0060131F00E0130FA27E15007E6C13
1E6C131C38FF807838F3FFF038C07F8019207D9F20>I<131CA5133CA3137CA213FC1201
12031207381FFFFEB5FCA2D803FCC7FCB0EC0380A71201EC0700EA00FEEB7F0EEB3FFCEB
07F0192E7FAD1F>I<D801F8EB07E000FFEB03FFA3000FEB003F0007141FB3153FA20003
147FA26C6CEBDFF03A00FE039FFF90387FFF1FEB0FFC28207D9F2D>I<B53A1FFFE07FF8
A33C0FF000FE0007807F00071700157F6C6C150EEDFF806D151E0001161C913801DFC001
FF153C6C0103EBE038DA838F1378017F157091388707F002C714F0D93FCF6D5AECCE03D9
1FEEEBF9C09138FC01FD16FF010F5D4A7E010792C7FC4A7FA20103147E4A133E0101143C
4A131C35207E9F3A>119 D<3A7FFF807FFCA33A03FE000F000001141E6C6C5B6E5AEB7F
C06D6C5A90381FE1E090380FF3C0ECFF806D90C7FC6D5A13016D7E81815B903803DFE090
38078FF08190380F07FCEB1E03496C7E496C7E49148049EB7FC00001143F26FFFC01B5FC
A328207F9F2B>I<B538801FFCA33A0FF80003C0000715806D1307000315006D5B000114
0E7F6C5CA26D6C5AA2ECC078013F1370ECE0F0011F5B14F1010F5B14F9903807FB80A26D
B4C7FCA36D5AA26D5AA21478A21470A214F05C1301007C5BEAFE035C130749C8FCEAFC1E
EA787CEA3FF0EA0FC0262E7E9F2B>I E /Ff 78 123 df<90381F83E09038F06E303901
C07878380380F8903800F03048EB7000A7B612803907007000B2387FE3FF1D20809F1B>
11 D<133FEBE0C0EA01C0380381E0EA0701A290C7FCA6B512E0EA0700B2387FC3FE1720
809F19>I<EB3FE013E0EA01C1EA0381EA0700A8B5FCEA0700B2387FE7FE1720809F19>I<
90381F81F89038F04F043901C07C06390380F80FEB00F05A0270C7FCA6B7FC3907007007
B23A7FE3FE3FF02420809F26>I<90381F81FF9038F06F073901C07C0F380380F849487E
481370A7B7FC3907007007B23A7FE3FE3FF02420809F26>I<EA7038EAF87CEAFC7EA2EA
743AEA0402A3EA0804A2EA1008A2EA2010EA40200F0E7E9F17>34
D<127012F812FCA212741204A31208A21210A212201240060E7C9F0D>39
D<132013401380EA0100120212065AA25AA25AA312701260A312E0AC1260A312701230A3
7EA27EA27E12027EEA0080134013200B2E7DA112>I<7E12407E7E7E120C7EA27EA2EA01
80A313C01200A313E0AC13C0A312011380A3EA0300A21206A25A12085A5A5A5A0B2E7DA1
12>I<1306AFB612F0A2D80006C7FCAF1C207D9A23>43 D<127012F812FCA212741204A3
1208A21210A212201240060E7C840D>I<EAFFC0A20A027F8A0F>I<127012F8A312700505
7C840D>I<13011303A21306A3130CA31318A31330A31360A313C0A3EA0180A3EA0300A3
1206A35AA35AA35AA35AA35AA3102D7DA117>I<EA03F0EA0E1C487EEA1806EA38073870
0380A400F013C0AD00701380A3EA780700381300EA1806EA1C0E6C5AEA03F0121F7E9D17
>I<EA01801203120F12F31203B3A6EA07C0EAFFFE0F1E7C9D17>I<EA03F0EA0C1CEA100E
487E00401380128000F013C0EAF803A3EA200712001480A2EB0F00130E5B5B5B13605B48
5A48C7FC000613405A5A00101380EA3FFF5AB5FC121E7E9D17>I<EA03F0EA0C1CEA100E
EA200F007813801307A2EA380F12001400A2130E5B5BEA03F0EA003C130E130FEB0780A2
14C0122012F8A300F013801240EB0F00EA200EEA1C3CEA03F0121F7E9D17>I<1306A213
0EA2131E132EA2134E138EA2EA010E1202A212041208A212101220A2124012C0B512F038
000E00A7EBFFE0141E7F9D17>I<EA1803EA1FFE5B5B13E00010C7FCA6EA11F0EA161CEA
180EEA10071480EA0003A214C0A3127012F0A200E013801240EB0700EA2006EA100EEA0C
38EA03E0121F7E9D17>I<137CEA0182EA0701380E0380EA0C07121C3838030090C7FC12
781270A2EAF1F0EAF21CEAF406EAF807EB0380A200F013C0A51270A214801238EB070012
18EA0C0E6C5AEA01F0121F7E9D17>I<1240387FFFC01480A238400100EA8002A25B485A
A25B5BA25BA213C0A212015B1203A41207A76CC7FC121F7D9D17>I<EA03F0EA0C0CEA10
06EA3003382001801260A3127038780300123EEA3F06EA1FC8EA0FF0EA03F8487EEA0C7E
EA103F38300F80EA6003384001C012C01300A31480EA600100201300EA1002EA0C0CEA03
F0121F7E9D17>I<EA03F0EA0E18487E487E13071270EB038012F0A214C0A5EA7007A212
38EA180BEA0E13EA03E338000380A3EB07001230EA7806130EEA700CEA2018EA1070EA0F
C0121F7E9D17>I<127012F8A312701200AA127012F8A3127005147C930D>I<127012F8A3
12701200AA127012F012F8A212781208A31210A31220A21240051D7C930D>I<EA0FC0EA
3070EA4038A2EAE03C12F0A21260EA0038137013E013C0EA0180A213005A1202A6C7FCA5
1207EA0F80A3EA07000E207D9F15>63 D<5B497EA3497EA3EB09E0A3EB10F0A3EB2078A3
497EA3497EA2EBFFFE3801000FA30002EB0780A348EB03C0120E001FEB07E039FFC03FFE
1F207F9F22>65 D<B512E0380F80380007131E141F801580A515005C141E5CEBFFF0EB80
3C80801580140715C0A51580140F15005C000F133CB512F01A1F7E9E20>I<90380FC040
90387030C03801C0093803800538070003000E1301001E1300121C123C007C1440A21278
00F81400A91278007C1440A2123C121C001E1480120E6CEB0100380380026C6C5A380070
38EB0FC01A217D9F21>I<B512E0380F803C00077F1407EC038015C0EC01E0A215F01400
A215F8A915F0A3EC01E0A2EC03C01580EC0700140E000F133CB512E01D1F7E9E23>I<B6
FC380F800F00071303A28015801400A314801500A3138113FF13811380A4EC0020A31540
A315C0A2EC0180000F130FB6FC1B1F7E9E1F>I<B6FC380F800F00071303A28015801400
A4EC8000A4138113FF13811380A491C7FCA8487EEAFFFE191F7E9E1E>I<90380FE02090
387818609038E004E03803800238070001481300001E1460A25A1520127C127800F81400
A7EC7FFCEC03E000781301127C123CA27EA27E7E380380023900E0046090387818209038
0FE0001E217D9F24>I<39FFF8FFF8390F800F8000071400AC90B5FCEB800FAE000F1480
39FFF8FFF81D1F7E9E22>I<EAFFFCEA0FC0EA0780B3A9EA0FC0EAFFFC0E1F7F9E10>I<38
0FFFC038007C00133CB3A3122012F8A3EAF038EA40781370EA30E0EA0F8012207E9E17>
I<39FFFC0FFC390FC003E03907800180150014025C5C5C5C5C5C0181C7FC1383EB878013
8FEB93C0EB91E013A1EBC0F01380147880A280A280EC0780A215C0D80FC013E039FFFC3F
FC1E1F7E9E23>I<EAFFFEEA0FC06C5AB21402A414061404A2140C141C000F137CB512FC
171F7E9E1C>I<B46CEB1FF8000F158000071500D805C0132FA3D804E0134FA20170138F
A3903838010FA3EB1C02A3EB0E04A3EB0708A3EB0390A2EB01E0A3380E00C0001FEC1F80
3AFFE0C1FFF8251F7E9E2A>I<39FF803FF83907C007C0EC03803905E00100A2EA04F013
78A2133CA2131E130FA2EB0781A2EB03C1EB01E1A2EB00F1A21479143DA2141FA28080A2
000E7F121F38FFE0011D1F7E9E22>I<EB1F80EBF0F03801C0383807801E48487E000E7F
001E148048EB03C0A2007C14E000781301A200F814F0A9007814E0007C1303A2003C14C0
A26CEB0780000E1400000F5B3807801E3801C0383800F0F0EB1F801C217D9F23>I<B512
E0380F80780007131C141E801580A61500141E141C1478EBFFE00180C7FCAD487EEAFFFC
191F7E9E1F>I<EB1F80EBF0F03801C0383807801E48487E000E7F001E148048EB03C0A2
007C14E0A20078130100F814F0A9007814E0A2007C1303003C14C0130F391E108780390E
204700000F134F3807A03E3801E0383900F0F010EB1FB0EB0030EC38301570EC3FF0EC1F
E0A2EC0FC0EC07801C297D9F23>I<B57E380F80F0000713788080A2141FA4141EA25C5C
5CEBFF80EB81C0EB80E08014701478A3147CA31504147E143E390FC01E0839FFFC0F10C7
EA03E01E207E9E21>I<3807E080EA0C19EA1007EA3003EA6001A212E01300A36C1300A2
1278127FEA3FF0EA1FFC6C7EEA03FF38001F801307EB03C0A213011280A400C013801303
00E01300EAF006EACE0CEA81F812217D9F19>I<007FB512E038780F010060EB00600040
1420A200C0143000801410A400001400B3497E3807FFFE1C1F7E9E21>I<39FFFC3FF839
0FC007C03907800380EC0100B3A300031302A2EA01C05C6C6C5AEB7018EB3820EB0FC01D
207E9E22>I<39FFF003FE391F8000F86CC712607F00071440A26C6C1380A33901E00100
A213F000001302A2EBF806EB7804A26D5AA36D5AA2EB1F30EB0F20A2EB07C0A36D5AA36D
C7FC1F207F9E22>I<3BFFF07FF81FF03B1F800FC007C03B0F0007800380EE010015C0D8
07801402A33A03C009E004A39039E010F00C00011508A29038F0207800005DA2EC403C01
785CA2ECC03E90393C801E40A390391F000F80A3011E1307010E91C7FCA2010C7F010413
022C207F9E2F>I<397FF83FF8390FE00FC03907C00700000313026C6C5AEBF00C000013
08EB7810137CEB3C20EB3E40131E6D5AA213076D7E497E1305EB09F0EB18F8EB1078EB20
7CEB603CEB401EEB801F00017F9038000780000214C000071303391F8007E039FFE01FFE
1F1F7F9E22>I<120812101220A21240A21280A312B812FCA2127C1238060E7D9F0D>96
D<EA1FE0EA3030EA7818131CEA300E1200A313FEEA078EEA1E0E1238127800F01310A313
1E127838386720380F83C014147E9317>I<120E12FE120EAA133EEBC380380F01C0EB00
E0120E1470A21478A61470A214E0120F380D01C0380CC300EA083E15207F9F19>I<EA03
F8EA0E0CEA1C1E1238130CEA7000A212F0A61270A2EA3801A2EA1C02EA0E0CEA03F01014
7E9314>I<EB0380133F1303AAEA03E3EA061BEA1C07EA3803A21270A212F0A61270A212
381307121CEA0E1B3803E3F815207E9F19>I<EA03F0EA0E1C487E487EA21270EB038012
F0A2B5FC00F0C7FCA31270A26C13801218380C0100EA0706EA01F811147F9314>I<137C
13C6EA018F1203EA07061300A7EAFFF0EA0700B2EA7FF01020809F0E>I<14E03803E330
EA0E3CEA1C1C38380E00EA780FA5EA380E6C5AEA1E38EA33E00020C7FCA21230A2EA3FFE
381FFF806C13C0383001E038600070481330A4006013606C13C0381C03803803FC00141F
7F9417>I<120E12FE120EAA133E1343EB8180380F01C0A2120EAE38FFE7FC16207F9F19>
I<121C121E123E121E121CC7FCA6120E127E120EB1EAFFC00A1F809E0C>I<13E0EA01F0
A3EA00E01300A61370EA07F012001370B3A31260EAF06013C0EA6180EA3F000C28829E0E
>I<120E12FE120EAAEB0FF0EB03C0140013025B5B5B1330137013F8EA0F38EA0E1C131E
130E7F1480130314C014E038FFCFF815207F9F18>I<120E12FE120EB3ABEAFFE00B2080
9F0C>I<390E1F01F039FE618618390E81C81C390F00F00EA2000E13E0AE3AFFE7FE7FE0
23147F9326>I<EA0E3EEAFE43380E8180380F01C0A2120EAE38FFE7FC16147F9319>I<EA
01F8EA070E381C0380383801C0A2387000E0A200F013F0A6007013E0A2383801C0A2381C
038038070E00EA01F814147F9317>I<EA0E3E38FEC380380F01C0EB00E0120E14F01470
1478A6147014F014E0EA0F0114C0380EC300133E90C7FCA8EAFFE0151D7F9319>I<3803
E080EA0619EA1C05EA3C07EA38031278127012F0A61270127812381307EA1C0BEA0E13EA
03E3EA0003A8EB3FF8151D7E9318>I<EA0E78EAFE8CEA0F1EA2130CEA0E00AEEAFFE00F
147F9312>I<EA1F90EA3070EA4030EAC010A3EAE0001278EA7F80EA3FE0EA0FF0EA0070
EA80381318A212C0A2EAE030EAD060EA8F800D147E9312>I<1202A31206A2120EA2123E
EAFFF8EA0E00AB1308A5EA06101203EA01E00D1C7F9B12>I<380E01C0EAFE1FEA0E01AE
13031206EA030D3801F1FC16147F9319>I<38FF83F8381E01E0381C00C06C1380A33807
0100A2EA0382A3EA01C4A213ECEA00E8A21370A3132015147F9318>I<39FF9FE1FC393C
078070391C030060EC8020000E1440A214C0D807071380130414E039038861001471EBC8
733801D032143A3800F03CEBE01CA2EB6018EB40081E147F9321>I<387FC3FC380F01E0
000713C0148038038100EA01C2EA00E413EC13781338133C137C134E1387EA0107380303
80380201C0000613E0121E38FF07FE1714809318>I<38FF83F8381E01E0381C00C06C13
80A338070100A2EA0382A3EA01C4A213ECEA00E8A21370A31320A25BA3EAF080A200F1C7
FC1262123C151D7F9318>I<EA3FFFEA380E1220131CEA403813781370EA00E0120113C0
EA038012071301120E121EEA1C03EA3802EA7006130EEAFFFE10147F9314>I
E /Fg 7 117 df<14E0A2497EA3497EA2EB06FCA2EB0EFEEB0C7EA2497EA201307F141F
01707FEB600FA2496C7E90B5FC4880EB8003A248486C7EA20006801400000E803AFFE00F
FFE0A2231F7E9E28>65 D<EA07FCEA1FFF383F0F80EB07C0EB03E0A2120C1200137FEA07
FBEA1F03123C127C12F8A3EAFC05EA7E0D383FF8FE380FE07E17147F9319>97
D<B4FCA2121FAAEB1FC0EB7FF0EBE0F8EB807CEB007E143EA2143FA6143EA2147C138038
1EC1F8381C7FE038181F8018207E9F1D>I<EA01FE3807FF80381F0FC0123EA2127CEB03
0000FCC7FCA6127C127E003E1360003F13C0EA1F813807FF00EA01FC13147E9317>I<EA
FE3EEB7F80381ECFC0138FA2121FEB030090C7FCABEAFFF0A212147E9316>114
D<EA0FE6EA3FFEEA701EEA600EEAE006A2EAF800EAFFC0EA7FF8EA3FFCEA1FFE1203EA00
1FEAC007A212E0EAF006EAF81EEAFFFCEAC7F010147E9315>I<EA0180A31203A3120712
0F123FEAFFFCA2EA0F80AA1386A5EA07CCEA03F8EA01F00F1D7F9C14>I
E /Fh 25 118 df<ECC018A349485AA449485AA501065BA449485AB712C0A226001803C7
FCA4EB3006A4B712C0A22600600CC7FC495AA448485AA448485AA400065BA3222D7DA229
>35 D<EA01F0EA071CEA0C06487E00381380A2387001C0A400F013E0AE007013C0A3EA78
0300381380A2381C0700EA0C06EA071CEA01F013227EA018>48 D<13801203120F12F312
03B3A9EA07C0EAFFFE0F217CA018>I<EA03F0EA0C1CEA100700201380384003C0A20080
13E012F0EAF801A3EA2003120014C0A2EB07801400130E5B13185B5B5B485A90C7FC0002
13205A5A00181360481340383FFFC05AB5FC13217EA018>I<EA03F8EA0C1EEA10070020
1380004013C0127813031307123800001380A214005B130E1338EA03F0EA001C130FEB07
80A2EB03C0A214E01220127012F8A200F013C01240EB0780122038100F00EA0C1CEA03F0
13227EA018>I<13021306130EA2131EA2132E134EA2138EA2EA010E1202A21204A21208
1210A21220A212401280B512F838000E00A7131F3801FFF015217FA018>I<0010138038
1E0700EA1FFF5B13F8EA13E00010C7FCA613F8EA130EEA1407381803801210380001C0A2
14E0A4127012F0A200E013C01280EA4003148038200700EA1006EA0C1CEA03F013227EA0
18>I<137EEA01C138030080380601C0EA0E03121C381801800038C7FCA212781270A2EA
F0F8EAF30CEAF4067F00F81380EB01C012F014E0A51270A3003813C0A238180380001C13
00EA0C06EA070CEA01F013227EA018>I<12401260387FFFE014C0A23840008038C00100
12801302A2485A5BA25B133013201360A313E05BA21201A41203A86C5A13237DA118>I<
EA01F8EA060EEA0803381001801220EB00C01260A3127038780180003E1300EA3F02EA1F
C4EA0FF812037FEA067F38083F80EA100F383007C0EA6001EB00E05A1460A40060134014
C06C138038180300EA0E0EEA03F013227EA018>I<EA01F0EA060C487EEA180738380380
1270A238F001C0A314E0A5127013031238EA1805120CEA0619EA03E1380001C0A3EB0380
A200301300EA78071306EA700CEA20186C5AEA0FC013227EA018>I<127012F8A3127012
00AB127012F8A3127005157C940E>I<903807E0109038381830EBE0063901C001703903
8000F048C7FC000E1470121E001C1430123CA2007C14101278A200F81400A81278151012
7C123CA2001C1420121E000E14407E6C6C13803901C001003800E002EB381CEB07E01C24
7DA223>67 D<B512F0380F801E00071307EC03C01401EC00E015F01578A2157C153CA315
3EA9153CA2157C1578A215F015E01401EC03C0EC0700000F131EB512F81F227EA125>I<
B612C0380F80070007130114001540A215601520A314201500A3146014E013FF13801460
1420A491C7FCA9487EEAFFFE1B227EA120>70 D<EAFFFCEA0FC0EA0780B3ACEA0FC0EAFF
FC0E227EA112>73 D<B512E0380F803C0007130E6E7E81140381A55D14075D020EC7FC14
3CEBFFE0EB80708080141E140E140FA481A3168015C014073A0FC003C10039FFFC01E2C8
127C21237EA124>82 D<EA01FCEA0707380C0380381C01C01238007813E0EA700012F0B5
FC00F0C7FCA512700078132012386C13406C138038070300EA00FC13157F9416>101
D<14703801F19838071E18EA0E0E381C0700A2003C1380A4001C1300A2EA0E0EEA0F1CEA
19F00010C7FCA21218A2EA1FFE380FFFC014E0383800F0006013300040131812C0A30060
1330A2003813E0380E03803803FE0015217F9518>103 D<121C121E123E121E121CC7FC
A8120E12FE121E120EB1EAFFC00A227FA10E>105 D<380E1F8038FE60C0381E80E0380F
0070A2120EAF38FFE7FF18157F941B>110 D<EA01FCEA0707380C0180381800C0003813
E0481370A200F01378A700701370007813F0003813E0381C01C0380E038038070700EA01
FC15157F9418>I<EA0E3CEAFE46EA1E8FEA0F0F13061300120EAD120FEAFFF010157F94
13>114 D<1202A41206A3120E121E123EEAFFF8EA0E00AB1304A6EA07081203EA01F00E
1F7F9E13>116 D<000E137038FE07F0EA1E00000E1370AD14F0A2380601703803827838
00FC7F18157F941B>I E /Fi 24 122 df<127812FCA212FEA2127A1202A41204A31208
1210A21220124007127B8510>44 D<137E3801C380380700E0000E1370001E1378001C13
38003C133CA20038131C0078131EA400F8131FAF0078131EA4007C133E003C133CA2001C
1338001E1378000E13706C13E03801C38038007E0018297EA71D>48
D<1310137013F0120F12FF12F01200B3AD487E387FFFE0A213287CA71D>I<EA01FCEA07
FF380C0FC0381803E0382001F01260384000F8A200F813FC7E147CA3007813FCC7FC14F8
A2EB01F0A2EB03E014C0EB07801400130E5B5B13305B5B485A3803000412024813085A5A
481318383FFFF84813F0B5FCA216287DA71D>I<00181310001F13E013FF14C014005BEA
11F00010C7FCA813FCEA1303381401C0001813E0EA1000C712F01478A3147CA3127012F8
A314781280004013F814F01260383001E0381803C0380E0F803807FE00EA01F816297DA7
1D>53 D<137E3801FF80380781C0380F00E0001E1370481338A248133CA200F8131EA414
1FA41278143FA27E001C135F7E6C139F3803831FEA00FCEB001EA3143E143CA21438001C
1378003E137014E0383C01C038180380381C0F00EA0FFEEA03F818297EA71D>57
D<B67E15E03907E001F80003EB007C157E81811680A616005D153E5D5DEC03F090B512C0
9038E000F8157C151F1680150F16C0150716E0A6ED0FC0A2ED1F80A2ED7F00000714FCB6
5A15C023297EA829>66 D<B67E15F03907E001FC0003EB003E81ED0F80ED07C0ED03E0ED
01F0A2ED00F8A216FC167CA3167EAA167CA216FC16F8A2ED01F0A2ED03E016C0ED0780ED
1F00153E0007EB01FCB612F0158027297EA82D>68 D<02FF13200107EBC06090381F8070
90397E0018E001F813054848130348481301485A48481300A248C812605A123E007E1520
A2127C160012FCA8913801FFFE127C91380007E0007E1403A2123E123F7E6C7EA26C7E6C
7E6C6C13056C7E017E131890391FC07060903907FFC020010090C7FC272B7DA92E>71
D<D8FFE0EB3FFE7FD803F8EB03E00002EC01C0017CEB0080137E133E7FA26D7E8013076D
7E8013016D7E80147C80143F80EC0F8015C01407EC03E015F01401EC00F8A2157C157E15
3E151FA2150F1507A200071403486C1301EAFFF8150027297EA82C>78
D<49B4FC90380F01E090383C0078497F01E0130E0001140F4848EB07804848EB03C0000F
15E048C7EA01F0A2003EEC00F8A2007E15FCA2007C157CA200FC157EA9007C157C007E15
FCA3003E15F8003F14016C15F0A26C6CEB03E0000715C06D13076C6CEB0F80C66CEB1E00
01785B6D5B90380F01E0D901FFC7FC272B7DA92E>I<EA03FCEA0C0738100380383C01C0
003E7F6D7E121C1208C7FCA3137FEA03E0EA0F80EA1E005A127C0078144012F8A3130112
7C393C027880381E0C7F3907F01E001A1A7E991D>97 D<EA078012FFA2120F1207ACEB83
F0EB8C1CEBB0079038C0038015C090388001E0A2EC00F0A215F8A715F0A2140115E015C0
EBC00390384007809038200E003806181C380407E01D2A7FA921>I<140F49B4FCA2EB00
1F80AC133F3801C0CF3803802F380F001F121E001C7F123C127C1278A212F8A71278A27E
A26C5B000E132F6CEB4F803901C18FF838007E0F1D2A7EA921>100
D<13FE38038780380701C0000E13E0EA1C00003C13F0A2481378A212F8A2B512F800F8C7
FCA51278A26C1308A26C1310000E13206C13403801C18038007E00151A7E991A>I<1207
EA0F80121FA2120FEA0700C7FCA9EA0780127FA2120F1207B3A2EAFFF8A20D297FA811>
105 D<3A0783F803F83AFF8C1C0C1C9039900E100E3A0FA0072007000702A0138001C013
C0A201801380B13BFFFCFFFCFFFCA22E1A7F9931>109 D<380783F838FF8C1CEB900E38
0FA0070007148013C0A21380B139FFFCFFFCA21E1A7F9921>I<137E3803C3C0380700E0
000E1370481338003C133CA248131EA200F8131FA80078131EA26C133CA2001C13386C13
706C13E03803C3C038007E00181A7E991D>I<380787C038FF88E0EB91F0EA0FA1EA07C1
EBC0E014005BB07FEAFFFEA2141A7F9917>114 D<39FFF01FF0A2390F8007800007EB03
00140213C000035BA26C6C5AA213F000005BA2EB7820A36D5AA26D5AA36DC7FCA31306A2
1C1A7F991F>118 D<3AFFF3FF83FEA23A0F807C00F8D9003C1360D807801440141C141E
2603C02E1380142FA23A01E04701001581A23900F0838215C2A290387901C415E4137D90
383E00E815F8A2011C1370A301081320271A7F992A>I<39FFF07FF0A2390FC01F003807
801C3803C0183801E0106D5A00005BEB78C06D5A013DC7FC7F7F80A2EB13C0EB21E01361
EB40F0EB80783801007C48133C487F001F133F39FFC07FF8A21D1A7F991F>I<39FFF01F
F0A2390F8007800007EB0300140213C000035BA26C6C5AA213F000005BA2EB7820A36D5A
A26D5AA36DC7FCA31306A21304A2130C1308A2EA701012F85BA2485AEA6080001FC8FC1C
267F991F>I E /Fj 23 117 df<1518153CA3157EA315FFA39138019F80A39138030FC0
A202077FEC0607A2020E7FEC0C03A202187F1501A202307F1500A24A137EA34A7FA20101
814A131FA201038191C7120FA249B67EA20106C7120749811603A2496E7EA3496E7EA201
70810160157EA201E0157F498112016D16801203D80FF8ED7FC0D8FFFE0207B5FCA2383C
7EBB3C>65 D<4AB41480021FEBE00191387F0078D901F8EB0E03D903E0EB0707D90FC0EB
018749C812CF013E156F49153F5B4848151F0003160F485A491507120FA248481503A212
3F90C91201A25AA2007E93C7FCA212FEAB127EA2127FEF01807EA27F121FEF03006C7EA2
6C6C1506A26C7E00015E6C6C5D137C6D5D6D5DD90FC0495AD903E0495AD901F8010EC7FC
D9007F137C91381FFFF0020190C8FC313D7CBB39>67 D<B77E16F03A03FC0003FC6C48EB
007FEE1F80EE07C0EE03F0707E1600177C83173F831880170F18C0A2EF07E0A318F01703
A318F8AC18F0A3170718E0A3EF0FC0A2EF1F80A2EF3F00173E177E5F4C5A4C5A4C5AEE0F
80043FC7FC486CEB01FCB712F01680353B7CBA3D>I<B512F0A23803FC006C5AB3B3B148
7EB512F0A2143B7CBA1C>73 D<EC03FF91381E01E09138F0003CD903C0130F49486D7E49
C76C7E013EEC01F0496E7E49157C484881A24848810007178049150F000F17C049150700
1F17E0A248C9EA03F0A34817F8007E1601A300FE17FCAB007E17F8007F1603A46C17F06D
1507001F17E0A26D150F000F17C0000717806D151F000317006C6C153E6D157E0000167C
017C5D6D4A5A010FEC03C06D6C495AD903E0011FC7FCD900F8137C91381E01E0DA03FFC8
FC363D7CBB3E>79 D<B7FC16E03A03FC0003F86C48EB007E82EE0F80EE07C017E0EE03F0
A217F8160117FCA717F8160317F0A2EE07E017C0EE0F80EE3F00167CED03F090B612C001
F8C9FCB3A8487EB512F0A22E3B7CBA36>I<EC03FF91381E01E09138F0003CD903E0131F
D90780EB078049C76C7E013EEC01F0496E7E49157C0001167E49153E4848810007178049
150F000F17C0491507001F17E0A248C9EA03F0A34817F8A2007E1601A200FE17FCAB007E
17F8A2007F1603A36C17F0A26C6CED07E0A36C6CED0FC0000717806D017C131F0003D901
8214002601F002C7123EA26C6C48EB407C017CEC00F8013EEC21F0010FEC23C0D90784EB
3780D903E2011FC7FCD900F2133C91261F81F81304913803FF1891C7FC161CA2040C130C
160E1818160FEF8038EFC0F8933807FFF0A28218E07013C0701380EF3E00364D7CBB3E>
I<B612F8EDFF803A03FC000FE06C48EB01F8ED007E82707E707E707EA283160383A75F16
075F4C5A5F4CC7FC163E5EED01F0ED0F8090B500F8C8FC9038F8001FED03C0ED01F06F7E
167C82A2163F8283A683A61806EE0FE0A218040407130C486CEC03F0B500F00101131893
38007C30CAEA0FC0373C7CBA3B>I<D90FF0138090387FFE013901F00F813903C001C348
C712E3000E143748143F003C141F0038140F127800701407A200F01403A415017EA27E00
7C91C7FC127E7E13C0EA1FF06CB4FC14F0000313FE6CEBFFC06C14F0013F13FC01037F90
38003FFF14039138007F80ED1FC0150FED07E01503A2ED01F012C0A21500A37EA216E07E
15016C15C0A26CEC03806C140700F71500D8E1C0131ED8E0F05BD8C07E13F090380FFFE0
D8800190C7FC243D7CBB2C>I<007FB812C0A2903AC003FC003F277E0001F8130F007C16
0300781601127017001260A200E017E0A2481760A7C71600B3B3EC07FE0107B512FEA233
3B7DBA39>I<EB3F803801C0F03803003800047F000C131E487F001C80003E1307003F80
A3121EC7FCA3143FEB0FE7EB7E07EA01F0EA07E0EA0F80EA1F005A123E127E007C156012
FCA3140FA2127C007E1317003E903823E0C06C903841F1803A07C180FF003900FE003E23
257CA427>97 D<151FEC07FFA2EC003F81B3EB03F8EB1E06903870019F3901E000DF4848
137F48487F120F90C77E5A123EA2127E127CA212FCA9127CA2127E123EA2121E121F6C5C
6C6C5B6C6C135F6C6C139F3A00F0031F80D93C0E13FCEB07F0263C7DBB2C>100
D<EB0FF0EB383CEBE00F3901C0078039038003C00007EB01E0D80F0013F0481300001E14
F8123EA248147CA312FCA2B612FC00FCC8FCA6127CA2127E123E150C121E001F14187E6C
6C13306C6C13606C6C13C03900F0018090383C0E00EB07F81E257DA423>I<14FCEB0383
903807038090380E07C0EB1E0F133C137CEC07800178C7FC13F8AEB512FCA2D800F8C7FC
B3AE487E383FFFF0A21A3C7FBB18>I<EA03E012FFA212071203B3EC3FC0ECC0F09038E1
007801E27F01E4133E01E8131EA201F0131FA35BB3A6486CEB3F80B53887FFFCA2263C7D
BB2C>104 D<EA0380EA07C0EA0FE0A3EA07C0EA0380C7FCADEA03E012FFA212071203B3
ACEA07F0B5FCA210397EB815>I<EA03E012FFA212071203B3B3B1487EB51280A2113C7E
BB15>108 D<3903E03FC000FFEBC0F09038E10078D807E27FD803E4133E01E8131EA201
F0131FA35BB3A6486CEB3F80B53887FFFCA226257DA42C>110 D<EB07F0EB3C1E9038F0
07803901C001C048486C7E00078048C71278001E80A2003E143EA24880A300FC1580A900
7C1500A36C143EA2001E143C001F147C6C14786C6C5B6C6C485A00015C3900F00780D93C
1EC7FCEB07F021257DA427>I<3903E03F8039FFE1C0F09038E3003CD807E47FD803E87F
01F0EB078016C049EB03E0A2ED01F0A216F8A2150016FCA916F81501A216F0150316E0ED
07C07FED0F806DEB1F0001EC131E01E613789038E181E0D9E07FC7FC91C8FCAE487EB57E
A226367DA42C>I<3803E0FC38FFE106EBE20F3907E41F80EA03E8A29038F00F00140691
C7FCA25BB3A6487EB512C0A219257DA41E>114 D<EBFF02380700C6000C132E0010131E
123048130EA200E01306A37E7E6C90C7FC127FEA3FF0EBFF806C13E000077F000113FC38
003FFE1301EB003F00C07FEC0F8014076C1303A46C1400A26C5B140600E45B00E25B38C1
807038807F8019257DA41F>I<1318A51338A41378A213F8A2120112031207381FFFFEB5
FCD800F8C7FCB3EC0180A91378EC0300137CEB3C02EB1E066D5AEB03F019357FB41E>I
E end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 300dpi
TeXDict begin

%%EndSetup
%%Page: 1 1
1 0 bop -17 255 a Fj(Prop)r(osal)29 b(for)e(a)f(D)n(A)n(Q)f(and)i
(Online)g(T)-7 b(est)27 b(Stand)g(for)f(the)h(DIR)n(C)605
403 y Fi(Da)n(vid)18 b(Bro)n(wn,)j(Gerard)e(Oxob)n(y)731
519 y(No)n(v)n(em)n(b)r(er)h(20,)g(1995)1745 694 y Fh(DIR)o(C)c(note)g
(#)g(16)875 792 y Fg(Abstract)40 863 y Ff(T)l(o)k(dev)o(elop)i(online)g
(and)e(D)o(A)o(Q)g(systems)g(for)g(the)g(DIR)o(C,)g(a)g(dedicated)i(D)o
(A)o(Q)e(and)h(online)h(test)d(stand)i(is)-28 920 y(needed.)i(In)17
b(this)g(note,)e(w)o(e)h(prop)q(ose)g(the)g(construction)g(of)g(a)g
(test)f(stand)h(at)f(LBL.)i(The)f(primary)g(goals)g(for)f(the)-28
976 y(test)h(stand)f(will)j(b)q(e)f(to)f(dev)o(elop)h(a)f(DIR)o(C)g
(readout)g(system)f(within)j(the)e(Babar)g(framew)o(ork,)e(and)j(to)e
(dev)o(elop)i(a)-28 1032 y(DIR)o(C)h(calibration)g(pro)q(cedure.)29
b(W)l(e)17 b(list)i(the)e(resources)h(needed,)h(and)f(discuss)h(ho)o(w)
e(w)o(e)g(migh)o(t)h(obtain)f(them.)-28 1089 y(W)l(e)h(discuss)g(ho)o
(w)f(this)h(e\013ort)e(w)o(ould)i(relate)g(to)f(the)g(dev)o(elopmen)o
(t)h(of)f(the)h(general)g(Babar)f(online,)i(and)f(to)f(the)-28
1145 y(dev)o(elopmen)o(t)k(of)f(online)i(systems)f(for)e(the)i(other)f
(sub-detectors.)36 b(W)l(e)21 b(also)g(discuss)g(ho)o(w)f(DIR)o(C)h
(colleagues)-28 1202 y(outside)16 b(of)f(the)g(ba)o(y)g(area)f(could)i
(participate)g(in)g(this)g(w)o(ork.)-28 1360 y Fe(1)81
b(In)n(tro)r(duction)-28 1462 y Ff(F)l(unctioning)21
b(DIR)o(C)g(D)o(A)o(Q)e(and)i(online)h(systems)d(m)o(ust)h(b)q(e)h(a)o
(v)m(ailable)g(in)g(early)g(1998)e(b)q(oth)h(for)f(the)i(3-sector)-28
1518 y(testb)q(eam)f(at)f(CERN,)h(and)h(to)e(test)h(sectors)f(when)i
(they)f(start)f(arriving)i(at)e(SLA)o(C.)h(A)h(go)q(o)q(d)f(goal)g(is)g
(to)g(use)-28 1574 y(realistic)d(D)o(A)o(Q)d(and)i(online)h(systems)d
(for)h(these)g(tests,)f(in)i(order)f(to)g(test)g(and)g(debug)h(them)f
(as)g(w)o(ell.)40 1631 y(T)l(o)f(dev)o(elop)h(these)g(systems,)e(a)h
(realistic)i(test)d(en)o(vironmen)o(t)i(is)g(needed.)21
b(T)l(o)13 b(this)i(end,)g(w)o(e)f(prop)q(ose)g(to)g(setup)-28
1687 y(a)g(DIR)o(C)g(D)o(A)o(Q/online)g(test)g(stand)f(at)h(LBL.)g(LBL)
h(is)f(a)g(logical)h(place)g(for)e(this)i(installation,)g(as)e(it)h
(already)h(hosts)-28 1744 y(a)i(general)h(Babar)f(D)o(A)o(Q)g(dev)o
(elopmen)o(t)h(lab)f(\(see)h(section)g(2\).)25 b(The)18
b(prop)q(osed)f(DIR)o(C)h(test)e(stand)h(w)o(ould)h(share)-28
1800 y(the)g(lab)g(space)g(with)f(the)h(general)g(D)o(A)o(Q)f(setup,)h
(allo)o(wing)h(a)e(sharing)h(of)f(to)q(ols.)27 b(Most)16
b(imp)q(ortan)o(tly)l(,)i(the)g(LBL)-28 1857 y(test)c(stand)g(w)o(ould)
h(pro)o(vide)g(us)g(with)g(access)g(to)e(the)i(BaBar)f(D)o(A)o(Q)g(exp)
q(erts)h(\(Gerry)f(Abrams,)g(Stev)o(e)g(Lewis,)i(Jo)q(e)-28
1913 y(White,)f(and)g(Chris)g(Da)o(y\),)f(and)h(their)g(w)o(ork)o(ers.)
j(In)e(a)e(recipro)q(cal)j(role,)e(the)f(DIR)o(C)h(test-b)q(enc)o(h)h
(will)h(pro)o(vide)e(the)-28 1970 y(general)h(D)o(A)o(Q)e(group)h(with)
h(an)f(example)h(sub-system)f(on)h(whic)o(h)g(to)e(exp)q(erimen)o(t.)40
2026 y(The)g(main)h(goals)e(of)h(the)g(test)f(stand)h(will)h(b)q(e)g
(dev)o(elopmen)o(t)f(of)g(D)o(A)o(Q)f(and)h(calibration)h(soft)o(w)o
(are.)j(These)c(will)-28 2083 y(require)g(in)o(timate)f(kno)o(wledge)h
(of)f(the)g(p)q(erformance)g(and)h(b)q(eha)o(vior)f(of)g(the)g(DIR)o(C)
h(and)f(D)o(A)o(Q)g(electronics,)h(whic)o(h)-28 2139
y(can)j(only)g(b)q(e)g(obtained)g(through)f(direct)h(testing)f(and)h
(exp)q(erimen)o(tation.)25 b(W)l(e)16 b(foresee)h(a)f(long)g(program)g
(where)-28 2195 y(sp)q(eci\014c)g(goals)d(co-ev)o(olv)o(e)h(with)h(the)
f(DIR)o(C)g(electronics)h(and)f(the)g(general)g(BaBar)g(D)o(A)o(Q)f
(system.)19 b(Details)c(of)e(our)-28 2252 y(prop)q(osed)i(program)g
(are)f(giv)o(en)i(in)g(sections)g(4.1)e(and)h(4.2.)40
2308 y(There)21 b(are)f(also)g(imp)q(ortan)o(t)g(secondary)g(goals)g
(of)g(the)g(DIR)o(C)h(test)e(b)q(enc)o(h.)37 b(One)21
b(will)h(b)q(e)f(to)e(pro)o(vide)i(an)-28 2365 y(en)o(vironmen)o(t)16
b(for)g(testing)g(the)g(DIR)o(C/SVT/IFR)g(p)q(ersonalit)o(y)h(mo)q
(dule.)24 b(Another)16 b(will)h(b)q(e)g(to)e(help)j(de\014ne)f(the)-28
2421 y(fast)f(con)o(trol)g(system)h(requiremen)o(ts.)25
b(Successful)18 b(DIR)o(C)f(readout)f(soft)o(w)o(are)f(w)o(ould)j(also)
e(pro)o(vide)i(a)e(mo)q(del)i(for)-28 2478 y(other)d(sub-systems.)40
2534 y(The)j(Babar)g(D)o(A)o(Q)g(group)g(ha)o(v)o(e)f(sho)o(wn)h(en)o
(th)o(usiasm)g(and)h(supp)q(ort)f(for)f(the)h(idea)h(of)f(a)g(DIR)o(C)g
(test)f(b)q(enc)o(h,)-28 2591 y(and)f(ha)o(v)o(e)g(o\013ered)g(to)g
(share)g(h)o(uman)g(and)g(other)g(resources.)23 b(In)17
b(particular,)g(it)f(is)h(hop)q(ed)g(that)f(some)g(hardw)o(are)-28
2647 y(necessary)g(\(most)g(imp)q(ortan)o(tly)g(a)g(protot)o(yp)q(e)g
(R)o(OM\))g(migh)o(t)g(b)q(e)h(pro)o(vided)g(b)o(y)f(them.)23
b(Other)17 b(materials)f(migh)o(t)-28 2704 y(b)q(e)g(\014nanced)g(from)
f(the)g(Babar)g(R+D)g(fund,)h(or)e(through)h(DIR)o(C)h(discretionary)g
(funds.)963 2828 y Fh(1)p eop
%%Page: 2 2
2 1 bop 40 53 a Ff(Our)17 b(plan)h(is)g(to)e(start)g(setting)h(up)g
(the)g(test)g(stand)f(early)i(1996.)24 b(The)17 b(initial)i(task)d
(will)j(b)q(e)e(to)g(learn)g(ab)q(out)-28 110 y(the)g(readout)g(con)o
(troller,)h(and)g(to)e(b)q(egin)j(customizing)g(the)e(Babar)g(online)i
(in)o(terface)f(for)e(our)h(purp)q(oses.)27 b(After)-28
166 y(the)14 b(protot)o(yp)q(e)g(DIR)o(C)g(fron)o(t-end)h(electronics)g
(b)q(oards,)f(the)h(protot)o(yp)q(e)f(R)o(OM,)g(and)g(the)h(protot)o
(yp)q(e)e(p)q(ersonalit)o(y)-28 223 y(mo)q(dules)j(\014rst)f(app)q
(ear,)g(w)o(e)g(will)i(b)q(egin)f(DIR)o(C)g(sp)q(eci\014c)h(tests.)i
(As)c(describ)q(ed)i(in)f(section)g(3,)e(w)o(e)h(w)o(ould)h(upgrade)-28
279 y(the)f(system)g(piece)i(at)d(a)h(time,)g(as)g(new)g(electronics)i
(and)e(general)h(soft)o(w)o(are)e(app)q(ear.)-28 439
y Fe(2)81 b(Existing)26 b(LBL)i(D)n(A)n(Q)e(T)-7 b(est)27
b(Setup)-28 541 y Ff(A)15 b(sophisticated)h(D)o(A)o(Q)e(test)g(setup)i
(is)f(already)g(in)h(op)q(eration)f(at)f(LBL.)h(This)h(setup)f(w)o(as)f
(constructed)h(b)o(y)g(Chris)-28 597 y(Da)o(y)g(and)i(Bob)g(Jacobsen,)f
(mainly)i(to)e(study)g(data\015o)o(w)f(and)i(ev)o(en)o(t)f(building.)26
b(The)17 b(setup)f(has)h(also)f(b)q(een)h(used)-28 653
y(b)o(y)i(Stev)o(e)f(Lewis)i(and)f(Jo)q(e)g(White)g(to)f(dev)o(elop)i
(protot)o(yp)q(e)e(online)i(con)o(trol)f(soft)o(w)o(are.)28
b(A)19 b(similar)h(system)e(has)-28 710 y(b)q(een)e(setup)g(at)e(SLA)o
(C)i(b)o(y)f(the)g(drift)h(c)o(ham)o(b)q(er)f(group.)40
766 y(The)f(existing)h(setup)f(has)g(man)o(y)f(asp)q(ects)h(of)f(the)h
(\014nal)g(BaBar)g(D)o(A)o(Q.)f(It)h(consists)g(of)f(VME)g(crate)h
(electronics)-28 823 y(with)j(remote)f(micro-pro)q(cessors)h(connected)
g(to)f(UNIX)h(w)o(orkstations.)23 b(There)17 b(are)f(curren)o(tly)h(3)g
(SUN)g(stations)-28 879 y(and)g(3)f(DEC)h(ALPHA)g(stations)f(connected)
i(in)g(v)m(arious)f(w)o(a)o(ys)f(to)g(Motorola)f(pro)q(cessor)i(VME)f
(con)o(trollers.)25 b(As)-28 936 y(these)20 b(are)f(curren)o(tly)h(all)
h(in)f(use)g(for)f(v)m(arious)i(pro)s(jects,)e(the)h(DIR)o(C)g(group)f
(w)o(ould)h(ha)o(v)o(e)f(to)g(pro)o(vide)i(its)f(o)o(wn)-28
992 y(UNIX)c(station.)40 1049 y(There)f(are)g(a)f(total)h(of)f(three)h
(VME)g(crates.)k(Tw)o(o)14 b(of)g(them)h(are)g(curren)o(tly)g(dev)o
(oted)g(to)f(high-sp)q(eed)j(net)o(w)o(ork)-28 1105 y(dev)o(elopmen)o
(t)i(and)g(b)q(enc)o(hmarking.)31 b(Eac)o(h)19 b(of)f(these)h(has)f(a)g
(Motorola)g(M-VME167)f(CPU)h(b)q(oard)h(\(68040\))d(as)-28
1162 y(primary)f(pro)q(cessor)g(and)h(a)f(Motorola)f(M-VME1600)g(CPU)h
(b)q(oard)g(\(PPC603\))f(as)h(secondary)g(pro)q(cessor.)20
b(Also,)-28 1218 y(eac)o(h)d(has)g(an)h(In)o(terface)f(5211)f
(FDDI/CDDI)g(net)o(w)o(ork)g(adapter)h(card)g(and)h(an)f(In)o(terface)g
(5215)f(A)l(TM)h(net)o(w)o(ork)-28 1274 y(adapter)e(card.)20
b(All)c(of)f(the)g(CPUs)g(are)g(running)h(VxW)l(orks)f(5.2)f(as)h
(their)h(op)q(erating)f(systems.)40 1331 y(The)j(remaining)h(VME)f
(crate)f(has)h(t)o(w)o(o)f(Motorola)g(M-VME167)f(CPUs)i(in)h(it)f(as)f
(w)o(ell)i(as)f(a)g(large)g(memory)-28 1387 y(mo)q(dule)j(\(MM6390\),)e
(a)h(m)o(ultipurp)q(ose)h(I/O)g(register)f(\(CAEN)g(V262\))f(with)i
(NIM)f(and)g(ECL)h(c)o(hannels,)h(and)-28 1444 y(an)17
b(in)o(terrupt)h(generator)f(b)q(oard)g(\(R)o(CB)g(8047)g(CORBO\).)h
(The)f(CPUs)g(run)h(VxW)l(orks)f(5.2)g(as)g(w)o(ell)h(as)f(EPICS.)-28
1500 y(Initialy)l(,)h(the)e(DIR)o(C)g(test)g(b)q(enc)o(h)h(electronics)
g(could)g(b)q(e)g(housed)f(in)h(this)g(crate.)k(Ultimately)l(,)d(w)o(e)
d(need)i(a)f(DIR)o(C)-28 1557 y(fron)o(t)e(end)i(crate.)40
1613 y(In)d(addition)g(to)f(the)g(VME)g(hardw)o(are,)g(there)g(is)h(a)f
(CAMA)o(C)f(crate)h(and)g(a)g(NIM)h(bin,)g(with)g(assorted)e(mo)q
(dules.)-28 1670 y(These)k(w)o(ould)g(b)q(e)h(used)f(to)f(sim)o(ulate)i
(the)f(trigger)f(and)h(timing)h(con)o(trol)e(in)i(the)f(initial)i
(phase)e(of)f(the)h(test)f(b)q(enc)o(h.)-28 1726 y(Usual)i(ancillary)g
(to)q(ols)g(suc)o(h)f(as)g(oscilloscop)q(es)i(and)e(logic)h(analyzers)g
(are)f(also)g(a)o(v)m(ailable.)40 1783 y(Soft)o(w)o(are)c(licenses)k
(exist)e(at)f(LBL)h(for)f(A)-5 b(VS)13 b(\(a)f(data)g(visualization)j
(pac)o(k)m(age\))d(and)h(Ob)s(ject-Store)f(\(an)g(ob)s(ject-)-28
1839 y(orien)o(ted)k(database\).)j(These)c(migh)o(t)g(b)q(e)h(used)g
(as)f(protot)o(yp)q(es)f(for)h(the)g(online)i(ev)o(en)o(t)e(displa)o(y)
h(and)f(database.)-28 1999 y Fe(3)81 b(DIR)n(C)27 b(T)-7
b(est)27 b(Stand)g(Setup)-28 2100 y Ff(Our)16 b(prop)q(osed)g(test)f
(stand)g(will)j(reuse)e(some)f(of)g(the)h(comp)q(onen)o(ts)f(used)i(at)
e(the)g(CERN)h(testb)q(eam.)21 b(T)l(o)15 b(con)o(trol)-28
2157 y(the)h(electronics,)h(w)o(e)e(prop)q(ose)h(to)f(use)h(the)g(SUN)g
(w)o(orkstation)e(whic)o(h)j(ran)f(the)f(D)o(A)o(Q)h(at)f(the)h(CERN)g
(testb)q(eam.)-28 2213 y(A)d(replacemen)o(t)h(SUN)f(station)g(could)h
(b)q(e)g(con\014gured)f(to)g(run)g(the)g(same)g(soft)o(w)o(are,)e(pro)o
(viding)j(con)o(tin)o(uit)o(y)g(for)e(the)-28 2270 y(1996)i(b)q(eam)h
(tests.)40 2326 y(Our)h(initial)h(readout)e(system)g(will)i(b)q(e)f
(based)g(in)g(the)g(SUN)f(pro)q(cessor,)g(and)h(will)h(use)e(EPICS)h
(to)f(connect)h(to)-28 2383 y(the)e(VME)g(crate.)19 b(W)l(e)14
b(will)i(use)f(the)f(standard)g(run-con)o(trol)g(en)o(vironmen)o(t)h
(that)e(is)i(b)q(eing)g(dev)o(elop)q(ed)h(for)e(Babar,)-28
2439 y(whic)o(h)i(is)g(based)f(at)g(least)g(in)i(part)d(on)h(the)h
(run-con)o(trol)f(used)h(at)f(the)g(DIR)o(C)g(testb)q(eam.)20
b(The)c(user)f(in)o(terface)h(for)-28 2495 y(DIR)o(C)f(sp)q(eci\014c)h
(access)f(will)h(b)q(e)f(mostly)f(written)h(in)g(c)g(and)g(Tcl/Tk,)f
(as)g(at)g(the)h(testb)q(eam.)k(for)14 b(our)g(initial)j(tests,)-28
2552 y(the)d(time)f(p)q(erformance)h(of)f(the)h(system)f(will)i(not)e
(b)q(e)h(critical.)21 b(As)14 b(timing)g(b)q(ecomes)g(more)f(critical,)
i(w)o(e)e(will)i(ha)o(v)o(e)-28 2608 y(to)i(push)h(the)f(readout)h
(soft)o(w)o(are)d(out)i(of)g(the)h(unix)h(pro)q(cessor)e(and)g(in)o(to)
h(the)f(remote)g(micro-pro)q(cessors)h(\(R)o(OC)-28 2665
y(cpu\).)32 b(Monitoring)19 b(and)g(data)g(ev)m(aluation)h(will)h(con)o
(tin)o(ue)e(to)g(b)q(e)g(p)q(erformed)h(in)g(the)f(UNIX)h(station.)31
b(T)l(o)18 b(get)963 2828 y Fh(2)p eop
%%Page: 3 3
3 2 bop -28 53 a Ff(realistic)15 b(p)q(erformance)e(estimates,)h(the)f
(SUN)h(will)h(ev)o(en)o(tually)f(need)h(to)e(b)q(e)h(replaced)g(b)o(y)g
(a)f(faster)f(UNIX)i(station)-28 110 y(\(whatev)o(er)g(is)i(c)o(hosen)f
(b)o(y)g(the)h(online)h(group)e(for)f(general)i(D)o(A)o(Q\).)40
166 y(Initialy)l(,)25 b(the)c(electronics)i(and)f(soft)o(w)o(are)d
(will)24 b(b)q(e)e(tested)f(using)h(b)q(oth)g(on-b)q(oard)f(and)h
(external)g(pulsing.)-28 223 y(External)h(pulsing)h(will)g(b)q(e)g
(done)f(with)g(a)f(programmable)g(signal)i(generator.)41
b(Ha)o(ving)23 b(b)q(oth)f(in)o(ternal)i(and)-28 279
y(external)17 b(pulsing)h(will)h(giv)o(e)d(us)h(\015exibilit)o(y)i(in)f
(the)f(kinds)g(of)g(test)f(w)o(e)g(can)h(p)q(erform,)f(as)h(w)o(ell)g
(as)f(allo)o(wing)i(us)f(to)-28 336 y(v)o(erify)e(the)h(p)q(erformance)
f(of)g(the)g(in)o(ternal)h(pulsing.)40 392 y(Later)d(phases)f(of)h(the)
f(readout)h(tests)f(will)i(require)g(a)e(more)g(realistic)i(single)g
(photon)f(signal.)20 b(Realistic)14 b(signals)-28 449
y(will)h(also)f(b)q(e)h(required)g(to)e(dev)o(elop)i(and)f(test)f(the)h
(calibration)h(soft)o(w)o(are.)j(T)l(o)13 b(pro)o(vide)i(suc)o(h)f
(signals,)g(w)o(e)g(prop)q(ose)-28 505 y(to)k(use)h(a)f(dark)g(b)q(o)o
(x)h(with)g(a)f(bundle)i(of)e(24)g(Hamamatsu)g(tub)q(es)h(from)f(the)g
(testb)q(eam.)30 b(T)l(o)19 b(induce)h(signals)f(in)-28
561 y(the)c(PMTs,)g(w)o(e)g(will)i(use)f(a)f(fast)g(\()p
Fd(<)p Ff(1)g(nSec\))h(blue)h(LED.)e(The)h(LED)f(w)o(ould)h(Initialy)h
(b)q(e)g(pulsed)g(through)e(a)g(fast)-28 618 y(pulsing)j(circuit)g(dev)
o(elop)q(ed)g(for)e(the)h(AMAND)o(A)f(exp)q(erimen)o(t)h(for)f
(calibrating)i(their)f(phototub)q(es)g(with)f(LEDs.)-28
674 y(The)i(LED)g(will)h(b)q(e)g(triggered)e(through)h(the)g(readout)f
(system,)h(allo)o(wing)g(full)h(con)o(trol)f(o)o(v)o(er)f(the)h(pulse)h
(timing,)-28 731 y(rate,)14 b(and)h(amplitude.)22 b(This)15
b(setup)h(will)g(allo)o(w)g(us)f(to)f(mo)q(del)i(b)q(oth)f(calibration)
i(readout)d(\(with)h(a)g(sync)o(hronous)-28 787 y(ligh)o(t)h
(\015ashing\))f(and)h(b)q(eam)f(readout)g(\(with)g(async)o(hronous)g
(ligh)o(t)h(\015ashing)g(and)f(triggering\).)40 844 y(The)h(initial)h
(hardw)o(are)d(needs)i(are)f(th)o(us;)32 921 y Fc(\017)24
b Ff(SUN)16 b(station)f(\(from)f(CERN)h(test\))32 998
y Fc(\017)24 b Ff(VME)15 b(crate)g(and)g(readout)g(\(from)f(LBL)i
(online)h(lab\))32 1075 y Fc(\017)24 b Ff(D)o(A)o(Q)15
b(card)g(protot)o(yp)q(e)g(with)g(p)q(ersonalit)o(y)h(mo)q(dule)g(\(R)o
(OM\))f(\(purc)o(hased)h(from)e(Babar)h(R+D)h(funds?\))32
1153 y Fc(\017)24 b Ff(Protot)o(yp)q(e)14 b(DIR)o(C)i(fron)o(t-end)f(b)
q(oard)g(\(DFB\))f(\(from)g(Orsa)o(y\))32 1230 y Fc(\017)24
b Ff(Pulser,)16 b(signal)g(generator,)e(and)h(`NIM')g(logic)h(\(from)e
(LBL\))32 1307 y Fc(\017)24 b Ff(basic)16 b(ADC)f(and)g(TDC.)-28
1384 y(In)o(termediate)h(tests)e(will)j(require)f(in)g(addition)40
1459 y Fc(\025)g Ff(1)f(DIR)o(C)g(fron)o(t-end)g(crate)g(\(purc)o
(hased)g(from)g(Babar)f(R+D)i(funds?\))40 1535 y Fc(\025)g
Ff(1)f(PDB)g(card)g(\(from)f(Ecole)i(P)o(olytec)o(hnique\))40
1610 y Fc(\025)g Ff(1)f(DIR)o(C)g(crate)g(con)o(troller)g(\(DCC\))f
(\(from)g(Ecole)i(P)o(olytec)o(hnique\))40 1685 y(dark)f(b)q(o)o(x)g
(\(from)f(LBL\))40 1760 y(PMTs)h(\(from)f(testb)q(eam\))40
1835 y(LED)h(and)h(pulsing)h(circuit)f(\(from)e(LBL\))40
1910 y(2nd)i(generation)f(DFB)g(protot)o(yp)q(e)f(cards)h(\(F)l(rom)f
(Orsa)o(y\))40 1985 y(F)l(ast)g(con)o(trol)h(mo)q(dules)i(\(F)o(CDM,)c
(F)o(CS\))h(\(??\))-28 2145 y Fe(4)81 b(T)-7 b(ests)-28
2247 y Ff(A)15 b(series)h(of)f(tests)f(m)o(ust)h(b)q(e)h(carefully)g
(planned)h(to)e(dev)o(elop)h(the)f(on-line)i(soft)o(w)o(are)d(and)h
(test)g(it)g(with)h(the)f(DIR)o(C)-28 2303 y(electronics)21
b(hardw)o(are.)31 b(These)20 b(elemen)o(ts)g(are)f(blended)i(together)e
(to)f(op)q(erate)i(and)f(obtain)h(results)f(from)g(the)-28
2360 y(detector.)40 2416 y(W)l(e)j(will)h(start)d(from)h(v)o(ery)g
(basic)i(tests)d(designed)j(to)e(familiarize)j(us)d(with)h(the)g
(system's)f(basic)h(comp)q(o-)-28 2472 y(nen)o(ts)15
b(and)h(bac)o(k-b)q(one)g(soft)o(w)o(are)d(dev)o(elop)q(ed)k(in)f
(conjunction)g(with)g(the)f(BaBar)g(data-acquisition)i(group.)i(This)
-28 2529 y(soft)o(w)o(are)13 b(will)k(b)q(e)f(p)q(ortable)g(to)e(other)
h(sub)q(ddetectors.)963 2828 y Fh(3)p eop
%%Page: 4 4
4 3 bop -28 53 a Fb(4.1)66 b(Electronics)24 b(T)-6 b(ests)-28
139 y Ff(The)13 b(DIR)o(C)f(D)o(A)o(Q)g(has)g(a)g(wide)i(range)e(of)g
(comp)q(onen)o(ts)g(whic)o(h)h(need)g(to)f(b)q(e)h(in)o(tegrated)f(to)g
(mak)o(e)g(up)h(the)f(complete)-28 196 y(\014nal)g(system.)18
b(It)10 b(will)j(b)q(e)e(imp)q(ortan)o(t)g(to)f(start)g(early)h
(testing)f(of)h(the)g(protot)o(yp)q(es)f(as)g(w)o(ell)i(as)e(the)h
(\014nal)h(comp)q(onen)o(ts)-28 252 y(with)17 b(a)f(system)f(p)q(ersp)q
(ectiv)o(e.)25 b(A)16 b(description)i(of)e(the)g(electronics)i(system)e
(comp)q(onen)o(ts)g(and)h(their)f(function)i(is)-28 309
y(giv)o(en)e(in)g(app)q(endix)h(A.)20 398 y(1.)23 b(Basic)16
b(T)l(ests:)79 455 y(The)f(basic)g(tests)f(are)g(sho)o(wn)g(in)h
(\014gure)f(1.)20 b(The)14 b(highligh)o(ted)j(ob)s(jects)c(are)h(the)h
(ones)f(most)g(under)h(scrutin)o(y)l(.)79 522 y(The)f(\014rst)g(group)f
(of)h(tests)f(will)j(start)c(with)i(a)g(minim)o(um)h(of)e(BaBar)h(sp)q
(eci\014c)i(mo)q(dules)f(in)f(order)g(to)f(concen-)79
578 y(trate)k(on)g(VxW)l(orks)g(and)h(EPICS)g(w)o(ork)e(en)o(vironmen)o
(t.)28 b(W)l(e)17 b(will)j(use)d(a)h(protot)o(yp)q(e)f(R)o(OM;)g(D)o(A)
o(Q)g(b)q(oard)79 634 y(without)g(P)o(o)o(w)o(er)e(PC,)h(and)h(P)o
(ersonalit)o(y)f(Mo)q(dule;)i(and)e(the)h(protot)o(yp)q(e)f(DIR)o(C)h
(F)l(ron)o(t-end)f(Board)g(\(DFB\))79 691 y(whic)o(h)h(has)f(a)f(VME)h
(in)o(terface.)21 b(This)c(will)g(allo)o(w)f(us)g(to)f("p)q(eek)i(and)f
(p)q(ok)o(e")g(these)g(mo)q(dules')g(registers)g(via)79
747 y(the)k(VME)g(in)o(terface)g(and)g(v)o(erify)g(their)g
(functionalit)o(y)l(.)35 b(In)20 b(next)g(step)g(w)o(e)f(will)j
(connect)e(the)g(P)o(ersonal-)79 804 y(it)o(y)d(Mo)q(dule)h(individual)
i(clo)q(c)o(k)d(con)o(trol)g(and)g(data)f(I/O)h(to)f(the)h(standard)g
(DFB)f(I/O)h(\(this)g(b)o(ypasses)g(the)79 860 y(GLINKs,)d(\014b)q
(er-optics)f(and)g(DIR)o(C)f(Crate)g(Con)o(troller)g(\(DCC\)\).)f(With)
h(this)h(set-up)g(w)o(e)f(will)i(c)o(hec)o(k)f(out)f(the)79
917 y(proto)q(col)j(transmission)h(and)f(deco)q(ding)i(in)f(the)f(DFB,)
g(and)g(exercise)h(the)g(DFB)e(electronics)j(calibration.)79
984 y(Then,)i(w)o(e)e(will)i(connect)g(our)e(logic)i(whic)o(h)f(sim)o
(ulates)g(the)g(trigger)f(electronics)i(and)f(the)g(fast)f(logic,)i
(and)79 1040 y(with)f(a)g(signal)g(generator)f(w)o(e)h(will)h(inject)g
(digital)g(impulses)g(to)e(the)h(input)h(of)e(the)h(TDC)f(and)h(v)o
(erify)g(the)79 1096 y(functionalit)o(y)f(of)d(the)i(DFB)e(readout)h
(section.)20 1174 y(2.)23 b(GLINKs)16 b(and)g(DCC)e(T)l(ests:)79
1230 y(The)h(prop)q(osed)g(DCC)f(tests)g(are)g(sho)o(wn)h(in)g
(\014gure)g(2.)k(Once)d(w)o(e)e(are)g(satis\014ed)h(with)g(the)g(ab)q
(o)o(v)o(e)f(men)o(tioned)79 1287 y(tests)j(w)o(e)g(will)h(in)o(tro)q
(duce)g(the)g(\014b)q(er-optic)g(CLINK)g(and)f(DLINK,)h(the)f(DCC,)f
(and)i(the)f(DIR)o(C)g(fron)o(t-end)79 1343 y(crate)c(with)h(the)f(P)o
(oin)o(t-to-p)q(oin)o(t)g(Distribution)i(Board)d(\(PDB\).)g(With)i
(this)g(con\014guration)f(w)o(e)g(can)g(run)h(the)79
1399 y(same)k(tests)f(as)h(w)o(e)f(did)i(in)g(the)f(preceding)i(step)e
(to)f(v)o(erify)h(the)g(functionalit)o(y)h(of)f(the)g(DCC.)f(One)h(of)g
(the)79 1456 y(most)h(critical)h(test)f(with)h(this)f(set-up)h(is)g(to)
e(lo)q(ok)i(at)e(the)i(stabilit)o(y)g(of)f(the)g(59.5MHz)f(clo)q(c)o(k)
i(b)q(eing)g(sen)o(t)79 1512 y(to)d(the)g(DFB.)g(This)g(clo)q(c)o(k)h
(is)g(extracted)f(in)h(the)f(DCC)g(from)f(the)i(data)e(receiv)o(ed)j(o)
o(v)o(er)d(the)h(CLINK)i(from)79 1569 y(the)d(P)o(ersonalit)o(y)h(Mo)q
(dule.)23 b(The)17 b(stabilit)o(y)g(of)e(this)i(clo)q(c)o(k)g(is)f
(crucial)i(b)q(ecause)f(the)f(timing)h(of)f(the)g(TDC)g(is)79
1625 y(dep)q(enden)o(t)f(up)q(on)f(it,)f(there)g(should)h(not)f(b)q(e)g
(an)o(y)g(shift)h(in)f(frequency)h(or)f(in)h(phase.)19
b(A)o(t)13 b(this)g(p)q(oin)o(t)h(one)f(ma)o(y)79 1682
y(consider)20 b(in)o(tro)q(ducing)g(analog)f(measuremen)o(ts)f(to)h(v)o
(erify)g(the)g(op)q(eration)g(of)f(the)h(discriminator,)i(ADC,)79
1738 y(TDC,)14 b(and)g(selectiv)o(e)i(readout)e(c)o(hain.)20
b(The)15 b(signal)g(injected)g(to)f(the)g(input)i(will)g(b)q(e)f
(coming)g(from)e(a)h(signal)79 1795 y(generator)f(so)h(the)g
(calibration)h(can)f(b)q(e)g(exercised.)21 b(T)l(o)14
b(complete)g(tests)g(with)g(this)g(set-up)h(w)o(e)e(ma)o(y)g(plug)i(in)
79 1851 y(the)h(P)o(o)o(w)o(er)d(PC)i(on)g(the)h(R)o(OM)f(and)g(run)h
(the)f(calibration)i(lo)q(cally)l(.)20 1928 y(3.)23 b(DIR)o(C)16
b(F)l(unctional)g(T)l(ests:)79 1985 y(The)i(prop)q(osed)h(functional)g
(tests)e(are)g(sho)o(wn)h(in)h(\014gure)f(3.)27 b(The)18
b(installation)i(of)d(a)g(second)i(DFB)e(in)i(the)79
2041 y(F)l(ron)o(t-end)11 b(crate)g(will)i(test)e(thoroughly)g(the)g
(DCC)g(and)g(PDB.)g(The)g(59.5MHz)f(clo)q(c)o(ks)i(for)f(the)g(DFBs)g
(within)79 2098 y(one)19 b(crate)f(m)o(ust)h(b)q(e)g(reasonably)g
(lined)i(up)e(in)g(phase,)h(there)f(should)g(not)g(b)q(e)g(an)o(y)g(in)
o(teraction)g(b)q(et)o(w)o(een)79 2154 y(DFBs,)13 b(and)h(the)g(P)o
(ersonalit)o(y)g(Mo)q(dule)g(addressing)h(of)e(the)h(VRAMs)g(on)f(the)h
(D)o(A)o(Q)g(b)q(oard)f(will)j(need)e(to)f(b)q(e)79 2211
y(v)o(eri\014ed.)24 b(By)16 b(that)g(time)g(a)g(F)l(ast)f(Con)o(trol)h
(Distribution)h(Mo)q(dule)g(should)g(b)q(ecome)g(a)o(v)m(ailable)h
(simplifying)79 2267 y(our)13 b(custom)g(logic)i(whic)o(h)f(will)h
(need)f(only)g(to)f(sim)o(ulate)h(the)f(trigger.)19 b(More)13
b(realistic)i(functional)f(tests)f(and)79 2324 y(calibration)k(runs)f
(can)g(b)q(e)h(imagined)g(and)f(at)f(last)g(real)i(signals)f(from)f
(PMTs)g(can)h(b)q(e)h(measured,)e(W)l(e)h(will)79 2380
y(use)i(the)g(Dark)f(Bo)o(x)g(and)g(LED)h(pulser)h(triggered)e(from)g
(either)h(the)g(DCC,)e(for)h(calibration)i(runs,)f(or)f(the)79
2436 y(pulse)g(con)o(troller)e(via)h(VME)f(to)f(sim)o(ulate)i(ph)o
(ysics)g(ev)o(en)o(ts.)20 2514 y(4.)23 b(Arc)o(hitectural)16
b(T)l(ests:)79 2570 y(The)23 b(arc)o(hitectural)g(tests)f(are)g(sho)o
(wn)g(in)i(\014gure)e(4.)42 b(These)23 b(tests)f(call)h(for)f(sev)o
(eral)h(F)l(ron)o(t-end)g(crates)79 2627 y(p)q(opulated)17
b(with)f(sev)o(eral)f(DFBs)g(eac)o(h,)h(and)f(as)g(man)o(y)g(R)o(OMs)h
(as)f(crates.)20 b(A)c(more)f(sophisticated)h(trigger)79
2683 y(and)j(F)l(ast)f(Con)o(trol)h(System)f(\(F)o(CS\))g(ma)o(y)g(b)q
(e)i(tested)e(using)i(this)f(con\014guration.)31 b(It)19
b(will)i(require)e(man)o(y)963 2828 y Fh(4)p eop
%%Page: 5 5
5 4 bop -26 2635 a @beginspecial 0 @llx 0 @lly 610 @urx
792 @ury 4803 @rwi @setspecial
%%BeginDocument: testFigA.eps
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 { } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	
	
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
	 statusdict /manualfeed true put
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
(4.0) FMVERSION
1 1 0 0 612 792 0 1 5 FMDOCUMENT
0 0 /Times-Bold FMFONTDEFINE
1 0 /Times-Roman FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
18 10.8 597.6 774 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
18 10.8 597.6 774 R
7 X
0 0 0 1 0 0 0 K
V
306 468 414 576 R
5 X
V
0.5 H
2 Z
0 X
N
90 505.8 161.64 574.74 R
5 X
V
0 X
N
198 540 270 576 R
5 X
V
0 X
N
5 X
90 450 25.71 3.04 86.28 704.23 G
0.2 H
0 Z
0 X
90 450 25.71 3.04 86.28 704.23 A
66.43 707.37 40.97 702.46 108.2 700.9 126.49 706.46 4 Y
4 X
V
0 X
N
5 X
180 356 23.8 3.11 86.91 705.32 G
0 X
180 356 23.8 3.11 86.91 705.32 A
5 X
90 450 22.64 2.94 86.28 706.34 G
0.25 H
0 X
90 450 22.64 2.94 86.28 706.34 A
5 X
180 270 3.2 1.2 95.9 704.9 G
0.2 H
0 X
180 270 3.2 1.2 95.9 704.9 A
132.84 745.39 122.12 748.5 122.12 712.1 132.84 716.01 4 Y
6 X
V
0.25 H
0 X
N
36.81 757.95 109.73 761.34 109.73 704.62 36.81 705.44 4 Y
6 X
V
0 X
N
73.24 754.8 M
 101.67 756.07 101.65 756.44 102.63 755.3 D
 103.63 754.16 103.63 754.16 103.63 733.11 D
 103.63 712.06 103.63 712.06 102.52 711.48 D
 101.42 710.9 101.42 710.9 72.58 710.9 D
 43.75 710.9 43.75 710.9 43.33 712.04 D
 42.91 713.18 42.91 713.18 42.91 732.49 D
 42.91 751.8 42.91 751.8 43.87 752.47 D
 44.84 753.15 46.04 753.57 73.24 754.8 D
O
3 X
V
0 X
N
47.86 751.18 M
 49.61 752.63 49.61 752.63 74.43 753.84 D
 99.31 755.04 99.31 755.04 101.06 753.92 D
 102.82 752.81 102.82 752.81 102.82 733.85 D
 102.82 714.96 102.82 714.96 101.29 713.5 D
 99.82 712.11 99.82 712.11 74.03 712.11 D
 48.24 712.11 48.24 712.11 47.18 713.26 D
 46.08 714.51 46.08 714.51 46.08 732.14 D
 46.08 749.78 46.08 749.78 47.86 751.18 D
O
7 X
V
0 X
N
122.11 755.85 116.7 759.42 109.71 761.4 109.71 704.67 116.7 705.18 122.11 707.54 6 Y
5 X
V
0 X
N
116.87 759.16 116.87 705.33 2 L
5 X
V
0.2 H
0 X
N
108.2 700.9 108.2 695.62 126.49 701.96 126.49 706.46 4 Y
6 X
V
0 X
N
108.2 700.9 40.97 702.46 40.97 697.23 108.2 695.62 4 Y
6 X
V
0 X
N
108.2 694.68 40.97 696.23 40.97 687.9 108.2 685.6 4 Y
6 X
V
0 X
N
108.2 694.68 108.2 685.6 126.49 693.66 126.49 701.04 4 Y
6 X
V
0 X
N
41.44 697.22 48.07 697.06 48.07 696.07 42.42 696.2 41.44 696.21 5 Y
5 X
V
0.01 H
0 X
N
108.17 695.62 126.49 701.96 126.49 701.04 108.17 694.68 4 Y
4 X
V
0 X
N
101.54 695.78 102.69 695.78 108.17 695.62 108.17 694.68 101.51 694.83 5 Y
5 X
V
0 X
N
48.07 697.06 50.4 697.01 79.12 696.32 93.72 695.97 100.92 695.79 101.54 695.78 101.54 694.83
 100.63 694.85 78.48 695.37 52.31 695.97 48.07 696.07 11 Y
3 X
V
0 X
N
90 450 0.58 0.7 103.12 690.04 G
90 450 0.58 0.7 103.12 690.04 A
111.11 695.7 111.11 686.88 118.24 690.02 118.24 698.17 4 Y
5 X
V
0 X
N
111.77 693.32 117.84 695.62 117.84 694.58 115.82 693.72 115.82 692.96 114.32 692.28 114.32 693.14
 111.77 692.16 8 Y
V
N
114.32 692.28 114.32 691.66 115.82 692.33 115.82 692.96 4 Y
7 X
V
0 X
N
108.2 685.08 108.2 683.06 99.55 683.41 99.55 685.38 4 Y
4 X
V
0 X
N
108.2 683.06 108.2 685.08 111.11 686.36 111.11 684.79 4 Y
2 X
V
0 X
N
99.84 685.88 108.2 685.6 108.2 685.08 99.55 685.38 4 Y
3 X
V
0 X
N
108.2 685.08 111.11 686.36 110.75 686.72 108.2 685.6 4 Y
V
N
49.6 687.07 49.6 685.37 40.95 685.8 40.95 687.45 4 Y
4 X
V
0 X
N
49.6 685.37 49.6 687.07 51.95 687.53 53.56 687.47 53.56 686.69 5 Y
2 X
V
0 X
N
40.95 687.45 41.31 687.89 49.6 687.6 49.6 687.07 4 Y
3 X
V
0 X
N
49.6 687.07 51.95 687.53 49.6 687.6 3 Y
V
N
123.62 690.84 123.62 692.11 126.53 693.47 126.53 692.45 4 Y
4 X
V
0 X
N
126.53 693.47 126.21 693.54 123.61 692.39 123.62 692.11 4 Y
3 X
V
0 X
N
123.62 690.84 120.33 690.94 123.04 692.14 123.62 692.11 4 Y
2 X
V
0 X
N
123.62 692.11 123.04 692.14 123.61 692.39 3 Y
V
N
0 12 Q
(SUN) 66 744.36 T
111.87 629.46 96.31 620.1 111.87 610.74 501.02 610.74 516.6 620.1 501.02 629.46 6 Y
5 X
V
0.5 H
2 Z
0 X
N
(VMEBus) 285.85 615.51 T
0 14 Q
(ROC) 112.89 552.22 T
J
77.4 660.6 539.11 660.6 539.11 460.93 77.4 460.93 4 Y
J
77.4 656.85 77.4 660.6 81.15 660.6 3 L
N
[7.495 6.496] 7.495 I
81.15 660.6 535.35 660.6 2 L
N
J
535.35 660.6 539.11 660.6 539.11 656.85 3 L
N
[7.646 6.627] 7.646 I
539.11 656.85 539.11 464.68 2 L
N
J
539.11 464.68 539.11 460.93 535.36 460.93 3 L
N
[7.495 6.496] 7.495 I
535.36 460.93 81.16 460.93 2 L
N
J
81.16 460.93 77.4 460.93 77.4 464.68 3 L
N
[7.646 6.627] 7.646 I
77.4 464.68 77.4 656.85 2 L
N
J
125.1 612 118.8 604.8 118.8 583.2 125.1 576 131.4 583.2 131.4 604.8 6 Y
N
234 612 226.8 604.8 226.8 583.2 234 576 241.2 583.2 241.2 604.8 6 Y
5 X
V
0 X
N
80.06 556.3 91.29 552.09 79.54 549.71 79.8 553 4 Y
V
150.3 726.91 138.6 729.54 149.92 733.51 150.11 730.21 4 Y
V
150.12 730.21 M
 169.75 729.5 194.37 720.37 177.78 698.09 D
 154.46 666.76 102.6 680.02 63.29 662.21 D
 28.88 646.62 27.7 600.78 49.99 574.09 D
 57.49 565.09 67.79 556.02 79.8 552.99 D
0 Z
N
(DAQ) 207 550.42 T
J
198 507.6 270 540 R
5 X
V
2 Z
0 X
N
241.2 558 270 576 R
7 X
V
0 X
N
0 12 Q
(PPC) 246.6 562.42 T
(Pers. Module) 203.81 519.36 T
J
160.2 674.38 200.93 715.11 211.11 704.93 170.38 664.2 4 Y
7 X
V
J
160.2 674.38 200.93 715.11 211.11 704.93 170.38 664.2 4 Y
J
162.85 671.73 160.2 674.38 162.85 677.03 3 L
[7.747 6.714] 7.747 I
162.85 677.03 198.28 712.46 2 L
J
198.28 712.46 200.93 715.11 203.58 712.46 3 L
[7.961 6.9] 7.961 I
203.58 712.46 208.46 707.58 2 L
J
208.46 707.58 211.11 704.93 208.46 702.28 3 L
[7.747 6.714] 7.747 I
208.46 702.28 173.03 666.85 2 L
J
173.03 666.85 170.38 664.2 167.73 666.85 3 L
[7.961 6.9] 7.961 I
167.73 666.85 162.85 671.73 2 L
0 X
(ethernet) 0 -315 165.86 668.73 TF
J
160.2 674.38 200.93 715.11 211.11 704.93 170.38 664.2 4 Y
J
162.85 671.73 160.2 674.38 162.85 677.03 3 L
[7.747 6.714] 7.747 I
162.85 677.03 198.28 712.46 2 L
J
198.28 712.46 200.93 715.11 203.58 712.46 3 L
[7.961 6.9] 7.961 I
203.58 712.46 208.46 707.58 2 L
J
208.46 707.58 211.11 704.93 208.46 702.28 3 L
[7.747 6.714] 7.747 I
208.46 702.28 173.03 666.85 2 L
J
173.03 666.85 170.38 664.2 167.73 666.85 3 L
[7.961 6.9] 7.961 I
167.73 666.85 162.85 671.73 2 L
J
J
(Standard   VMEBus    Crate) 232.33 646.92 T
122.4 270 230.4 306 R
5 X
V
0 X
N
302.4 270 421.2 306 R
5 X
V
0 X
N
0 14 Q
(\322NIM\323) 153.16 293.02 T
(Logic) 157.35 279.02 T
(Signal Generator) 313.2 283.74 T
45 23.4 563.4 52.2 R
7 X
V
0 18 Q
0 X
(Fig. 1  DIRC Basic T) 211.03 40.2 T
(ests) 369.38 40.2 T
316.8 529.2 352.8 547.2 R
N
0 12 Q
(Read) 318.93 535.32 T
(Buff.) 370.8 535.56 T
(TDC) 320.4 510.22 T
J
367.2 529.2 403.2 547.2 R
N
316.8 504 352.8 522 R
N
0 14 Q
(DFB  Pr) 327.6 559.42 T
(oto) 377.12 559.42 T
360 612 352.8 604.8 352.8 583.2 360 576 367.2 583.2 367.2 604.8 6 Y
5 X
V
0 X
N
324.29 456.47 327.6 468 330.91 456.47 327.6 456.47 4 Y
V
252 504 252 432 327.6 432 327.6 456.47 4 L
N
345.89 456.47 349.2 468 352.51 456.47 349.2 456.47 4 Y
V
234 504 234 414 349.2 414 349.2 456.47 4 L
N
212.69 492.47 216 504 219.31 492.47 216 492.47 4 Y
V
216 492.47 216 396 367.2 396 367.2 468 4 L
N
90 450 9 28.8 279 414 A
1 12 Q
(Ctrl) 306 435.6 T
(Clk) 306 417.6 T
(Data) 306 399.6 T
(Coax cables) 244.8 367.2 T
389.09 456.47 392.4 468 395.71 456.47 392.4 456.47 4 Y
V
392.4 306 392.4 456.47 2 L
N
241.93 284.69 230.4 288 241.93 291.31 241.93 288 4 Y
V
302.4 288 241.93 288 2 L
N
186.46 561.31 198 558 186.46 554.69 186.46 558 4 Y
V
176.4 306 176.4 558 186.46 558 3 L
N
0 14 Q
(VxW) 47.62 730.14 T
(orks) 77.95 730.14 T
(VxW) 100.8 528.54 T
(orks) 131.14 528.54 T
(EPICS) 54.82 715.74 T
(EPICS) 108 512.62 T
363.6 475.2 410.4 493.2 R
7 X
V
0 X
N
0 12 Q
(Analog) 370.8 480.88 T
J
1 14 Q
(Signal) 0 -270 383.95 335.02 TF
(Sync) 262.8 291.6 T
432.73 284.69 421.2 288 432.73 291.31 432.73 288 4 Y
V
486 288 432.73 288 2 L
N
1 12 Q
(T) 432 297.82 T
(rigger) 438.91 297.82 T
486 612 478.8 604.8 478.8 583.2 486 576 493.2 583.2 493.2 604.8 6 Y
N
450 507.06 522 575.46 R
5 X
V
0 X
N
0 14 Q
(Pulse) 468.51 545.02 T
(Contr) 464.4 525.46 T
(ol) 499.92 525.46 T
486 507.6 486 288 2 L
N
1 12 Q
(L1 T) 0 -270 166.6 374.4 TF
(rigger) 0 -270 166.6 397.64 TF
0 -208 1000 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndDocument
 @endspecial 868 2737 a Fh(Figure)16 b(1:)963 2828 y(5)p
eop
%%Page: 6 6
6 5 bop -26 2635 a @beginspecial 0 @llx 0 @lly 610 @urx
792 @ury 4803 @rwi @setspecial
%%BeginDocument: testFigB.eps
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 { } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	
	
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
	 statusdict /manualfeed true put
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
(4.0) FMVERSION
1 1 0 0 612 792 0 1 6 FMDOCUMENT
0 0 /Times-Bold FMFONTDEFINE
1 0 /Times-Roman FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
18 14.4 594 774 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
18 14.4 594 774 R
7 X
0 0 0 1 0 0 0 K
V
82.8 205.2 118.8 223.2 R
5 X
V
0.5 H
2 Z
0 X
N
5 X
90 450 25.71 3.04 84.48 706.03 G
0.2 H
0 Z
0 X
90 450 25.71 3.04 84.48 706.03 A
64.63 709.17 39.17 704.26 106.4 702.7 124.69 708.26 4 Y
4 X
V
0 X
N
5 X
180 356 23.8 3.11 85.11 707.12 G
0 X
180 356 23.8 3.11 85.11 707.12 A
5 X
90 450 22.64 2.94 84.48 708.14 G
0.25 H
0 X
90 450 22.64 2.94 84.48 708.14 A
5 X
180 270 3.2 1.2 94.1 706.7 G
0.2 H
0 X
180 270 3.2 1.2 94.1 706.7 A
131.04 747.19 120.32 750.3 120.32 713.9 131.04 717.81 4 Y
6 X
V
0.25 H
0 X
N
35.01 759.75 107.93 763.14 107.93 706.42 35.01 707.24 4 Y
6 X
V
0 X
N
71.44 756.6 M
 99.87 757.87 99.85 758.24 100.83 757.1 D
 101.83 755.96 101.83 755.96 101.83 734.91 D
 101.83 713.86 101.83 713.86 100.72 713.28 D
 99.62 712.7 99.62 712.7 70.78 712.7 D
 41.95 712.7 41.95 712.7 41.53 713.84 D
 41.11 714.98 41.11 714.98 41.11 734.29 D
 41.11 753.6 41.11 753.6 42.07 754.28 D
 43.04 754.95 44.24 755.37 71.44 756.6 D
O
3 X
V
0 X
N
46.06 752.98 M
 47.81 754.43 47.81 754.43 72.64 755.64 D
 97.51 756.84 97.51 756.84 99.26 755.72 D
 101.01 754.61 101.01 754.61 101.01 735.65 D
 101.01 716.76 101.01 716.76 99.49 715.3 D
 98.02 713.91 98.02 713.91 72.23 713.91 D
 46.44 713.91 46.44 713.91 45.38 715.06 D
 44.28 716.31 44.28 716.31 44.28 733.93 D
 44.28 751.58 44.28 751.58 46.06 752.98 D
O
7 X
V
0 X
N
120.31 757.65 114.9 761.22 107.9 763.2 107.9 706.47 114.9 706.98 120.31 709.34 6 Y
5 X
V
0 X
N
115.07 760.97 115.07 707.13 2 L
5 X
V
0.2 H
0 X
N
106.4 702.7 106.4 697.42 124.69 703.76 124.69 708.26 4 Y
6 X
V
0 X
N
106.4 702.7 39.17 704.26 39.17 699.03 106.4 697.42 4 Y
6 X
V
0 X
N
106.4 696.48 39.17 698.03 39.17 689.7 106.4 687.4 4 Y
6 X
V
0 X
N
106.4 696.48 106.4 687.4 124.69 695.46 124.69 702.84 4 Y
6 X
V
0 X
N
39.64 699.02 46.27 698.86 46.27 697.87 40.62 698 39.64 698.01 5 Y
5 X
V
0.01 H
0 X
N
106.37 697.42 124.69 703.76 124.69 702.84 106.37 696.48 4 Y
4 X
V
0 X
N
99.74 697.58 100.89 697.58 106.37 697.42 106.37 696.48 99.71 696.63 5 Y
5 X
V
0 X
N
46.27 698.86 48.6 698.81 77.32 698.12 91.92 697.77 99.12 697.59 99.74 697.58 99.74 696.63
 98.83 696.65 76.68 697.17 50.51 697.77 46.27 697.87 11 Y
3 X
V
0 X
N
90 450 0.58 0.7 101.32 691.84 G
90 450 0.58 0.7 101.32 691.84 A
109.31 697.5 109.31 688.68 116.43 691.82 116.43 699.97 4 Y
5 X
V
0 X
N
109.97 695.12 116.04 697.42 116.04 696.38 114.02 695.52 114.02 694.76 112.51 694.08 112.51 694.94
 109.97 693.96 8 Y
V
N
112.51 694.08 112.51 693.46 114.02 694.13 114.02 694.76 4 Y
7 X
V
0 X
N
106.4 686.88 106.4 684.86 97.75 685.21 97.75 687.17 4 Y
4 X
V
0 X
N
106.4 684.86 106.4 686.88 109.31 688.16 109.31 686.59 4 Y
2 X
V
0 X
N
98.04 687.68 106.4 687.4 106.4 686.88 97.75 687.17 4 Y
3 X
V
0 X
N
106.4 686.88 109.31 688.16 108.95 688.52 106.4 687.4 4 Y
V
N
47.8 688.87 47.8 687.17 39.15 687.6 39.15 689.25 4 Y
4 X
V
0 X
N
47.8 687.17 47.8 688.87 50.15 689.33 51.76 689.27 51.76 688.49 5 Y
2 X
V
0 X
N
39.15 689.25 39.51 689.69 47.8 689.41 47.8 688.87 4 Y
3 X
V
0 X
N
47.8 688.87 50.15 689.33 47.8 689.41 3 Y
V
N
121.82 692.64 121.82 693.91 124.73 695.28 124.73 694.25 4 Y
4 X
V
0 X
N
124.73 695.28 124.41 695.34 121.81 694.19 121.82 693.91 4 Y
3 X
V
0 X
N
121.82 692.64 118.53 692.74 121.25 693.94 121.82 693.91 4 Y
2 X
V
0 X
N
121.82 693.91 121.25 693.94 121.81 694.19 3 Y
V
N
110.07 631.26 94.51 621.9 110.07 612.54 499.23 612.54 514.8 621.9 499.23 631.26 6 Y
0.5 H
2 Z
N
0 12 Q
(VMEBus) 284.05 617.31 T
0 14 Q
(ROC) 115.2 542.6 T
J
90.36 507.6 162 576.54 R
N
J
75.6 662.4 537.31 662.4 537.31 462.73 75.6 462.73 4 Y
J
75.6 658.65 75.6 662.4 79.35 662.4 3 L
N
[7.495 6.496] 7.495 I
79.35 662.4 533.55 662.4 2 L
N
J
533.55 662.4 537.31 662.4 537.31 658.65 3 L
N
[7.646 6.627] 7.646 I
537.31 658.65 537.31 466.48 2 L
N
J
537.31 466.48 537.31 462.73 533.56 462.73 3 L
N
[7.495 6.496] 7.495 I
533.56 462.73 79.36 462.73 2 L
N
J
79.36 462.73 75.6 462.73 75.6 466.48 3 L
N
[7.646 6.627] 7.646 I
75.6 466.48 75.6 658.65 2 L
N
J
126 612.54 118.8 605.34 118.8 583.74 126 576.54 133.2 583.74 133.2 605.34 6 Y
N
234 612.54 226.8 605.34 226.8 583.74 234 576.54 241.2 583.74 241.2 605.34 6 Y
N
78.26 558.1 89.49 553.89 77.74 551.51 78 554.8 4 Y
V
148.5 728.71 136.8 731.34 148.12 735.31 148.31 732.01 4 Y
V
148.32 732.01 M
 167.95 731.3 192.57 722.17 175.98 699.89 D
 152.66 668.56 100.8 681.82 61.49 664.01 D
 27.08 648.42 25.9 602.58 48.19 575.89 D
 55.69 566.89 65.99 557.82 78 554.79 D
0 Z
N
(DAQ) 205.2 552.22 T
J
198 540 270 576 R
2 Z
N
198 507.6 270 540 R
5 X
V
0 X
N
241.2 558 270 576 R
5 X
V
0 X
N
0 12 Q
(PPC) 244.8 564.22 T
(Pers. Module) 202.01 521.16 T
J
18 414 288 414 288 140.4 18 140.4 4 Y
J
18 410.25 18 414 21.75 414 3 L
N
[7.616 6.601] 7.616 I
21.75 414 284.25 414 2 L
N
J
284.25 414 288 414 288 410.25 3 L
N
[7.324 6.347] 7.324 I
288 410.25 288 144.16 2 L
N
J
288 144.16 288 140.4 284.25 140.4 3 L
N
[7.616 6.601] 7.616 I
284.25 140.4 21.75 140.4 2 L
N
J
21.75 140.4 18 140.4 18 144.15 3 L
N
[7.324 6.347] 7.324 I
18 144.15 18 410.25 2 L
N
J
158.4 676.18 199.13 716.91 209.31 706.73 168.58 666 4 Y
7 X
V
J
158.4 676.18 199.13 716.91 209.31 706.73 168.58 666 4 Y
J
161.05 673.53 158.4 676.18 161.05 678.83 3 L
[7.747 6.714] 7.747 I
161.05 678.83 196.48 714.26 2 L
J
196.48 714.26 199.13 716.91 201.78 714.26 3 L
[7.961 6.9] 7.961 I
201.78 714.26 206.66 709.38 2 L
J
206.66 709.38 209.31 706.73 206.66 704.08 3 L
[7.747 6.714] 7.747 I
206.66 704.08 171.23 668.65 2 L
J
171.23 668.65 168.58 666 165.93 668.65 3 L
[7.961 6.9] 7.961 I
165.93 668.65 161.05 673.53 2 L
0 X
(ethernet) 0 -315 164.06 670.53 TF
J
158.4 676.18 199.13 716.91 209.31 706.73 168.58 666 4 Y
J
161.05 673.53 158.4 676.18 161.05 678.83 3 L
[7.747 6.714] 7.747 I
161.05 678.83 196.48 714.26 2 L
J
196.48 714.26 199.13 716.91 201.78 714.26 3 L
[7.961 6.9] 7.961 I
201.78 714.26 206.66 709.38 2 L
J
206.66 709.38 209.31 706.73 206.66 704.08 3 L
[7.747 6.714] 7.747 I
206.66 704.08 171.23 668.65 2 L
J
171.23 668.65 168.58 666 165.93 668.65 3 L
[7.961 6.9] 7.961 I
165.93 668.65 161.05 673.53 2 L
J
J
42.91 288.74 39.6 277.2 36.29 288.74 39.6 288.74 4 Y
V
39.6 313.2 39.6 288.74 2 L
N
78.91 288.74 75.6 277.2 72.29 288.74 75.6 288.74 4 Y
V
75.6 313.2 75.6 288.74 2 L
N
108.29 301.67 111.6 313.2 114.91 301.67 111.6 301.67 4 Y
V
111.6 277.2 111.6 301.67 2 L
N
1 F
(ctrl) 0 -270 33.38 283.86 TF
(clk) 0 -270 69.38 285.19 TF
(Data) 0 -270 101.78 280.8 TF
119.75 347.06 115.2 331.2 110.65 347.06 115.2 347.06 4 Y
V
115.2 367.2 115.2 347.06 2 L
1.5 H
N
155.75 347.06 151.2 331.2 146.65 347.06 151.2 347.06 4 Y
V
151.2 367.2 151.2 347.06 2 L
N
182.65 351.34 187.2 367.2 191.75 351.34 187.2 351.34 4 Y
V
187.2 331.2 187.2 351.34 2 L
N
25.2 313.2 277.2 331.2 R
5 X
V
0.5 H
0 X
N
97.2 367.2 205.2 403.2 R
5 X
V
0 Z
0 X
N
(ctrl) 0 -270 101.78 342 TF
(clk) 0 -270 141.38 342 TF
(Data) 0 -270 173.78 338.4 TF
0 14 Q
(DCC) 133.2 378 T
(PDB) 136.8 316.8 T
0 12 Q
(Fr) 62.44 150.36 T
(ont-end crate with up-to 16 DFB) 74.88 150.36 T
133.2 403.2 133.2 414 2 L
2 Z
N
169.2 403.2 169.2 414 2 L
N
0 10 Q
(CLINK) 104.02 443.3 T
(DLINK) 208.42 443.3 T
0 12 Q
(DIRC DAQ VMEBus Crate with up-to 12 DAQ Boards) 162 646.92 T
136.48 415.06 134.58 403.21 129.91 414.27 133.2 414.66 4 Y
1 X
V
133.21 414.65 M
 131.45 463.04 190.76 452.3 207.99 484.9 D
 211.97 492.43 216.79 498.69 215.93 506.4 D
1 H
N
248.1 496.17 251.71 507.6 254.7 495.99 251.4 496.08 4 Y
V
169.96 403.2 M
 162.4 448.36 212.9 448.39 237.04 468.81 D
 244.19 474.85 249.66 485.5 251.41 496.07 D
N
32.4 230.4 68.4 248.4 R
0.5 H
0 X
N
54 176.94 100.8 194.94 R
5 X
V
0 X
N
21.6 169.2 129.6 277.2 R
N
(Read) 34.54 236.52 T
(Buff.) 86.4 236.76 T
(TDC) 36 211.42 T
(ADC) 90 211.42 T
(Analog) 61.2 182.62 T
J
82.8 230.4 118.8 248.4 R
N
32.4 205.2 68.4 223.2 R
N
0 14 Q
(DFB) 62 260.62 T
43.2 25.2 561.6 54 R
7 X
V
0 18 Q
0 X
(Fig. 2  DIRC GLINKs & DCC T) 164.74 42 T
(ests) 412.07 42 T
471.6 234 579.6 270 R
N
298.8 234 417.6 270 R
N
0 14 Q
(\322NIM\323) 502.36 257.02 T
(Logic) 506.55 243.02 T
(Signal Generator) 316.8 249.82 T
68.69 128.87 72 140.4 75.31 128.87 72 128.87 4 Y
V
356.4 234 356.4 111.6 72 111.6 72 128.87 4 L
N
0 12 Q
(SUN) 65.18 744.36 T
0 14 Q
(VxW) 46.8 730.14 T
(orks) 77.14 730.14 T
(EPICS) 54 715.74 T
(VxW) 97.2 527.02 T
(orks) 127.54 527.02 T
(EPICS) 104.4 511.1 T
327.31 281.54 324 270 320.69 281.54 324 281.54 4 Y
V
205.2 385.2 324 385.2 324 281.54 3 L
N
1 F
(T) 338.4 285.65 T
(rigger) 346.46 285.65 T
(Sync) 432 258.64 T
(Signal) 262.8 115.2 T
396 612 388.8 604.8 388.8 583.2 396 576 403.2 583.2 403.2 604.8 6 Y
N
360 507.06 432 575.46 R
N
0 F
(Pulse) 378.51 545.02 T
(Contr) 374.4 525.46 T
(ol) 409.92 525.46 T
460.06 255.31 471.6 252 460.06 248.69 460.06 252 4 Y
V
421.2 252 460.06 252 2 L
N
399.31 281.54 396 270 392.69 281.54 396 281.54 4 Y
V
396 507.6 396 281.54 2 L
N
281.53 543.89 270 547.2 281.53 550.51 281.53 547.2 4 Y
V
522 270 522 432 306 432 306 547.2 281.53 547.2 5 L
N
1 12 Q
(L1 T) 466.5 434.61 T
(rigger) 489.74 434.61 T
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndDocument
 @endspecial 868 2737 a Fh(Figure)16 b(2:)963 2828 y(6)p
eop
%%Page: 7 7
7 6 bop -26 2635 a @beginspecial 0 @llx 0 @lly 610 @urx
792 @ury 4803 @rwi @setspecial
%%BeginDocument: testFigC.eps
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 { } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	
	
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
	 statusdict /manualfeed true put
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
(4.0) FMVERSION
1 1 0 0 612 792 0 1 6 FMDOCUMENT
0 0 /Times-Bold FMFONTDEFINE
1 0 /Times-Roman FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
10.8 18 590.4 781.2 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
10.8 18 590.4 781.2 R
7 X
0 0 0 1 0 0 0 K
V
163.8 174.6 271.8 282.6 R
5 X
V
0.5 H
2 Z
0 X
N
174.6 235.8 210.6 253.8 R
N
196.2 182.34 243 200.34 R
N
0 12 Q
(Read) 176.74 241.92 T
(Buff.) 228.6 242.16 T
(TDC) 178.2 216.82 T
(ADC) 232.2 216.82 T
(Analog) 203.4 188.02 T
J
225 235.8 261 253.8 R
N
174.6 210.6 210.6 228.6 R
N
225 210.6 261 228.6 R
N
0 14 Q
(DFB) 204.2 266.02 T
5 X
90 450 25.71 3.04 79.08 711.43 G
0.2 H
0 Z
0 X
90 450 25.71 3.04 79.08 711.43 A
59.23 714.57 33.77 709.66 101 708.1 119.29 713.66 4 Y
4 X
V
0 X
N
5 X
180 356 23.8 3.11 79.71 712.52 G
0 X
180 356 23.8 3.11 79.71 712.52 A
5 X
90 450 22.64 2.94 79.08 713.54 G
0.25 H
0 X
90 450 22.64 2.94 79.08 713.54 A
5 X
180 270 3.2 1.2 88.7 712.1 G
0.2 H
0 X
180 270 3.2 1.2 88.7 712.1 A
125.64 752.59 114.92 755.7 114.92 719.3 125.64 723.21 4 Y
6 X
V
0.25 H
0 X
N
29.61 765.15 102.53 768.54 102.53 711.82 29.61 712.64 4 Y
6 X
V
0 X
N
66.04 762 M
 94.47 763.27 94.45 763.64 95.43 762.5 D
 96.43 761.36 96.43 761.36 96.43 740.31 D
 96.43 719.26 96.43 719.26 95.32 718.68 D
 94.22 718.1 94.22 718.1 65.38 718.1 D
 36.55 718.1 36.55 718.1 36.13 719.24 D
 35.71 720.38 35.71 720.38 35.71 739.69 D
 35.71 759 35.71 759 36.67 759.67 D
 37.64 760.35 38.84 760.77 66.04 762 D
O
3 X
V
0 X
N
40.66 758.38 M
 42.41 759.83 42.41 759.83 67.24 761.04 D
 92.11 762.24 92.11 762.24 93.86 761.12 D
 95.61 760.01 95.61 760.01 95.61 741.05 D
 95.61 722.16 95.61 722.16 94.09 720.7 D
 92.62 719.31 92.62 719.31 66.83 719.31 D
 41.04 719.31 41.04 719.31 39.98 720.46 D
 38.88 721.71 38.88 721.71 38.88 739.34 D
 38.88 756.98 38.88 756.98 40.66 758.38 D
O
7 X
V
0 X
N
114.91 763.05 109.5 766.62 102.5 768.6 102.5 711.87 109.5 712.38 114.91 714.74 6 Y
5 X
V
0 X
N
109.67 766.36 109.67 712.53 2 L
5 X
V
0.2 H
0 X
N
101 708.1 101 702.82 119.29 709.16 119.29 713.66 4 Y
6 X
V
0 X
N
101 708.1 33.77 709.66 33.77 704.43 101 702.82 4 Y
6 X
V
0 X
N
101 701.88 33.77 703.43 33.77 695.1 101 692.8 4 Y
6 X
V
0 X
N
101 701.88 101 692.8 119.29 700.86 119.29 708.24 4 Y
6 X
V
0 X
N
34.24 704.42 40.87 704.26 40.87 703.27 35.22 703.4 34.24 703.41 5 Y
5 X
V
0.01 H
0 X
N
100.97 702.82 119.29 709.16 119.29 708.24 100.97 701.88 4 Y
4 X
V
0 X
N
94.34 702.98 95.49 702.98 100.97 702.82 100.97 701.88 94.31 702.03 5 Y
5 X
V
0 X
N
40.87 704.26 43.2 704.21 71.92 703.52 86.52 703.17 93.72 702.99 94.34 702.98 94.34 702.03
 93.43 702.05 71.28 702.57 45.12 703.17 40.87 703.27 11 Y
3 X
V
0 X
N
90 450 0.58 0.7 95.92 697.24 G
90 450 0.58 0.7 95.92 697.24 A
103.91 702.9 103.91 694.08 111.04 697.22 111.04 705.37 4 Y
5 X
V
0 X
N
104.57 700.52 110.64 702.82 110.64 701.78 108.62 700.92 108.62 700.16 107.11 699.48 107.11 700.34
 104.57 699.36 8 Y
V
N
107.11 699.48 107.11 698.86 108.62 699.53 108.62 700.16 4 Y
7 X
V
0 X
N
101 692.28 101 690.26 92.35 690.61 92.35 692.58 4 Y
4 X
V
0 X
N
101 690.26 101 692.28 103.91 693.56 103.91 691.99 4 Y
2 X
V
0 X
N
92.64 693.08 101 692.8 101 692.28 92.35 692.58 4 Y
3 X
V
0 X
N
101 692.28 103.91 693.56 103.55 693.92 101 692.8 4 Y
V
N
42.4 694.27 42.4 692.57 33.75 693.01 33.75 694.65 4 Y
4 X
V
0 X
N
42.4 692.57 42.4 694.27 44.75 694.72 46.36 694.67 46.36 693.89 5 Y
2 X
V
0 X
N
33.75 694.65 34.12 695.09 42.4 694.8 42.4 694.27 4 Y
3 X
V
0 X
N
42.4 694.27 44.75 694.72 42.4 694.8 3 Y
V
N
116.42 698.04 116.42 699.31 119.33 700.67 119.33 699.65 4 Y
4 X
V
0 X
N
119.33 700.67 119.01 700.74 116.41 699.59 116.42 699.31 4 Y
3 X
V
0 X
N
116.42 698.04 113.13 698.14 115.85 699.34 116.42 699.31 4 Y
2 X
V
0 X
N
116.42 699.31 115.85 699.34 116.41 699.59 3 Y
V
N
104.67 636.66 89.11 627.3 104.67 617.94 493.83 617.94 509.4 627.3 493.83 636.66 6 Y
0.5 H
2 Z
N
0 12 Q
(VMEBus) 278.65 622.71 T
0 14 Q
(ROC) 108 555.82 T
J
82.8 511.2 154.44 580.14 R
N
J
70.2 667.8 531.91 667.8 531.91 468.13 70.2 468.13 4 Y
J
70.2 664.05 70.2 667.8 73.95 667.8 3 L
N
[7.495 6.496] 7.495 I
73.95 667.8 528.15 667.8 2 L
N
J
528.15 667.8 531.91 667.8 531.91 664.05 3 L
N
[7.646 6.627] 7.646 I
531.91 664.05 531.91 471.88 2 L
N
J
531.91 471.88 531.91 468.13 528.16 468.13 3 L
N
[7.495 6.496] 7.495 I
528.16 468.13 73.96 468.13 2 L
N
J
73.96 468.13 70.2 468.13 70.2 471.88 3 L
N
[7.646 6.627] 7.646 I
70.2 471.88 70.2 664.05 2 L
N
J
120.6 617.94 113.4 610.74 113.4 589.14 120.6 581.94 127.8 589.14 127.8 610.74 6 Y
N
228.6 617.94 221.4 610.74 221.4 589.14 228.6 581.94 235.8 589.14 235.8 610.74 6 Y
N
72.86 563.5 84.09 559.29 72.34 556.91 72.6 560.2 4 Y
V
143.1 734.11 131.4 736.74 142.72 740.71 142.91 737.41 4 Y
V
142.92 737.41 M
 162.55 736.7 187.17 727.57 170.58 705.29 D
 147.26 673.96 95.4 687.22 56.09 669.41 D
 21.68 653.83 20.5 607.98 42.78 581.29 D
 50.29 572.29 60.59 563.22 72.6 560.19 D
0 Z
N
(DAQ) 199.8 557.62 T
J
190.8 547.2 262.8 583.2 R
2 Z
N
190.8 514.8 262.8 547.2 R
N
234 567 262.8 583.2 R
N
0 12 Q
(PPC) 239.4 569.62 T
(Pers. Module) 196.61 526.56 T
J
12.6 419.4 282.6 419.4 282.6 145.8 12.6 145.8 4 Y
J
12.6 415.65 12.6 419.4 16.35 419.4 3 L
N
[7.616 6.601] 7.616 I
16.35 419.4 278.85 419.4 2 L
N
J
278.85 419.4 282.6 419.4 282.6 415.65 3 L
N
[7.324 6.347] 7.324 I
282.6 415.65 282.6 149.55 2 L
N
J
282.6 149.55 282.6 145.8 278.85 145.8 3 L
N
[7.616 6.601] 7.616 I
278.85 145.8 16.35 145.8 2 L
N
J
16.35 145.8 12.6 145.8 12.6 149.55 3 L
N
[7.324 6.347] 7.324 I
12.6 149.55 12.6 415.65 2 L
N
J
153 681.58 193.73 722.31 203.91 712.13 163.18 671.4 4 Y
7 X
V
J
153 681.58 193.73 722.31 203.91 712.13 163.18 671.4 4 Y
J
155.65 678.93 153 681.58 155.65 684.23 3 L
[7.747 6.714] 7.747 I
155.65 684.23 191.08 719.66 2 L
J
191.08 719.66 193.73 722.31 196.38 719.66 3 L
[7.961 6.9] 7.961 I
196.38 719.66 201.26 714.78 2 L
J
201.26 714.78 203.91 712.13 201.26 709.48 3 L
[7.747 6.714] 7.747 I
201.26 709.48 165.83 674.05 2 L
J
165.83 674.05 163.18 671.4 160.53 674.05 3 L
[7.961 6.9] 7.961 I
160.53 674.05 155.65 678.93 2 L
0 X
(ethernet) 0 -315 158.66 675.93 TF
J
153 681.58 193.73 722.31 203.91 712.13 163.18 671.4 4 Y
J
155.65 678.93 153 681.58 155.65 684.23 3 L
[7.747 6.714] 7.747 I
155.65 684.23 191.08 719.66 2 L
J
191.08 719.66 193.73 722.31 196.38 719.66 3 L
[7.961 6.9] 7.961 I
196.38 719.66 201.26 714.78 2 L
J
201.26 714.78 203.91 712.13 201.26 709.48 3 L
[7.747 6.714] 7.747 I
201.26 709.48 165.83 674.05 2 L
J
165.83 674.05 163.18 671.4 160.53 674.05 3 L
[7.961 6.9] 7.961 I
160.53 674.05 155.65 678.93 2 L
J
J
37.51 294.14 34.2 282.6 30.89 294.14 34.2 294.14 4 Y
V
34.2 318.6 34.2 294.14 2 L
N
73.51 294.14 70.2 282.6 66.89 294.14 70.2 294.14 4 Y
V
70.2 318.6 70.2 294.14 2 L
N
102.89 307.07 106.2 318.6 109.51 307.07 106.2 307.07 4 Y
V
106.2 282.6 106.2 307.07 2 L
N
1 F
(ctrl) 0 -270 27.98 289.26 TF
(clk) 0 -270 63.98 290.59 TF
(Data) 0 -270 96.38 286.2 TF
114.35 352.46 109.8 336.6 105.25 352.46 109.8 352.46 4 Y
V
109.8 372.6 109.8 352.46 2 L
1.5 H
N
150.35 352.46 145.8 336.6 141.25 352.46 145.8 352.46 4 Y
V
145.8 372.6 145.8 352.46 2 L
N
177.25 356.74 181.8 372.6 186.35 356.74 181.8 356.74 4 Y
V
181.8 336.6 181.8 356.74 2 L
N
19.8 318.6 271.8 336.6 R
7 X
V
0.5 H
0 X
N
91.8 372.6 199.8 408.6 R
7 X
V
0 Z
0 X
N
185.11 294.14 181.8 282.6 178.49 294.14 181.8 294.14 4 Y
V
181.8 318.6 181.8 294.14 2 L
2 Z
N
221.11 294.14 217.8 282.6 214.49 294.14 217.8 294.14 4 Y
V
217.8 318.6 217.8 294.14 2 L
N
250.49 307.07 253.8 318.6 257.11 307.07 253.8 307.07 4 Y
V
253.8 282.6 253.8 307.07 2 L
N
(ctrl) 0 -270 175.58 289.26 TF
(clk) 0 -270 211.58 290.59 TF
(Data) 0 -270 243.98 286.2 TF
(ctrl) 0 -270 96.38 347.4 TF
(clk) 0 -270 135.98 347.4 TF
(Data) 0 -270 168.38 343.8 TF
0 14 Q
(DCC) 127.8 383.4 T
(PDB) 131.4 322.2 T
0 12 Q
(Fr) 57.04 155.76 T
(ont-end crate with up-to 16 DFB) 69.48 155.76 T
127.8 408.6 127.8 419.4 2 L
N
163.8 408.6 163.8 419.4 2 L
N
0 10 Q
(CLINK) 98.62 448.7 T
(DLINK) 203.02 448.7 T
0 12 Q
(DIRC DAQ VMEBus Crate with up-to 12 DAQ Boards) 156.6 652.32 T
130.3 424.05 128.38 412.21 123.73 423.27 127.02 423.66 4 Y
1 X
V
127.03 423.66 M
 125.37 471.68 183.35 461.03 200.19 493.43 D
 204.08 500.92 208.8 507.14 207.96 514.8 D
1 H
N
240.5 503.37 244.11 514.8 247.11 503.19 243.8 503.28 4 Y
V
162.36 410.4 M
 154.8 455.57 205.3 455.59 229.45 476.01 D
 236.59 482.05 242.06 492.7 243.81 503.27 D
N
97.69 73.8 204.36 116.47 R
5 X
V
0 X
N
120.07 96.07 141.41 101.4 R
7 X
V
0.5 H
0 X
N
120.07 90.73 141.41 96.07 R
7 X
V
0 X
N
120.07 85.4 141.41 90.73 R
7 X
V
0 X
N
120.07 80.66 141.41 85.99 R
7 X
V
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
114.74 80.66 120.07 101.99 R
4 X
V
0 X
N
(Dark Box) 129.02 105.69 T
0 10 Q
(PMT) 0 -270 107.59 80.36 TF
(s) 0 -270 107.59 101.66 TF
183.03 95.14 M
 177.69 95.14 177.69 89.8 183.03 89.8 D
11 X
V
1 H
0 X
N
183.03 84.47 188.36 100.47 R
N
(LED) 0 -270 197.6 82.77 TF
225.27 77.52 264.6 112.18 R
5 X
V
0 X
N
209.56 92.14 204.36 95.14 209.56 98.14 3 L
0 Z
N
225.27 95.14 204.86 95.14 2 L
2 Z
N
(Pulse) 231.04 92.71 T
1 F
(r) 253.82 92.71 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27 235.8 63 253.8 R
0.5 H
N
48.6 182.34 95.4 200.34 R
N
16.2 174.6 124.2 282.6 R
N
0 12 Q
(Read) 29.14 241.92 T
(Buff.) 81 242.16 T
(TDC) 30.6 216.82 T
(ADC) 84.6 216.82 T
(Analog) 55.8 188.02 T
J
77.4 235.8 113.4 253.8 R
N
27 210.6 63 228.6 R
N
77.4 210.6 113.4 228.6 R
N
0 14 Q
(DFB) 56.6 266.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(64 Channels) 45 257.78 T
(64 Channels) 193.28 255.97 T
277.38 101.09 265.85 104.4 277.38 107.71 277.38 104.4 4 Y
V
199.8 392.4 295.2 392.4 295.2 104.4 277.38 104.4 4 L
N
70.49 134.27 73.8 145.8 77.11 134.27 73.8 134.27 4 Y
V
73.8 134.27 73.8 84.6 95.4 84.6 3 L
N
214.49 134.27 217.8 145.8 221.11 134.27 217.8 134.27 4 Y
V
217.8 134.27 217.8 124.2 88.2 124.2 88.2 102.6 99 102.6 5 L
N
37.8 30.6 556.2 59.4 R
7 X
V
0 18 Q
0 X
(Fig. 3  DIRC Functional T) 186.33 47.4 T
(est) 386.68 47.4 T
0 12 Q
(SUN) 57.98 751.56 T
0 14 Q
(VxW) 39.6 737.34 T
(orks) 69.94 737.34 T
(EPICS) 46.8 722.94 T
(VxW) 94.42 534.22 T
(orks) 124.75 534.22 T
(EPICS) 101.62 519.82 T
334.8 370.8 442.8 406.8 R
N
(\322NIM\323) 365.56 393.82 T
(Logic) 369.75 379.82 T
388.8 619.2 381.6 612 381.6 590.4 388.8 583.2 396 590.4 396 612 6 Y
N
352.8 514.26 424.8 582.66 R
5 X
V
0 X
N
(FCDM) 367.2 546.66 T
385.49 503.27 388.8 514.8 392.11 503.27 388.8 503.27 4 Y
V
388.8 406.8 388.8 503.27 2 L
N
478.8 619.2 471.6 612 471.6 590.4 478.8 583.2 486 590.4 486 612 6 Y
N
442.8 514.26 514.8 582.66 R
N
(Pulse) 461.31 552.22 T
(Contr) 457.2 532.66 T
(ol) 492.72 532.66 T
454.33 389.09 442.8 392.4 454.33 395.71 454.33 392.4 4 Y
V
478.8 514.8 478.8 392.4 454.33 392.4 3 L
N
277.93 86.69 266.4 90 277.93 93.31 277.93 90 4 Y
V
478.8 392.4 478.8 90 277.93 90 3 L
N
323.26 395.71 334.8 392.4 323.26 389.09 323.26 392.4 4 Y
V
295.2 392.4 323.26 392.4 2 L
N
1 12 Q
(L1 T) 0 -270 378.99 412.5 TF
(rigger) 0 -270 378.99 435.74 TF
274.33 551.09 262.8 554.4 274.33 557.71 274.33 554.4 4 Y
V
274.33 554.4 352.8 554.4 2 L
N
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndDocument
 @endspecial 868 2737 a Fh(Figure)16 b(3:)963 2828 y(7)p
eop
%%Page: 8 8
8 7 bop -26 2635 a @beginspecial 0 @llx 0 @lly 610 @urx
792 @ury 4803 @rwi @setspecial
%%BeginDocument: testFigD.eps
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 { } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	
	
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
	 statusdict /manualfeed true put
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
(4.0) FMVERSION
1 1 0 0 612 792 0 1 6 FMDOCUMENT
0 0 /Times-Bold FMFONTDEFINE
1 0 /Times-Roman FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
7.2 14.4 604.8 774 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7.2 14.4 604.8 774 R
7 X
0 0 0 1 0 0 0 K
V
5 X
90 450 25.71 3.04 84.48 706.03 G
0.2 H
0 Z
0 X
90 450 25.71 3.04 84.48 706.03 A
64.63 709.17 39.17 704.26 106.4 702.7 124.69 708.26 4 Y
4 X
V
0 X
N
5 X
180 356 23.8 3.11 85.11 707.12 G
0 X
180 356 23.8 3.11 85.11 707.12 A
5 X
90 450 22.64 2.94 84.48 708.14 G
0.25 H
0 X
90 450 22.64 2.94 84.48 708.14 A
5 X
180 270 3.2 1.2 94.1 706.7 G
0.2 H
0 X
180 270 3.2 1.2 94.1 706.7 A
131.04 747.19 120.32 750.3 120.32 713.9 131.04 717.81 4 Y
6 X
V
0.25 H
0 X
N
35.01 759.75 107.93 763.14 107.93 706.42 35.01 707.24 4 Y
6 X
V
0 X
N
71.44 756.6 M
 99.87 757.87 99.85 758.24 100.83 757.1 D
 101.83 755.96 101.83 755.96 101.83 734.91 D
 101.83 713.86 101.83 713.86 100.72 713.28 D
 99.62 712.7 99.62 712.7 70.78 712.7 D
 41.95 712.7 41.95 712.7 41.53 713.84 D
 41.11 714.98 41.11 714.98 41.11 734.29 D
 41.11 753.6 41.11 753.6 42.07 754.28 D
 43.04 754.95 44.24 755.37 71.44 756.6 D
O
3 X
V
0 X
N
46.06 752.98 M
 47.81 754.43 47.81 754.43 72.64 755.64 D
 97.51 756.84 97.51 756.84 99.26 755.72 D
 101.01 754.61 101.01 754.61 101.01 735.65 D
 101.01 716.76 101.01 716.76 99.49 715.3 D
 98.02 713.91 98.02 713.91 72.23 713.91 D
 46.44 713.91 46.44 713.91 45.38 715.06 D
 44.28 716.31 44.28 716.31 44.28 733.93 D
 44.28 751.58 44.28 751.58 46.06 752.98 D
O
7 X
V
0 X
N
120.31 757.65 114.9 761.22 107.9 763.2 107.9 706.47 114.9 706.98 120.31 709.34 6 Y
5 X
V
0 X
N
115.07 760.97 115.07 707.13 2 L
5 X
V
0.2 H
0 X
N
106.4 702.7 106.4 697.42 124.69 703.76 124.69 708.26 4 Y
6 X
V
0 X
N
106.4 702.7 39.17 704.26 39.17 699.03 106.4 697.42 4 Y
6 X
V
0 X
N
106.4 696.48 39.17 698.03 39.17 689.7 106.4 687.4 4 Y
6 X
V
0 X
N
106.4 696.48 106.4 687.4 124.69 695.46 124.69 702.84 4 Y
6 X
V
0 X
N
39.64 699.02 46.27 698.86 46.27 697.87 40.62 698 39.64 698.01 5 Y
5 X
V
0.01 H
0 X
N
106.37 697.42 124.69 703.76 124.69 702.84 106.37 696.48 4 Y
4 X
V
0 X
N
99.74 697.58 100.89 697.58 106.37 697.42 106.37 696.48 99.71 696.63 5 Y
5 X
V
0 X
N
46.27 698.86 48.6 698.81 77.32 698.12 91.92 697.77 99.12 697.59 99.74 697.58 99.74 696.63
 98.83 696.65 76.68 697.17 50.51 697.77 46.27 697.87 11 Y
3 X
V
0 X
N
90 450 0.58 0.7 101.32 691.84 G
90 450 0.58 0.7 101.32 691.84 A
109.31 697.5 109.31 688.68 116.43 691.82 116.43 699.97 4 Y
5 X
V
0 X
N
109.97 695.12 116.04 697.42 116.04 696.38 114.02 695.52 114.02 694.76 112.51 694.08 112.51 694.94
 109.97 693.96 8 Y
V
N
112.51 694.08 112.51 693.46 114.02 694.13 114.02 694.76 4 Y
7 X
V
0 X
N
106.4 686.88 106.4 684.86 97.75 685.21 97.75 687.17 4 Y
4 X
V
0 X
N
106.4 684.86 106.4 686.88 109.31 688.16 109.31 686.59 4 Y
2 X
V
0 X
N
98.04 687.68 106.4 687.4 106.4 686.88 97.75 687.17 4 Y
3 X
V
0 X
N
106.4 686.88 109.31 688.16 108.95 688.52 106.4 687.4 4 Y
V
N
47.8 688.87 47.8 687.17 39.15 687.6 39.15 689.25 4 Y
4 X
V
0 X
N
47.8 687.17 47.8 688.87 50.15 689.33 51.76 689.27 51.76 688.49 5 Y
2 X
V
0 X
N
39.15 689.25 39.51 689.69 47.8 689.41 47.8 688.87 4 Y
3 X
V
0 X
N
47.8 688.87 50.15 689.33 47.8 689.41 3 Y
V
N
121.82 692.64 121.82 693.91 124.73 695.28 124.73 694.25 4 Y
4 X
V
0 X
N
124.73 695.28 124.41 695.34 121.81 694.19 121.82 693.91 4 Y
3 X
V
0 X
N
121.82 692.64 118.53 692.74 121.25 693.94 121.82 693.91 4 Y
2 X
V
0 X
N
121.82 693.91 121.25 693.94 121.81 694.19 3 Y
V
N
0 12 Q
(Level 3) 54 737.16 T
109.17 630.72 93.6 621.36 109.17 612 498.32 612 513.89 621.36 498.32 630.72 6 Y
0.5 H
2 Z
N
(VMEBus) 284.05 617.31 T
0 14 Q
(ROC) 115.2 542.6 T
J
90.36 507.6 162 576.54 R
N
J
75.6 662.4 537.31 662.4 537.31 462.73 75.6 462.73 4 Y
J
75.6 658.65 75.6 662.4 79.35 662.4 3 L
N
[7.495 6.496] 7.495 I
79.35 662.4 533.55 662.4 2 L
N
J
533.55 662.4 537.31 662.4 537.31 658.65 3 L
N
[7.646 6.627] 7.646 I
537.31 658.65 537.31 466.48 2 L
N
J
537.31 466.48 537.31 462.73 533.56 462.73 3 L
N
[7.495 6.496] 7.495 I
533.56 462.73 79.36 462.73 2 L
N
J
79.36 462.73 75.6 462.73 75.6 466.48 3 L
N
[7.646 6.627] 7.646 I
75.6 466.48 75.6 658.65 2 L
N
J
126 612.54 118.8 605.34 118.8 583.74 126 576.54 133.2 583.74 133.2 605.34 6 Y
N
(DAQ) 313.2 552.22 T
J
306.36 540 378 576 R
N
234 612.54 226.8 605.34 226.8 583.74 234 576.54 241.2 583.74 241.2 605.34 6 Y
N
306 507.6 378 540 R
N
342 612 334.8 604.8 334.8 583.2 342 576 349.2 583.2 349.2 604.8 6 Y
N
486 612.54 478.8 605.34 478.8 583.74 486 576.54 493.2 583.74 493.2 605.34 6 Y
N
450 507.6 522 576 R
N
349.2 558 378 576 R
N
0 12 Q
(PPC) 352.8 564.22 T
78.26 558.1 89.49 553.89 77.74 551.51 78 554.8 4 Y
V
148.5 728.71 136.8 731.34 148.12 735.31 148.31 732.01 4 Y
V
148.32 732.01 M
 167.95 731.3 192.57 722.17 175.98 699.89 D
 152.66 668.56 100.8 681.82 61.49 664.01 D
 27.08 648.42 25.9 602.58 48.19 575.89 D
 55.69 566.89 65.99 557.82 78 554.79 D
0 Z
N
(Pers. Module) 309.6 520.92 T
0 14 Q
(DAQ) 205.2 552.22 T
J
198 540 270 576 R
2 Z
N
198 507.6 270 540 R
N
241.2 558 270 576 R
N
0 12 Q
(PPC) 244.8 564.22 T
(Pers. Module) 202.01 521.16 T
J
18 414 288 414 288 140.4 18 140.4 4 Y
J
18 410.25 18 414 21.75 414 3 L
N
[7.616 6.601] 7.616 I
21.75 414 284.25 414 2 L
N
J
284.25 414 288 414 288 410.25 3 L
N
[7.324 6.347] 7.324 I
288 410.25 288 144.16 2 L
N
J
288 144.16 288 140.4 284.25 140.4 3 L
N
[7.616 6.601] 7.616 I
284.25 140.4 21.75 140.4 2 L
N
J
21.75 140.4 18 140.4 18 144.15 3 L
N
[7.324 6.347] 7.324 I
18 144.15 18 410.25 2 L
N
J
158.4 676.18 199.13 716.91 209.31 706.73 168.58 666 4 Y
7 X
V
J
158.4 676.18 199.13 716.91 209.31 706.73 168.58 666 4 Y
J
161.05 673.53 158.4 676.18 161.05 678.83 3 L
[7.747 6.714] 7.747 I
161.05 678.83 196.48 714.26 2 L
J
196.48 714.26 199.13 716.91 201.78 714.26 3 L
[7.961 6.9] 7.961 I
201.78 714.26 206.66 709.38 2 L
J
206.66 709.38 209.31 706.73 206.66 704.08 3 L
[7.747 6.714] 7.747 I
206.66 704.08 171.23 668.65 2 L
J
171.23 668.65 168.58 666 165.93 668.65 3 L
[7.961 6.9] 7.961 I
165.93 668.65 161.05 673.53 2 L
0 X
(ethernet) 0 -315 164.06 670.53 TF
J
158.4 676.18 199.13 716.91 209.31 706.73 168.58 666 4 Y
J
161.05 673.53 158.4 676.18 161.05 678.83 3 L
[7.747 6.714] 7.747 I
161.05 678.83 196.48 714.26 2 L
J
196.48 714.26 199.13 716.91 201.78 714.26 3 L
[7.961 6.9] 7.961 I
201.78 714.26 206.66 709.38 2 L
J
206.66 709.38 209.31 706.73 206.66 704.08 3 L
[7.747 6.714] 7.747 I
206.66 704.08 171.23 668.65 2 L
J
171.23 668.65 168.58 666 165.93 668.65 3 L
[7.961 6.9] 7.961 I
165.93 668.65 161.05 673.53 2 L
J
J
180 230.4 216 248.4 R
N
201.6 176.94 248.4 194.94 R
N
169.2 169.2 277.2 277.2 R
N
(Read) 182.13 236.52 T
(Buff.) 234 236.76 T
(TDC) 183.6 211.42 T
(ADC) 237.6 211.42 T
(Analog) 208.8 182.62 T
J
230.4 230.4 266.4 248.4 R
N
180 205.2 216 223.2 R
N
230.4 205.2 266.4 223.2 R
N
0 14 Q
(DFB) 209.6 260.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
42.91 288.74 39.6 277.2 36.29 288.74 39.6 288.74 4 Y
V
39.6 313.2 39.6 288.74 2 L
N
78.91 288.74 75.6 277.2 72.29 288.74 75.6 288.74 4 Y
V
75.6 313.2 75.6 288.74 2 L
N
108.29 301.67 111.6 313.2 114.91 301.67 111.6 301.67 4 Y
V
111.6 277.2 111.6 301.67 2 L
N
1 12 Q
(ctrl) 0 -270 33.38 283.86 TF
(clk) 0 -270 69.38 285.19 TF
(Data) 0 -270 101.78 280.8 TF
119.75 347.06 115.2 331.2 110.65 347.06 115.2 347.06 4 Y
V
115.2 367.2 115.2 347.06 2 L
1.5 H
N
155.75 347.06 151.2 331.2 146.65 347.06 151.2 347.06 4 Y
V
151.2 367.2 151.2 347.06 2 L
N
182.65 351.34 187.2 367.2 191.75 351.34 187.2 351.34 4 Y
V
187.2 331.2 187.2 351.34 2 L
N
25.2 313.2 277.2 331.2 R
7 X
V
0.5 H
0 X
N
97.2 367.2 205.2 403.2 R
7 X
V
0 Z
0 X
N
190.51 288.74 187.2 277.2 183.89 288.74 187.2 288.74 4 Y
V
187.2 313.2 187.2 288.74 2 L
2 Z
N
226.51 288.74 223.2 277.2 219.89 288.74 223.2 288.74 4 Y
V
223.2 313.2 223.2 288.74 2 L
N
255.89 301.67 259.2 313.2 262.51 301.67 259.2 301.67 4 Y
V
259.2 277.2 259.2 301.67 2 L
N
(ctrl) 0 -270 180.98 283.86 TF
(clk) 0 -270 216.98 285.19 TF
(Data) 0 -270 249.38 280.8 TF
(ctrl) 0 -270 101.78 342 TF
(clk) 0 -270 141.38 342 TF
(Data) 0 -270 173.78 338.4 TF
0 14 Q
(DCC) 133.2 378 T
(PDB) 136.8 316.8 T
0 12 Q
(Fr) 62.44 150.36 T
(ont-end crate with up-to 16 DFB) 74.88 150.36 T
133.2 403.2 133.2 414 2 L
N
169.2 403.2 169.2 414 2 L
N
0 10 Q
(CLINK) 104.02 443.3 T
(DLINK) 208.42 443.3 T
J
324 414 594 414 594 140.4 324 140.4 4 Y
J
324 410.25 324 414 327.75 414 3 L
N
[7.616 6.601] 7.616 I
327.75 414 590.24 414 2 L
N
J
590.24 414 594 414 594 410.25 3 L
N
[7.324 6.347] 7.324 I
594 410.25 594 144.16 2 L
N
J
594 144.16 594 140.4 590.25 140.4 3 L
N
[7.616 6.601] 7.616 I
590.25 140.4 327.75 140.4 2 L
N
J
327.75 140.4 324 140.4 324 144.15 3 L
N
[7.324 6.347] 7.324 I
324 144.15 324 410.25 2 L
N
J
486 230.4 522 248.4 R
N
507.6 176.94 554.4 194.94 R
N
475.2 169.2 583.2 277.2 R
N
0 12 Q
(Read) 488.14 236.52 T
(Buff.) 540 236.76 T
(TDC) 489.6 211.42 T
(ADC) 543.6 211.42 T
(Analog) 514.8 182.62 T
J
536.4 230.4 572.4 248.4 R
N
486 205.2 522 223.2 R
N
536.4 205.2 572.4 223.2 R
N
0 14 Q
(DFB) 515.6 260.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
338.4 230.4 374.4 248.4 R
N
360 176.94 406.8 194.94 R
N
327.6 169.2 435.6 277.2 R
N
0 12 Q
(Read) 340.54 236.52 T
(Buff.) 392.4 236.76 T
(TDC) 342 211.42 T
(ADC) 396 211.42 T
(Analog) 367.2 182.62 T
J
388.8 230.4 424.8 248.4 R
N
338.4 205.2 374.4 223.2 R
N
388.8 205.2 424.8 223.2 R
N
0 14 Q
(DFB) 368 260.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
348.91 288.74 345.6 277.2 342.29 288.74 345.6 288.74 4 Y
V
345.6 313.2 345.6 288.74 2 L
N
384.91 288.74 381.6 277.2 378.29 288.74 381.6 288.74 4 Y
V
381.6 313.2 381.6 288.74 2 L
N
414.29 301.67 417.6 313.2 420.91 301.67 417.6 301.67 4 Y
V
417.6 277.2 417.6 301.67 2 L
N
1 12 Q
(ctrl) 0 -270 339.38 283.86 TF
(clk) 0 -270 375.38 285.19 TF
(Data) 0 -270 407.78 280.8 TF
425.75 347.06 421.2 331.2 416.65 347.06 421.2 347.06 4 Y
V
421.2 367.2 421.2 347.06 2 L
1.5 H
N
461.75 347.06 457.2 331.2 452.65 347.06 457.2 347.06 4 Y
V
457.2 367.2 457.2 347.06 2 L
N
488.65 351.34 493.2 367.2 497.75 351.34 493.2 351.34 4 Y
V
493.2 331.2 493.2 351.34 2 L
N
331.2 313.2 583.2 331.2 R
7 X
V
0.5 H
0 X
N
403.2 367.2 511.2 403.2 R
7 X
V
0 Z
0 X
N
496.51 288.74 493.2 277.2 489.89 288.74 493.2 288.74 4 Y
V
493.2 313.2 493.2 288.74 2 L
2 Z
N
532.51 288.74 529.2 277.2 525.89 288.74 529.2 288.74 4 Y
V
529.2 313.2 529.2 288.74 2 L
N
561.89 301.67 565.2 313.2 568.51 301.67 565.2 301.67 4 Y
V
565.2 277.2 565.2 301.67 2 L
N
(ctrl) 0 -270 486.98 283.86 TF
(clk) 0 -270 522.98 285.19 TF
(Data) 0 -270 555.38 280.8 TF
(ctrl) 0 -270 407.78 342 TF
(clk) 0 -270 447.38 342 TF
(Data) 0 -270 479.78 338.4 TF
0 14 Q
(DCC) 439.2 378 T
(PDB) 442.8 316.8 T
0 12 Q
(Fr) 361.23 150.12 T
(ont-end crate with up-to 16 DFB) 373.68 150.12 T
439.2 403.2 439.2 414 2 L
N
475.2 403.2 475.2 414 2 L
N
(DIRC DAQ VMEBus Crate with up-to 12 DAQ Boards) 162 646.92 T
0 10 Q
(CLINK) 367.2 443.3 T
(DLINK) 457.2 443.3 T
0 14 Q
(FCDM) 464.4 540 T
534.26 535.45 518.4 540 534.26 544.55 534.26 540 4 Y
V
522 723.6 568.8 723.6 568.8 540 534.26 540 4 L
1.5 H
N
136.48 415.05 134.58 403.21 129.91 414.26 133.2 414.66 4 Y
1 X
V
133.21 414.65 M
 131.45 463.04 190.76 452.3 207.99 484.9 D
 211.97 492.43 216.79 498.69 215.93 506.4 D
1 H
N
248.1 496.17 251.71 507.6 254.7 495.99 251.4 496.08 4 Y
V
169.96 403.2 M
 162.4 448.36 212.9 448.39 237.04 468.81 D
 244.19 474.85 249.66 485.5 251.41 496.07 D
N
357.22 496.21 360.71 507.69 363.83 496.11 360.52 496.16 4 Y
2 X
V
475.2 406.8 M
 467.3 451.88 419.69 460.3 385 477.78 D
 376.93 481.85 364.06 486.54 360.55 496.14 D
N
444.05 414.18 439.19 403.21 437.5 415.09 440.78 414.63 4 Y
1 X
V
324 507.6 M
 343.25 469.99 388.66 459.62 425 445.37 D
 436.73 440.77 441.11 427.21 440.81 414.62 D
N
104.4 68.93 211.07 111.6 R
0 X
N
126.78 91.2 148.11 96.53 R
7 X
V
0.5 H
0 X
N
126.78 85.87 148.11 91.2 R
7 X
V
0 X
N
126.78 80.53 148.11 85.87 R
7 X
V
0 X
N
126.78 75.79 148.11 81.13 R
7 X
V
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
121.45 75.79 126.78 97.13 R
4 X
V
0 X
N
0 12 Q
(Dark Box) 135.73 100.83 T
0 10 Q
(PMT) 0 -270 114.3 75.49 TF
(s) 0 -270 114.3 96.79 TF
189.73 90.27 M
 184.4 90.27 184.4 84.93 189.73 84.93 D
11 X
V
1 H
0 X
N
189.73 79.6 195.07 95.6 R
N
(LED) 0 -270 204.3 77.91 TF
231.97 72.65 271.3 107.32 R
N
216.26 87.27 211.07 90.27 216.26 93.27 3 L
0 Z
N
231.97 90.27 211.57 90.27 2 L
2 Z
N
(Pulse) 237.75 87.84 T
1 F
(r) 260.53 87.84 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
(Farm) 54 725.16 T
32.4 230.4 68.4 248.4 R
0.5 H
N
54 176.94 100.8 194.94 R
N
21.6 169.2 129.6 277.2 R
N
(Read) 34.54 236.52 T
(Buff.) 86.4 236.76 T
(TDC) 36 211.42 T
(ADC) 90 211.42 T
(Analog) 61.2 182.62 T
J
82.8 230.4 118.8 248.4 R
N
32.4 205.2 68.4 223.2 R
N
82.8 205.2 118.8 223.2 R
N
0 14 Q
(DFB) 62 260.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(64 Channels) 50.4 252.38 T
(64 Channels) 198.68 250.57 T
(64 Channels) 357.08 252.38 T
(64 Channels) 504.68 252.38 T
43.2 25.2 561.6 54 R
7 X
V
0 18 Q
0 X
(Fig. 4  DIRC Electr) 157.42 42 T
(onics Ar) 306.57 42 T
(chitectur) 370.74 42 T
(e) 439.39 42 T
223.2 705.6 331.2 741.6 R
N
414 705.6 522 741.6 R
N
0 14 Q
(T) 253.96 728.62 T
(rigger) 262.26 728.62 T
(System) 253.96 714.62 T
(FCS) 455.95 721.42 T
347.06 719.05 331.2 723.6 347.06 728.15 347.06 723.6 4 Y
V
398.14 728.15 414 723.6 398.14 719.05 398.14 723.6 4 Y
V
347.06 723.6 398.14 723.6 2 L
1.5 H
0 Z
N
525.89 128.87 529.2 140.4 532.51 128.87 529.2 128.87 4 Y
V
529.2 122.4 529.2 128.87 2 L
0.5 H
2 Z
N
381.89 128.87 385.2 140.4 388.51 128.87 385.2 128.87 4 Y
V
385.2 122.4 385.2 128.87 2 L
N
219.89 128.87 223.2 140.4 226.51 128.87 223.2 128.87 4 Y
V
223.2 122.4 223.2 128.87 2 L
N
281.53 86.69 270 90 281.53 93.31 281.53 90 4 Y
V
205.2 385.2 306 385.2 306 90 281.53 90 4 L
N
103.95 90 43.2 90 43.2 122.4 529.2 122.4 4 L
3 H
N
75.89 128.87 79.2 140.4 82.51 128.87 79.2 128.87 4 Y
V
79.2 122.4 79.2 128.87 2 L
0.5 H
N
389.53 547.49 378 550.8 389.53 554.11 389.53 550.8 4 Y
V
389.53 550.8 450 550.8 2 L
N
281.53 543.89 270 547.2 281.53 550.51 281.53 547.2 4 Y
V
281.53 547.2 288 547.2 288 486 424.8 486 424.8 532.8 450 532.8 6 L
N
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndDocument
 @endspecial 868 2737 a Fh(Figure)16 b(4:)963 2828 y(8)p
eop
%%Page: 9 9
9 8 bop 79 53 a Ff(exp)q(erts)17 b(from)e(di\013eren)o(t)h(groups)g(at)
f(this)i(stage)e(to)g(generate)h(triggers)f(and)i(organize)f(the)g
(data)f(\015o)o(w,)h(this)79 110 y(arc)o(hitecture)g(will)h(b)q(e)e
(implemen)o(ted)i(with)f(the)f(\014nal)h(pro)q(duction)g(soft)o(w)o
(are)e(and)h(hardw)o(are.)-28 248 y Fb(4.2)66 b(Online)24
b(Soft)n(w)n(are)e(Dev)n(elopmen)n(t)-28 334 y Ff(The)d(DIR)o(C)g
(online)i(m)o(ust)d(in)o(tegrate)g(con)o(trol)h(and)g(readout)g(of)f
(the)h(detector.)31 b(Additionally)l(,)22 b(functions)e(suc)o(h)-28
390 y(as)15 b(comm)o(unication)h(with)g(the)g(main)g(Babar)f(run)h(con)
o(trol)f(tasks,)g(calibration,)h(monitoring,)g(and)g(ev)o(en)o(t)f
(displa)o(y)-28 447 y(m)o(ust)d(all)i(b)q(e)f(supp)q(orted.)20
b(A)12 b(sc)o(hematic)i(of)e(ho)o(w)g(the)h(online)h(will)h(b)q(e)e
(setup)g(is)g(giv)o(en)g(in)h(\014gure)f(5.)19 b(In)13
b(this)g(sc)o(heme,)-28 503 y(there)19 b(are)f(t)o(w)o(o)f(main)i
(paths)f(for)g(data)g(\015o)o(w,)g Fa(dete)n(ctor)i(c)n(ontr)n(ol)d
Ff(and)i Fa(run)h(c)n(ontr)n(ol)d Ff(\(including)k(calibration)f(and)
-28 560 y(monitoring\).)29 b(The)19 b(goal)f(of)f(the)i(LBL)g(test)f
(stand)g(will)i(b)q(e)f(to)e(dev)o(elop)j(the)e(run)h(con)o(trol)f
(path,)g(as)g(describ)q(ed)-28 616 y(b)q(elo)o(w.)24
b(Detector)16 b(con)o(trol)g(for)g(the)h(DIR)o(C)g(is)g(b)q(eing)g(dev)
o(elop)q(ed)i(elsewhere,)e(and)g(will)h(b)q(e)f(in)o(tegrated)g(with)g
(run)-28 673 y(con)o(trol)e(only)h(at)e(the)h(highest,)h(user-in)o
(terface)g(lev)o(el.)40 729 y(Man)o(y)c(asp)q(ects)i(of)e(the)h(Babar)g
(online)i(soft)o(w)o(are)c(en)o(vironmen)o(t)i(ha)o(v)o(e)g(not)f(y)o
(et)h(b)q(een)h(de\014ned.)21 b(The)13 b(online)i(test)-28
786 y(b)q(enc)o(h)g(will)h(therefore)e(need)h(to)f(ev)o(olv)o(e)g(with)
h(the)f(common)g(Babar)g(online)i(elemen)o(ts.)k(Our)15
b(approac)o(h)f(will)i(b)q(e)f(to)-28 842 y(c)o(ho)q(ose)i(a)f(lik)o
(ely)j(candidate)e(for)g(crucial)h(elemen)o(ts)f(\(suc)o(h)g(as)f(a)h
(graphics)g(pac)o(k)m(ages)g(for)f(GUI,)h(histogramming,)-28
899 y(and)e(ev)o(en)o(t)g(displa)o(y\),)h(and)f(w)o(ork)f(with)i(them)f
(un)o(til)i(a)d(Babar-wide)i(decision)h(is)f(made.)40
955 y(W)l(e)f(p)q(erceiv)o(e)h(the)f(online)h(soft)o(w)o(are)d(dev)o
(elopmen)o(t)j(pro)q(ceeding)g(b)o(y)f(stages.)j(The)d(stages)f(are)h
(listed)h(in)f(rough)-28 1011 y(c)o(hronological)h(order)f(b)q(elo)o
(w.)20 1101 y(1.)23 b(Diagnostic)16 b(Access:)79 1158
y(The)d(\014rst)f(need)i(in)f(the)g(test)f(b)q(enc)o(h)h(will)i(b)q(e)e
(to)f(access)g(individual)k(elemen)o(ts)d(of)g(the)f(hardw)o(are)g(one)
h(c)o(hannel)79 1214 y(at)j(a)f(time)i('b)o(y)e(hand'.)23
b(This)17 b(will)g(most)e(e\013ectiv)o(ely)i(b)q(e)g(done)g(inside)g
(the)g(VxW)l(orks)e(en)o(vironmen)o(t,)h(using)79 1270
y(the)21 b(remote)f(shell)i(feature.)35 b(Once)22 b(the)f(basic)g
(electronics)h(problems)f(ha)o(v)o(e)f(b)q(een)i(solv)o(ed,)f(w)o(e)g
(will)h(put)79 1327 y(together)d(the)g(simple)i(tests)e(whic)o(h)h(pro)
o(v)o(ed)f(useful)i(in)o(to)e(a)g('men)o(u')g(of)g(standard)g
(diagnostics,)h(accessed)79 1383 y(through)c(a)f(graphical)h(user)g(in)
o(terface)g(\(GUI\))f(making)h(use)g(of)f(the)h(EPICS)g(connections)g
(a)o(v)m(ailable)h(in)g(the)79 1440 y(etWish)e(shell.)22
b(This)15 b(diagnostic)h(men)o(u)f(will)h(b)q(e)g(p)q(erp)q(etuated)g
(and)f(added)g(to)f(throughout)g(the)h(life)i(of)d(the)79
1496 y(online,)j(so)e(as)f(to)h(pro)o(vide)h(exp)q(erts)f(with)h
(access)f(to)g(basic)g(tests)g(in)h(case)f(of)g(hardw)o(are)f
(problems.)20 1574 y(2.)23 b(Electronics)17 b(Calibration:)79
1630 y(Once)f(w)o(e)e(understand)h(ho)o(w)f(to)g(mak)o(e)g(the)h(hardw)
o(are)f(function,)h(w)o(e)f(will)i(pro)q(ceed)g(to)e(dev)o(elop)h
(algorithms)79 1686 y(for)e(standard)g(electronics)i(calibrations.)21
b(These)13 b(will)j(in)o(v)o(olv)o(e)e(lo)q(ops)g(o)o(v)o(er)e(c)o
(hannels,)j(and)f(lo)q(ops)g(o)o(v)o(er)e(m)o(ul-)79
1743 y(tiple)h(calibration)f(triggers.)18 b(Soft)o(w)o(are)10
b(to)g(pro)o(vide)i(higher-lev)o(el)h(user)f(con)o(trol)f(of)f(these)i
(will)g(b)q(e)g(in)o(tro)q(duced.)79 1799 y(Algorithms)19
b(for)f(extracting)h(calibration)g(information)g(\(T0,)f(thresholds,)i
(etc.\))30 b(will)20 b(b)q(e)f(dev)o(elop)q(ed.)32 b(A)79
1856 y(c)o(hoice)19 b(will)g(b)q(e)g(made)f(for)f(a)g(protot)o(yp)q(e)g
(histogram)g(presen)o(ter,)h(and)g(that)f(will)j(b)q(e)e(included)i(to)
d(pro)o(vide)79 1912 y(graphical)h(ev)m(aluation)g(of)e(the)h
(calibration)h(data.)25 b(Once)17 b(on-b)q(oard)g(electronics)i
(calibration)f(is)f(function-)79 1969 y(ing)g(in)g(this)g(w)o(a)o(y)l
(,)e(w)o(e)h(will)i(dev)o(elop)f(an)f(analogous)g(system)g(using)h
(external)g(pulsing)g(through)f(a)g(function)79 2025
y(generator.)20 2102 y(3.)23 b(Detector)15 b(Signal)h(F)l(aking:)79
2159 y(T)l(o)e(design)g(more)g(realistic)h(signals)f(for)f(readout)h
(mo)q(deling)h(and)f(more)f(complete)i(calibration)g(pro)q(cedures,)79
2215 y(w)o(e)i(will)h(in)o(tro)q(duce)g(a)e(fak)o(e)g(detector.)24
b(The)17 b(fak)o(e)f(detector)g(will)j(consist)e(of)f(a)g(few)h
(phototub)q(es)f(in)i(a)e(dark)79 2272 y(b)q(o)o(x,)d(illuminated)j(b)o
(y)d(an)g(LED,)f(as)h(describ)q(ed)i(ab)q(o)o(v)o(e.)k(In)13
b(pro)o(viding)h(the)f(D)o(A)o(Q)g(with)g(realistic)h(signals,)g(w)o(e)
79 2328 y(will)i(b)q(e)e(able)h(to)e(re\014ne)h(the)g(calibration)h
(pro)q(cedures,)g(and)f(in)o(tro)q(duce)g(new)g(algorithms)g(suc)o(h)g
(as)g(e\016ciency)79 2385 y(measuremen)o(ts)e(and)g(threshold)h
(setting)f(on)g(noisy)g(tub)q(es.)20 b(By)12 b(in)o(terpreting)h(the)f
(calibration)h(pulse)h(as)d(a)h(L1)79 2441 y(trigger,)i(w)o(e)g(will)i
(also)f(b)q(e)g(able)g(to)f(start)g(dev)o(eloping)i(readout)e
(algorithms.)19 b(Additional)e(user)d(con)o(trols)h(for)79
2498 y(the)d(extra)e(calibration)j(and)e(readout)g(soft)o(w)o(are)f
(will)j(b)q(e)f(dev)o(elop)q(ed.)20 b(Protot)o(yp)q(es)10
b(of)h(the)h(online)h(monitoring)79 2554 y(and)j(ev)o(en)o(t)f(displa)o
(ys)h(will)h(b)q(e)f(dev)o(elop)q(ed,)g(op)q(erating)f(the)h(test)e
(stand)h(in)h(fak)o(e)f(L1)g(trigger)g(mo)q(de.)20 2631
y(4.)23 b(Micropro)q(cessor)15 b(Utilization:)79 2688
y(Man)o(y)d(D)o(A)o(Q)g(tasks)g(will)i(need)f(to)f(b)q(e)h(run)g(in)h
(the)e(fron)o(t-end)h(CPUs)f(for)g(reasons)g(of)g(e\016ciency)l(.)21
b(Calibration,)963 2828 y Fh(9)p eop
%%Page: 10 10
10 9 bop -38 53 a
 31997897 41022955 -38613893 2039234 -2039234 48546938 startTexFig

 90 rotate
 -38 53 a
%%BeginDocument: DIRC_online.eps
%ADO_ImageableArea: 31 31 761 583
userdict begin/dscInfo 5 dict dup begin
/Title(DIRC online \(DR\))def
/Creator(ClarisWorks 3.0: LaserWriter 8 8.2)def
/CreationDate(9:20 AM Thursday, November 9, 1995)def
/For()def
/Pages 1 def
end def end
/md 173 dict def md begin/currentpacking where {pop /sc_oldpacking currentpacking def true setpacking}if
/bd{bind def}bind def
/xdf{exch def}bd
/xs{exch store}bd
/ld{load def}bd
/Z{0 def}bd
/T/true
/F/false
/:L/lineto
/lw/setlinewidth
/:M/moveto
/rl/rlineto
/rm/rmoveto
/:C/curveto
/:T/translate
/:K/closepath
/:mf/makefont
/gS/gsave
/gR/grestore
/np/newpath
14{ld}repeat
/$m matrix def
/av 81 def
/por true def
/normland false def
/psb-nosave{}bd
/pse-nosave{}bd
/us Z
/psb{/us save store}bd
/pse{us restore}bd
/level2
/languagelevel where
{
pop languagelevel 2 ge
}{
false
}ifelse
def
/featurecleanup
{
stopped
cleartomark
countdictstack exch sub dup 0 gt
{
{end}repeat
}{
pop
}ifelse
}bd
/noload Z
/startnoload
{
{/noload save store}if
}bd
/endnoload
{
{noload restore}if
}bd
level2 startnoload
/setjob
{
statusdict/jobname 3 -1 roll put
}bd
/setcopies
{
userdict/#copies 3 -1 roll put
}bd
level2 endnoload level2 not startnoload
/setjob
{
1 dict begin/JobName xdf currentdict end setuserparams
}bd
/setcopies
{
1 dict begin/NumCopies xdf currentdict end setpagedevice
}bd
level2 not endnoload
/pm Z
/mT Z
/sD Z
/realshowpage Z
/initializepage
{
/pm save store mT concat
}bd
/endp
{
pm restore showpage
}def
/$c/DeviceRGB def
/rectclip where
{
pop/rC/rectclip ld
}{
/rC
{
np 4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
clip np
}bd
}ifelse
/rectfill where
{
pop/rF/rectfill ld
}{
/rF
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
fill
gR
}bd
}ifelse
/rectstroke where
{
pop/rS/rectstroke ld
}{
/rS
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
stroke
gR
}bd
}ifelse
/G/setgray ld
/:F/setrgbcolor ld
level2 startnoload
/patfreq Z
/patangle Z
/bk Z
/fg Z
/docolorscreen Z
/graystring Z
/pattransf{}def
/initQDpatterns
{
/patfreq 9.375 store
/patangle
1 0 $m defaultmatrix dtransform
exch atan
por not
{90 add}if
normland{180 add}if
store
:a
}def
/docolorscreen
/setcolorscreen where
{
pop/currentcolorscreen where
{
pop/setcmykcolor where
{
pop true
}{
false
}ifelse
}{
false
}ifelse
}{
false
}ifelse
def
/setgraypattern
{
/graystring xs
patfreq
patangle
{
1 add
4 mul
cvi
graystring
exch get
exch
1 add 4 mul
cvi
7 sub
bitshift
1 and
}setscreen
64 div setgray
}bd
/:b
{
/pattransf load settransfer
pop pop pop
setgraypattern
}bd
docolorscreen startnoload
/screensave 5 array def
/:a{currentgray currentscreen currenttransfer screensave astore pop}bd
/:e{screensave aload pop settransfer setscreen setgray}bd
/:d
{
pop pop pop
/pattransf load settransfer
setgraypattern 8{pop}repeat
}bd
/:c
/:d ld
docolorscreen endnoload docolorscreen not startnoload
/screensave 20 array def
/:a{currentcmykcolor currentcolorscreen currentcolortransfer screensave astore pop}bd
/:e{screensave aload pop setcolortransfer setcolorscreen setcmykcolor}bd
/rstring Z
/grstring Z
/blstring Z
/convroll{64 div 4 -1 roll}bd
/setcolorpattern
{
/graystring xs
/blstring xs
/grstring xs
/rstring xs
patfreq
patangle
{
1 add 4 mul cvi rstring
exch get exch 1 add 4 mul
cvi 7 sub bitshift 1 and
}
patfreq
patangle
{
1 add 4 mul cvi grstring
exch get exch 1 add 4 mul
cvi 7 sub bitshift 1 and
}
patfreq
patangle
{
1 add 4 mul cvi blstring
exch get exch 1 add 4 mul
cvi 7 sub bitshift 1 and
}
patfreq
patangle
{
1 add 4 mul cvi graystring
exch get exch 1 add 4 mul
cvi 7 sub bitshift 1 and
}
setcolorscreen
convroll convroll convroll convroll
setcmykcolor
}bd
/:d
{
pop pop pop
/pattransf load settransfer
pop pop setcolorpattern
}bd
/:c
/:d ld
docolorscreen not endnoload
level2  endnoload level2 not startnoload
/pmtx Z
/BGnd Z
/FGnd Z
/PaintData Z
/PatternMtx Z
/PatHeight Z
/PatWidth Z
/$d Z
/savecolor 4 array def
/savecolorspace Z
/:a{
mark 0 0 0 currentcolor savecolor astore pop cleartomark
/savecolorspace currentcolorspace store
}bd
/:e{
savecolorspace setcolorspace
mark savecolor aload pop setcolor cleartomark
}bd
/initQDpatterns
{
gS
initmatrix
mT dup 4 get exch 5 get :T
1 0 dtransform round exch round exch idtransform
dup mul exch dup mul exch add sqrt
0 1 dtransform round exch round exch idtransform
dup mul exch dup mul exch add sqrt
neg
scale
0
por not{90 add}if
normland{180 add}if
rotate
matrix currentmatrix
gR
/pmtx xs
:a
}bd
/:t
{
14 dict begin
/BGnd xdf
/FGnd xdf
/PaintData xdf
/PatternType 1 def
/PaintType 1 def
/BBox[0 0 1 1]def
/TilingType 1 def
/XStep 1 def
/YStep 1 def
/PatternMtx[24 0 0 24 0 0]def
/PaintProc
BGnd null ne
{
{
begin
BGnd aload pop :F
0 0 1 1 rF
FGnd aload pop :F
24 24 true PatternMtx PaintData imagemask
end
}
}{
{
begin
FGnd aload pop :F
24 24 true PatternMtx PaintData imagemask
end
}
}ifelse
def
currentdict
PatternMtx
end
gS $c setcolorspace pmtx setmatrix makepattern gR
}bd
/:u
{
14 dict begin
/$d 8 dict def
/PatternType 1 def
/PaintType 1 def
/BBox[0 0 1 1]def
/TilingType 1 def
/XStep 1 def
/YStep 1 def
/PaintData xdf
/PatHeight xdf
/PatWidth xdf
/PatternMtx[PatWidth 0 0 PatHeight 0 0]def
$d begin
/ImageType 1 def
/MultipleDataSource false def
/Height PatHeight def
/Width PatWidth def
/Decode[0 1 0 1 0 1]def
/ImageMatrix PatternMtx def
/DataSource PaintData def
/BitsPerComponent 8 def
end
/PaintProc
{
begin
$d image
end
}def
currentdict
PatternMtx
end
gS $c setcolorspace pmtx setmatrix makepattern gR
}bd
/bk[1 1 1]def
/fg[0 0 0]def
/:b{
:t
setpattern
pop pop
}bd
/:d{
:t
setpattern
10{pop}repeat
}bd
/:c{
:u
setpattern
10{pop}repeat
}bd
level2 not endnoload
/@a
{
np :M 0 rl :L 0 exch rl 0 rl :L fill
}bd
/@b
{
np :M 0 rl 0 exch rl :L 0 rl 0 exch rl fill
}bd
/arct where
{
pop
}{
/arct
{
arcto pop pop pop pop
}bd
}ifelse
/x1 Z
/x2 Z
/y1 Z
/y2 Z
/rad Z
/@q
{
/rad xs
/y2 xs
/x2 xs
/y1 xs
/x1 xs
np
x2 x1 add 2 div y1 :M
x2 y1 x2 y2 rad arct
x2 y2 x1 y2 rad arct
x1 y2 x1 y1 rad arct
x1 y1 x2 y1 rad arct
fill
}bd
/@s
{
/rad xs
/y2 xs
/x2 xs
/y1 xs
/x1 xs
np
x2 x1 add 2 div y1 :M
x2 y1 x2 y2 rad arct
x2 y2 x1 y2 rad arct
x1 y2 x1 y1 rad arct
x1 y1 x2 y1 rad arct
:K
stroke
}bd
/@i
{
np 0 360 arc fill
}bd
/@j
{
gS
np
:T
scale
0 0 .5 0 360 arc
fill
gR
}bd
/@e
{
np
0 360 arc
:K
stroke
}bd
/@f
{
np
$m currentmatrix
pop
:T
scale
0 0 .5 0 360 arc
:K
$m setmatrix
stroke
}bd
/@k
{
gS
np
:T
0 0 :M
0 0 5 2 roll
arc fill
gR
}bd
/@l
{
gS
np
:T
0 0 :M
scale
0 0 .5 5 -2 roll arc
fill
gR
}bd
/@m
{
np
arc
stroke
}bd
/@n
{
np
$m currentmatrix
pop
:T
scale
0 0 .5 5 -2 roll arc
$m setmatrix
stroke
}bd
/$t Z
/$p Z
/$s Z
/$o 1. def
/2state? false def
/ps Z
level2 startnoload
/pushcolor/currentrgbcolor ld
/popcolor/setrgbcolor ld
/setcmykcolor where
{
pop/currentcmykcolor where
{
pop/pushcolor/currentcmykcolor ld
/popcolor/setcmykcolor ld
}if
}if
level2 endnoload level2 not startnoload
/pushcolor
{
currentcolorspace $c eq
{
currentcolor currentcolorspace true
}{
currentcmykcolor false
}ifelse
}bd
/popcolor
{
{
setcolorspace setcolor
}{
setcmykcolor
}ifelse
}bd
level2 not endnoload
/pushstatic
{
ps
2state?
$o
$t
$p
$s
}bd
/popstatic
{
/$s xs
/$p xs
/$t xs
/$o xs
/2state? xs
/ps xs
}bd
/pushgstate
{
save errordict/nocurrentpoint{pop 0 0}put
currentpoint
3 -1 roll restore
pushcolor
currentlinewidth
currentlinecap
currentlinejoin
currentdash exch aload length
np clippath pathbbox
$m currentmatrix aload pop
}bd
/popgstate
{
$m astore setmatrix
2 index sub exch
3 index sub exch
rC
array astore exch setdash
setlinejoin
setlinecap
lw
popcolor
np :M
}bd
/bu
{
pushgstate
gR
pushgstate
2state?
{
gR
pushgstate
}if
pushstatic
pm restore
mT concat
}bd
/bn
{
/pm save store
popstatic
popgstate
gS
popgstate
2state?
{
gS
popgstate
}if
}bd
/cpat{pop 64 div G 8{pop}repeat}bd
/S/show ld
/A{
0.0 exch ashow
}bd
/R{
0.0 exch 32 exch widthshow
}bd
/W{
0.0 3 1 roll widthshow
}bd
/J{
0.0 32 4 2 roll 0.0 exch awidthshow
}bd
/V{
0.0 4 1 roll 0.0 exch awidthshow
}bd
/fcflg true def
/fc{
fcflg{
vmstatus exch sub 50000 lt{
(%%[ Warning: Running out of memory ]%%\r)print flush/fcflg false store
}if pop
}if
}bd
/$f[1 0 0 -1 0 0]def
/:ff{$f :mf}bd
/MacEncoding StandardEncoding 256 array copy def
MacEncoding 39/quotesingle put
MacEncoding 96/grave put
/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute
/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave
/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute
/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis
/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash
/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation
/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash
/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft
/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge
/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl
/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave
/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde
/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caron
MacEncoding 128 128 getinterval astore pop
level2 startnoload
/copyfontdict
{
findfont dup length dict
begin
{
1 index/FID ne{def}{pop pop}ifelse
}forall
}bd
level2 endnoload level2 not startnoload
/copyfontdict
{
findfont dup length dict
copy
begin
}bd
level2 not endnoload
md/fontname known not{
/fontname/customfont def
}if
/Encoding Z
/:mre
{
copyfontdict
/Encoding MacEncoding def
fontname currentdict
end
definefont :ff def
}bd
/:bsr
{
copyfontdict
/Encoding Encoding 256 array copy def
Encoding dup
}bd
/pd{put dup}bd
/:esr
{
pop pop
fontname currentdict
end
definefont :ff def
}bd
/scf
{
scalefont def
}bd
/scf-non
{
$m scale :mf setfont
}bd
/ps Z
/fz{/ps xs}bd
/sf/setfont ld
/cF/currentfont ld
/mbf
{
/makeblendedfont where
{
pop
makeblendedfont
/ABlend exch definefont
}{
pop
}ifelse
def
}def
/currentpacking where {pop sc_oldpacking setpacking}if end
md begin
countdictstack[{/currentdistillerparams where{pop 1 dict dup/Orientation 1 put setpagedevice}if}featurecleanup
/mT[1 0 0 -1 31 583]def
initQDpatterns
/sD 16 dict def
/f0_1/Helvetica
:mre
/f0_36 f0_1 36 scf
/f0_18 f0_1 18 scf
/f0_14 f0_1 14 scf
/f0_12 f0_1 12 scf
/f1_1/Helvetica-Bold
:mre
/f1_18 f1_1 18 scf
/Courier findfont[10 0 0 -10 0 0]:mf setfont
%PostScript Hack by Mike Brors 12/7/90
/DisableNextSetRGBColor
	{
	userdict begin
	/setrgbcolor 
		{
		pop
		pop
		pop
		userdict begin
		/setrgbcolor systemdict /setrgbcolor get def
		end
		} def
	end
} bind def
/bcarray where {
	pop
	bcarray 2 {
		/da 4 ps div def
		df setfont gsave cs wi
		1 index 0 ne{exch da add exch}if grestore setcharwidth
		cs 0 0 smc da 0 smc da da smc 0 da smc c
		gray
		{ gl}
		{1 setgray}ifelse
		da 2. div dup moveto show
	}bind put
} if
%
% Used to snap to device pixels, 1/4th of the pixel in.
/stp {  % x y  pl  x y                % Snap To Pixel, pixel  (auto stroke adjust)
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} bind def

/snapmoveto { % x y  m  -             % moveto, auto stroke adjust
	stp  moveto
} bind def

/snaplineto { % x y  l  -             % lineto, auto stroke adjust
	stp lineto
} bind def
initializepage
gS 0 0 730 552 rC
1 .7 .6 :F
-1 -1 130 588 1 1 129 242 @b
.5 G
0 0 .467 :F
np 31 378 :M
35 363 :L
44 370 :L
31 378 :L
eofill
-3 -3 36 375 3 3 143 228 @b
1 G
7 281 110 47 rF
0 G
7.5 281.5 109 46 rS
0 .2 .6 :F
58 520 :M
gsave
2.0 setmiterlimit
-20001 -19999 -2 2 -19998 -20000 2 -20001 -20001 @a
2 lw
-20000 -20000 :M
newpath
31 324 snapmoveto
32 333 stp 36 338 stp 32 345 stp curveto
29 350 stp 24 350 stp 20 352 stp curveto
14 354 stp 10 352 stp 7 357 stp curveto
1 363 stp 4 369 stp 4 378 stp curveto
2 388 stp 3 394 stp 4 405 stp curveto
3 416 stp 3 422 stp 4 434 stp curveto
4 442 stp 5 447 stp 6 456 stp curveto
6 466 stp 6 472 stp 8 483 stp curveto
9 497 stp 9 505 stp 14 519 stp curveto
15 527 stp 16 532 stp 23 538 stp curveto
27 542 stp 31 545 stp 39 545 stp curveto
43 545 stp 46 542 stp 51 539 stp curveto
55 533 stp 55 528 stp 59 521 stp curveto
stroke
-20001 -10001 -10000 10000 -10000 -20000 10000 -20001 -20001 @a
10000 lw
-20000 -20000 :M
grestore
0 G
.867 0 0 :F
np 519 170 :M
525 184 :L
513 184 :L
519 170 :L
eofill
-3 -3 521 192 3 3 518 175 @b
0 G
1 .7 .6 :F
-1 -1 452 565 1 1 451 41 @b
1 G
4 3 126 242 rF
:a
32<F0F0F0F00F0F0F0F><F0F0F0F0F0F0F0F0F0F0F0F00F0F0F0F0F0F0F0F0F0F0F0F>fg bk
:b
1 lw
4.5 3.5 125 241 rS
:e
0 G
123 43 99 54 rC
gR
gS 118 7 109 90 rC
151 57 :M
0 0 .867 :F
f0_18 sf
(DIRC)S
132 75 :M
-.112( Front-end)A
151 93 :M
0 G
0 0 .867 :F
(Crate)S
gR
gS 237 43 90 54 rC
gR
gS 232 7 100 90 rC
260 57 :M
0 0 .867 :F
f0_18 sf
(DIRC)S
246 75 :M
-.147( Readout)A
260 93 :M
0 G
0 0 .867 :F
(Crate)S
gR
gS 346 61 95 18 rC
gR
gS 341 25 105 54 rC
361 75 :M
f0_18 sf
0 0 .867 :F
(General)S
gR
gS 474 52 99 36 rC
gR
gS 469 16 109 72 rC
502 66 :M
0 0 .867 :F
f0_18 sf
(UNIX)S
495 84 :M
0 G
0 0 .867 :F
(Hidden)S
gR
gS 600 52 99 36 rC
gR
gS 595 16 109 72 rC
628 66 :M
0 0 .867 :F
f0_18 sf
(UNIX)S
623 84 :M
0 G
0 0 .867 :F
(Visible)S
gR
gS 0 0 730 552 rC
1 G
140 486 73 64 rF
0 G
140.5 486.5 72 63 rS
150 496 54 45 rC
gR
gS 145 460 64 81 rC
160 507 :M
f0_14 sf
.334(Front)A
165 522 :M
.048(End)A
155 537 :M
.131(Boards)A
gR
gS 0 0 730 552 rC
:a
48 0 48 0<EEDDBB77EEDDBB77><0000000000000000><EEDDBB77EEDDBB77><0000000000000000>16<EEDDBB77EEDDBB77><EEEEEEDDDDDDBBBBBB777777EEEEEEDDDDDDBBBBBB777777>[0 .533 0][1 1 1]
:d
np 188 457 :M
194 471 :L
182 471 :L
188 457 :L
eofill
-3 -3 190 486 3 3 187 462 @b
:e
1 G
240 374 85 172 rF
0 G
240.5 374.5 84 171 rS
251 376 63 31 rC
gR
gS 246 340 73 67 rC
256 387 :M
f0_14 sf
.182(Readout)A
259 402 :M
1 G
0 G
.221(Module)A
gR
1 G
gS 0 0 730 552 rC
243 406 78 134 rF
0 G
243.5 406.5 77 133 rS
267 410 28 14 rC
gR
gS 262 374 38 50 rC
269 420 :M
0 .933 0 :F
f0_12 sf
0 G
.165(PPC)A
gR
:a
24 0 24 0<83070E1C3870E0C1><0000000000000000><83070E1C3870E0C1><0000000000000000>40<83070E1C3870E0C1><8383830707070E0E0E1C1C1C383838707070E0E0E0C1C1C1>[0 .933 0][1 1 1]
:d
gS 0 0 730 552 rC
246 424 319 457 16.5 @q
:e
0 G
246.5 424.5 318.5 456.5 15.5 @s
247 427 72 28 rC
gR
:e
gS 242 391 82 64 rC
256 437 :M
0 G
f0_12 sf
.166(Recieving)A
254 451 :M
.074(Formatting)A
gR
0 G
gS 0 0 730 552 rC
.867 0 0 :F
np 163 487 :M
157 473 :L
169 473 :L
163 487 :L
eofill
-3 -3 165 482 3 3 162 457 @b
:a
0 24 0 0<0000000000000000><E070381C0E0783C1><0000000000000000><0000000000000000>40<E070381C0E0783C1><E0E0E07070703838381C1C1C0E0E0E070707838383C1C1C1>[1 .2 .8][1 1 1]
:d
141 170 77 58 rF
:e
0 G
141.5 170.5 76 57 rS
142 185 76 30 rC
gR
gS 137 149 86 66 rC
146 196 :M
f0_14 sf
.111(Calibration)A
157 211 :M
.221(module)A
gR
gS 0 0 730 552 rC
:a
48 0 48 0<EEDDBB77EEDDBB77><0000000000000000><EEDDBB77EEDDBB77><0000000000000000>16<EEDDBB77EEDDBB77><EEEEEEDDDDDDBBBBBB777777EEEEEEDDDDDDBBBBBB777777>[0 .533 0][1 1 1]
:d
np 141 510 :M
128 510 :L
132 501 :L
141 510 :L
eofill
102 495 -2 2 139 508 2 102 493 @a
16<EEDDBB77EEDDBB77><EEEEEEDDDDDDBBBBBB777777EEEEEEDDDDDDBBBBBB777777>fg bk
:b
:e
1 .7 .6 :F
-1 -1 229 589 1 1 228 39 @b
.5 G
0 .533 0 :F
np 40 38 :M
26 44 :L
26 32 :L
40 38 :L
eofill
9 40 -3 3 35 37 3 9 37 @a
0 G
42 32 80 15 rC
gR
gS 37 0 90 47 rC
49 43 :M
f0_14 sf
-.083(DIRC Data)A
gR
gS 0 0 730 552 rC
0 .8 .8 :F
np 38 145 :M
24 151 :L
24 139 :L
38 145 :L
eofill
7 147 -3 3 33 144 3 7 144 @a
0 G
38 133 80 30 rC
gR
gS 33 97 90 66 rC
51 144 :M
f0_14 sf
.158(Detector)A
55 159 :M
.148(Control)A
gR
gS 0 0 730 552 rC
1 0 0 :F
np 40 57 :M
26 63 :L
26 51 :L
40 57 :L
eofill
8 59 -3 3 35 56 3 8 56 @a
0 G
42 51 84 16 rC
gR
gS 37 15 94 52 rC
45 62 :M
f0_14 sf
-.033(DAQ Control)A
gR
gS 0 0 730 552 rC
0 0 .467 :F
np 40 77 :M
26 83 :L
26 71 :L
40 77 :L
eofill
9 79 -3 3 35 76 3 9 76 @a
0 G
42 70 49 15 rC
gR
gS 37 34 59 51 rC
45 81 :M
f0_14 sf
.202(Timing)A
gR
gS 0 0 730 552 rC
1 .4 0 :F
np 39 95 :M
25 101 :L
25 89 :L
39 95 :L
eofill
8 97 -3 3 34 94 3 8 94 @a
0 G
37 89 94 16 rC
gR
gS 32 53 104 52 rC
41 100 :M
f0_14 sf
.298 .03(Detector Data)J
gR
gS 0 0 730 552 rC
.8 0 .6 :F
np 39 119 :M
25 125 :L
25 113 :L
39 119 :L
eofill
8 121 -3 3 34 118 3 8 118 @a
0 G
41 105 70 30 rC
gR
gS 36 69 80 66 rC
42 116 :M
f0_14 sf
.111(Calibration)A
61 131 :M
.146(Data)A
gR
gS 0 0 730 552 rC
1 .7 .6 :F
-1 -1 341 563 1 1 340 40 @b
0 G
1 G
242 98 78 31 rF
0 G
242.5 98.5 77 30 rS
243 99 77 31 rC
gR
gS 238 63 87 67 rC
268 110 :M
f0_14 sf
.259(Fast)A
259 125 :M
.148(Control)A
gR
gS 0 0 730 552 rC
1 G
354 254 77 58 rF
0 G
354.5 254.5 76 57 rS
355 268 76 31 rC
gR
gS 350 232 86 67 rC
375 279 :M
f0_14 sf
.052(Event)A
371 294 :M
1 .6 .4 :F
0 G
.074(Builder)A
gR
:a
0 0 32 0<0000000000000000><0000000000000000><FFFFFF0000FF0000><0000000000000000>32<FFFFFF0000FF0000><FFFFFFFFFFFFFFFFFF000000000000FFFFFF000000000000>[1 .6 .4][1 1 1]
:d
gS 0 0 730 552 rC
354 317 77 58 rF
:e
0 G
354.5 317.5 76 57 rS
355 331 76 31 rC
gR
:e
gS 350 295 86 67 rC
366 342 :M
0 G
f0_14 sf
.158(Detector)A
370 357 :M
.148(Control)A
gR
0 G
gS 0 0 730 552 rC
0 0 .467 :F
np 281 151 :M
275 137 :L
287 137 :L
281 151 :L
eofill
-3 -3 283 146 3 3 280 128 @b
0 G
1 G
354 117 77 55 rF
0 G
354.5 117.5 76 54 rS
355 124 76 45 rC
gR
gS 350 88 86 81 rC
370 135 :M
f0_14 sf
.279(Trigger)A
376 150 :M
.338(\(from)A
367 165 :M
-.093(DC,Cal.\))A
gR
gS 0 0 730 552 rC
0 0 .467 :F
np 319 118 :M
334 120 :L
328 130 :L
319 118 :L
eofill
323 123 -3 3 355 138 3 323 120 @a
0 G
:a
48 0 48 0<EEDDBB77EEDDBB77><0000000000000000><EEDDBB77EEDDBB77><0000000000000000>16<EEDDBB77EEDDBB77><EEEEEEDDDDDDBBBBBB777777EEEEEEDDDDDDBBBBBB777777>[0 .533 0][1 1 1]
:d
np 355 269 :M
341 275 :L
341 263 :L
355 269 :L
eofill
325 271 -3 3 350 268 3 325 268 @a
16<EEDDBB77EEDDBB77><EEEEEEDDDDDDBBBBBB777777EEEEEEDDDDDDBBBBBB777777>fg bk
:b
:e
.867 0 0 :F
np 326 241 :M
335 228 :L
341 239 :L
326 241 :L
eofill
-3 -3 333 239 3 3 465 149 @b
0 G
264 2 213 36 rC
gR
gS 259 0 223 38 rC
264 30 :M
f0_36 sf
(DIRC Online)S
gR
gS 28 5 67 18 rC
gR
gS 23 0 77 23 rC
32 19 :M
f0_18 sf
(Legend)S
gR
gS 0 0 730 552 rC
:a
0 48 0 0<0000000000000000><77BBDDEE77BBDDEE><0000000000000000><0000000000000000>16<77BBDDEE77BBDDEE><777777BBBBBBDDDDDDEEEEEE777777BBBBBBDDDDDDEEEEEE>[1 0 .6][1 1 1]
:d
np 355 282 :M
341 288 :L
341 276 :L
355 282 :L
eofill
325 284 -3 3 350 281 3 325 281 @a
0 24 0 0<0000000000000000><E070381C0E0783C1><0000000000000000><0000000000000000>40<E070381C0E0783C1><E0E0E07070703838381C1C1C0E0E0E070707838383C1C1C1>[1 .2 .8][1 1 1]
:d
469 305 570 345 18 @q
:e
0 G
469.5 305.5 569.5 344.5 17.5 @s
481 312 79 28 rC
gR
gS 476 276 89 64 rC
491 322 :M
f0_12 sf
.267(Calibration)A
498 336 :M
0 .933 0 :F
0 G
.19(Analysis)A
gR
:a
24 0 24 0<83070E1C3870E0C1><0000000000000000><83070E1C3870E0C1><0000000000000000>40<83070E1C3870E0C1><8383830707070E0E0E1C1C1C383838707070E0E0E0C1C1C1>[0 .933 0][1 1 1]
:d
gS 0 0 730 552 rC
469 222 570 259 18 @q
:e
0 G
469.5 222.5 569.5 258.5 17.5 @s
481 227 79 28 rC
gR
:e
gS 476 191 89 64 rC
508 237 :M
0 G
f0_12 sf
.22(Data)A
499 251 :M
1 1 .2 :F
0 G
.331(Storage)A
gR
:a
0 0 32 0<0000000000000000><0000000000000000><E4E4E4E4E4E4E4E4><0000000000000000>32<E4E4E4E4E4E4E4E4><E4E4E4E4E4E4E4E4E4E4E4E4E4E4E4E4E4E4E4E4E4E4E4E4>[1 1 .2][1 1 1]
:d
gS 0 0 730 552 rC
469 264 570 300 18 @q
:e
0 G
469.5 264.5 569.5 299.5 17 @s
481 269 79 28 rC
gR
:e
gS 476 233 89 64 rC
508 279 :M
0 G
f0_12 sf
.22(Data)A
492 293 :M
1 .6 .4 :F
0 G
.222(Monitoring)A
gR
:a
0 0 32 0<0000000000000000><0000000000000000><FFFFFF0000FF0000><0000000000000000>32<FFFFFF0000FF0000><FFFFFFFFFFFFFFFFFF000000000000FFFFFF000000000000>[1 .6 .4][1 1 1]
:d
gS 0 0 730 552 rC
471 356 572 411 18 @q
:e
0 G
471.5 356.5 571.5 410.5 17.5 @s
481 371 79 28 rC
gR
:e
gS 476 335 89 64 rC
498 381 :M
0 G
f0_12 sf
.095(Detector)A
492 395 :M
.222(Monitoring)A
gR
0 G
gS 0 0 730 552 rC
:a
0 48 0 0<0000000000000000><77BBDDEE77BBDDEE><0000000000000000><0000000000000000>16<77BBDDEE77BBDDEE><777777BBBBBBDDDDDDEEEEEE777777BBBBBBDDDDDDEEEEEE>[1 0 .6][1 1 1]
:d
np 469 321 :M
454 322 :L
457 311 :L
469 321 :L
eofill
431 310 -3 3 465 318 3 431 307 @a
16<77BBDDEE77BBDDEE><777777BBBBBBDDDDDDEEEEEE777777BBBBBBDDDDDDEEEEEE>fg bk
:b
0 32 32 0<0000000000000000><FF00FF00FF00FF00><FF00FF00FF00FF00><0000000000000000>32<FF00FF00FF00FF00><FFFFFF000000FFFFFF000000FFFFFF000000FFFFFF000000>[1 .4 0][1 1 1]
:d
np 473 367 :M
459 373 :L
459 361 :L
473 367 :L
eofill
431 369 -3 3 468 366 3 431 366 @a
32<FF00FF00FF00FF00><FFFFFF000000FFFFFF000000FFFFFF000000FFFFFF000000>fg bk
:b
48 0 48 0<EEDDBB77EEDDBB77><0000000000000000><EEDDBB77EEDDBB77><0000000000000000>16<EEDDBB77EEDDBB77><EEEEEEDDDDDDBBBBBB777777EEEEEEDDDDDDBBBBBB777777>[0 .533 0][1 1 1]
:d
np 469 276 :M
455 282 :L
455 270 :L
469 276 :L
eofill
431 278 -3 3 464 275 3 431 275 @a
16<EEDDBB77EEDDBB77><EEEEEEDDDDDDBBBBBB777777EEEEEEDDDDDDBBBBBB777777>fg bk
:b
48 0 48 0<EEDDBB77EEDDBB77><0000000000000000><EEDDBB77EEDDBB77><0000000000000000>16<EEDDBB77EEDDBB77><EEEEEEDDDDDDBBBBBB777777EEEEEEDDDDDDBBBBBB777777>[0 .533 0][1 1 1]
:d
np 468 242 :M
460 255 :L
453 245 :L
468 242 :L
eofill
-3 -3 434 267 3 3 461 244 @b
:e
0 G
1 G
467 97 572 170 18 @q
0 G
467.5 97.5 571.5 169.5 17.5 @s
481 106 79 56 rC
gR
gS 476 70 89 92 rC
508 116 :M
f0_12 sf
(DAQ)S
489 130 :M
.199(Preparation)A
486 144 :M
.128(\(Partitioning,)A
486 158 :M
.167(Initialization\))A
gR
gS 0 0 730 552 rC
.867 0 0 :F
np 431 138 :M
445 132 :L
445 144 :L
431 138 :L
eofill
436 140 -3 3 467 137 3 436 137 @a
0 G
1 .7 .6 :F
-1 -1 588 566 1 1 587 42 @b
0 G
10 256 93 18 rC
gR
gS 5 220 103 54 rC
23 270 :M
f0_18 sf
0 0 .867 :F
(Detector)S
gR
gS 0 0 730 552 rC
:a
48 0 48 0<EEDDBB77EEDDBB77><0000000000000000><EEDDBB77EEDDBB77><0000000000000000>16<EEDDBB77EEDDBB77><EEEEEEDDDDDDBBBBBB777777EEEEEEDDDDDDBBBBBB777777>[0 .533 0][1 1 1]
:d
np 609 281 :M
595 287 :L
595 275 :L
609 281 :L
eofill
570 283 -3 3 604 280 3 570 280 @a
16<EEDDBB77EEDDBB77><EEEEEEDDDDDDBBBBBB777777EEEEEEDDDDDDBBBBBB777777>fg bk
:b
0 32 32 0<0000000000000000><FF00FF00FF00FF00><FF00FF00FF00FF00><0000000000000000>32<FF00FF00FF00FF00><FFFFFF000000FFFFFF000000FFFFFF000000FFFFFF000000>[1 .4 0][1 1 1]
:d
np 608 359 :M
598 371 :L
593 360 :L
608 359 :L
eofill
-3 -3 574 380 3 3 601 360 @b
:e
0 G
1 G
469 190 570 215 12.5 @q
0 G
469.5 190.5 569.5 214.5 11.5 @s
480 196 79 15 rC
gR
gS 475 160 89 51 rC
493 206 :M
f0_12 sf
.236(Database)A
gR
gS 0 0 730 552 rC
:a
0 48 0 0<0000000000000000><77BBDDEE77BBDDEE><0000000000000000><0000000000000000>16<77BBDDEE77BBDDEE><777777BBBBBBDDDDDDEEEEEE777777BBBBBBDDDDDDEEEEEE>[1 0 .6][1 1 1]
:d
np 608 331 :M
594 337 :L
594 325 :L
608 331 :L
eofill
569 333 -3 3 603 330 3 569 330 @a
16<77BBDDEE77BBDDEE><777777BBBBBBDDDDDDEEEEEE777777BBBBBBDDDDDDEEEEEE>fg bk
:b
:e
0 .8 .8 :F
np 430 350 :M
444 344 :L
444 356 :L
430 350 :L
eofill
435 352 -3 3 608 349 3 435 349 @a
1 G
606 103 707 132 13 @q
0 G
606.5 103.5 706.5 131.5 13.5 @s
618 111 79 15 rC
gR
gS 613 75 89 51 rC
625 121 :M
f0_12 sf
.498 .05(Run Control)J
gR
gS 0 0 730 552 rC
.867 0 0 :F
np 571 112 :M
585 106 :L
585 118 :L
571 112 :L
eofill
576 114 -3 3 607 111 3 576 111 @a
.9 1 .9 :F
606 408 707 548 18 @q
:a
40<AA44AA11AA44AA11><AAAAAA444444AAAAAA111111AAAAAA444444AAAAAA111111>fg bk
:b
606.5 408.5 706.5 547.5 17.5 @s
:e
0 G
618 411 79 29 rC
gR
gS 613 375 89 65 rC
638 421 :M
f0_12 sf
.621 .062( Online)J
633 435 :M
.142(Graphics)A
gR
gS 0 0 730 552 rC
1 G
611 493 703 540 18 @q
0 G
611.5 493.5 702.5 539.5 17.5 @s
621 503 72 29 rC
gR
gS 616 467 82 65 rC
629 513 :M
f0_12 sf
.168(Histogram)A
630 527 :M
.124(Presenter)A
gR
gS 0 0 730 552 rC
1 G
613 444 700 486 18 @q
0 G
613.5 444.5 699.5 485.5 17.5 @s
623 453 68 29 rC
gR
gS 618 417 78 65 rC
642 463 :M
f0_12 sf
.08(Event)A
637 477 :M
.6 1 .6 :F
0 G
.278(Display)A
gR
.9 1 .9 :F
gS 0 0 730 552 rC
606 167 707 370 18 @q
:a
40<AA44AA11AA44AA11><AAAAAA444444AAAAAA111111AAAAAA444444AAAAAA111111>fg bk
:b
606.5 167.5 706.5 369.5 17.5 @s
:e
0 G
616 170 79 29 rC
gR
gS 611 134 89 65 rC
620 180 :M
0 G
f0_12 sf
.108 .011( DIRC Online)J
645 194 :M
-.166(GUI)A
gR
0 G
gS 0 0 730 552 rC
:a
0 0 32 0<0000000000000000><0000000000000000><FFFFFF0000FF0000><0000000000000000>32<FFFFFF0000FF0000><FFFFFFFFFFFFFFFFFF000000000000FFFFFF000000000000>[1 .6 .4][1 1 1]
:d
612 315 702 366 18 @q
:e
0 G
612.5 315.5 701.5 365.5 17.5 @s
622 320 70 43 rC
gR
gS 617 284 80 79 rC
634 330 :M
f0_12 sf
.095(Detector)A
632 344 :M
.551 .055(Control +)J
628 358 :M
.222(Monitoring)A
gR
gS 0 0 730 552 rC
:a
0 24 0 0<0000000000000000><E070381C0E0783C1><0000000000000000><0000000000000000>40<E070381C0E0783C1><E0E0E07070703838381C1C1C0E0E0E070707838383C1C1C1>[1 .2 .8][1 1 1]
:d
611 260 703 285 12.5 @q
:e
0 G
611.5 260.5 702.5 284.5 11.5 @s
622 266 71 15 rC
gR
gS 617 230 81 51 rC
627 276 :M
f0_12 sf
.267(Calibration)A
gR
gS 0 0 730 552 rC
1 G
611 287 701 313 13 @q
0 G
611.5 287.5 700.5 312.5 12 @s
621 294 70 14 rC
gR
gS 616 258 80 50 rC
624 304 :M
f0_12 sf
.199(Diagnostics)A
gR
gS 0 0 730 552 rC
np 654 168 :M
648 154 :L
660 154 :L
654 168 :L
eofill
np 654 132 :M
660 146 :L
648 146 :L
654 132 :L
eofill
-3 -3 656 163 3 3 653 137 @b
.867 0 0 :F
np 569 162 :M
584 161 :L
581 172 :L
569 162 :L
eofill
573 165 -3 3 609 174 3 573 162 @a
0 G
np 40 178 :M
26 184 :L
26 172 :L
40 178 :L
eofill
8 180 -3 3 35 177 3 8 177 @a
40 164 72 30 rC
gR
gS 35 128 82 66 rC
51 175 :M
f0_14 sf
.073(Process)A
53 190 :M
.148(Control)A
gR
gS 0 0 730 552 rC
np 656 369 :M
662 383 :L
650 383 :L
656 369 :L
eofill
np 656 408 :M
650 394 :L
662 394 :L
656 408 :L
eofill
-3 -3 658 403 3 3 655 374 @b
np 570 123 :M
584 117 :L
584 129 :L
570 123 :L
eofill
np 608 123 :M
594 129 :L
594 117 :L
608 123 :L
eofill
575 125 -3 3 603 122 3 575 122 @a
0 0 .467 :F
np 177 172 :M
183 158 :L
192 167 :L
177 172 :L
eofill
-3 -3 183 169 3 3 240 112 @b
1 G
241 150 85 170 rF
0 G
241.5 150.5 84 169 rS
1 G
245 182 77 135 rF
0 G
245.5 182.5 76 134 rS
252 152 63 30 rC
gR
gS 247 116 73 66 rC
257 163 :M
f0_14 sf
.182(Readout)A
253 178 :M
.149(Controller)A
gR
gS 267 185 33 14 rC
gR
gS 262 149 43 50 rC
271 195 :M
0 .933 0 :F
f0_12 sf
0 G
.165(PPC)A
gR
:a
24 0 24 0<83070E1C3870E0C1><0000000000000000><83070E1C3870E0C1><0000000000000000>40<83070E1C3870E0C1><8383830707070E0E0E1C1C1C383838707070E0E0E0C1C1C1>[0 .933 0][1 1 1]
:d
gS 0 0 730 552 rC
248 198 319 234 18 @q
:e
0 G
.016 lw
248.5 198.5 318.5 233.5 17 @s
253 203 62 28 rC
gR
:e
gS 248 167 72 64 rC
255 213 :M
0 G
f0_12 sf
.074(Formatting)A
261 227 :M
1 .2 .8 :F
0 G
.496(Sending)A
gR
:a
0 24 0 0<0000000000000000><E070381C0E0783C1><0000000000000000><0000000000000000>40<E070381C0E0783C1><E0E0E07070703838381C1C1C0E0E0E070707838383C1C1C1>[1 .2 .8][1 1 1]
:d
gS 0 0 730 552 rC
248 237 319 274 18 @q
:e
0 G
.016 lw
248.5 237.5 318.5 273.5 17.5 @s
253 242 62 29 rC
gR
:e
gS 248 206 72 65 rC
254 252 :M
0 G
f0_12 sf
.184(Processing)A
261 266 :M
1 1 .2 :F
0 G
.496(Sending)A
gR
:a
0 0 32 0<0000000000000000><0000000000000000><E4E4E4E4E4E4E4E4><0000000000000000>32<E4E4E4E4E4E4E4E4><E4E4E4E4E4E4E4E4E4E4E4E4E4E4E4E4E4E4E4E4E4E4E4E4>[1 1 .2][1 1 1]
:d
gS 0 0 730 552 rC
248 277 319 314 18 @q
:e
0 G
.016 lw
248.5 277.5 318.5 313.5 17.5 @s
253 282 62 29 rC
gR
:e
gS 248 246 72 65 rC
254 292 :M
0 G
f0_12 sf
.184(Processing)A
261 306 :M
.496(Sending)A
gR
0 G
gS 0 0 730 552 rC
:a
0 24 0 0<0000000000000000><E070381C0E0783C1><0000000000000000><0000000000000000>40<E070381C0E0783C1><E0E0E07070703838381C1C1C0E0E0E070707838383C1C1C1>[1 .2 .8][1 1 1]
:d
246 460 317 495 17.5 @q
:e
0 G
.016 lw
246.5 460.5 316.5 494.5 16.5 @s
251 461 62 28 rC
gR
gS 246 425 72 64 rC
271 471 :M
f0_12 sf
.113(Pre-)A
252 485 :M
.184(Processing)A
gR
gS 0 0 730 552 rC
:a
0 0 32 0<0000000000000000><0000000000000000><E4E4E4E4E4E4E4E4><0000000000000000>32<E4E4E4E4E4E4E4E4><E4E4E4E4E4E4E4E4E4E4E4E4E4E4E4E4E4E4E4E4E4E4E4E4>[1 1 .4][1 1 1]
:d
247 499 318 535 18 @q
:e
0 G
.016 lw
247.5 499.5 317.5 534.5 17 @s
252 502 62 29 rC
gR
gS 247 466 72 65 rC
272 512 :M
f0_12 sf
.113(Pre-)A
253 526 :M
.184(Processing)A
gR
gS 0 0 730 552 rC
:a
0 0 32 0<0000000000000000><0000000000000000><E4E4E4E4E4E4E4E4><0000000000000000>32<E4E4E4E4E4E4E4E4><E4E4E4E4E4E4E4E4E4E4E4E4E4E4E4E4E4E4E4E4E4E4E4E4>[1 1 .4][1 1 1]
:d
611 221 703 258 18 @q
:e
0 G
611.5 221.5 702.5 257.5 17.5 @s
622 226 71 29 rC
gR
gS 617 190 81 65 rC
644 236 :M
f0_12 sf
.22(Data)A
628 250 :M
.222(Monitoring)A
gR
gS 0 0 730 552 rC
:a
0 48 0 0<0000000000000000><77BBDDEE77BBDDEE><0000000000000000><0000000000000000>16<77BBDDEE77BBDDEE><777777BBBBBBDDDDDDEEEEEE777777BBBBBBDDDDDDEEEEEE>[1 0 .6][1 1 1]
:d
np 561 192 :M
575 186 :L
575 198 :L
561 192 :L
eofill
566 194 -3 3 608 191 3 566 191 @a
16<77BBDDEE77BBDDEE><777777BBBBBBDDDDDDEEEEEE777777BBBBBBDDDDDDEEEEEE>fg bk
:b
0 32 32 0<0000000000000000><FF00FF00FF00FF00><FF00FF00FF00FF00><0000000000000000>32<FF00FF00FF00FF00><FFFFFF000000FFFFFF000000FFFFFF000000FFFFFF000000>[1 .4 0][1 1 1]
:d
np 568 202 :M
582 196 :L
582 208 :L
568 202 :L
eofill
573 204 -3 3 607 201 3 573 201 @a
32<FF00FF00FF00FF00><FFFFFF000000FFFFFF000000FFFFFF000000FFFFFF000000>fg bk
:b
0 0 32 0<0000000000000000><0000000000000000><AAAAAAAAAAAAAAAA><0000000000000000>32<AAAAAAAAAAAAAAAA><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA>[1 .8 0][1 1 1]
:d
np 562 211 :M
576 205 :L
576 217 :L
562 211 :L
eofill
567 213 -3 3 607 210 3 567 210 @a
32<AAAAAAAAAAAAAAAA><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA>fg bk
:b
:e
0 G
np 565 269 :M
579 263 :L
579 275 :L
565 269 :L
eofill
np 608 269 :M
594 275 :L
594 263 :L
608 269 :L
eofill
570 271 -3 3 603 268 3 570 268 @a
np 565 314 :M
579 308 :L
579 320 :L
565 314 :L
eofill
np 608 314 :M
594 320 :L
594 308 :L
608 314 :L
eofill
570 316 -3 3 603 313 3 570 313 @a
np 572 393 :M
581 380 :L
587 391 :L
572 393 :L
eofill
np 616 365 :M
607 378 :L
601 367 :L
616 365 :L
eofill
-3 -3 579 391 3 3 609 367 @b
1 G
613 196 702 220 10.5 @q
0 G
613.5 196.5 701.5 219.5 11 @s
618 202 79 15 rC
gR
gS 613 166 89 51 rC
625 212 :M
f0_12 sf
.498 .05(Run Control)J
gR
gS 0 0 730 552 rC
.867 0 0 :F
np 394 255 :M
398 240 :L
408 248 :L
394 255 :L
eofill
-3 -3 399 252 3 3 469 162 @b
0 G
:a
0 0 32 0<0000000000000000><0000000000000000><AAAAAAAAAAAAAAAA><0000000000000000>32<AAAAAAAAAAAAAAAA><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA>[1 .8 0][1 1 1]
:d
np 355 294 :M
341 300 :L
341 288 :L
355 294 :L
eofill
326 296 -3 3 350 293 3 326 293 @a
32<AAAAAAAAAAAAAAAA><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA>fg bk
:b
48 0 48 0<EEDDBB77EEDDBB77><0000000000000000><EEDDBB77EEDDBB77><0000000000000000>16<EEDDBB77EEDDBB77><EEEEEEDDDDDDBBBBBB777777EEEEEEDDDDDDBBBBBB777777>[0 .533 0][1 1 1]
:d
np 240 437 :M
226 443 :L
226 431 :L
240 437 :L
eofill
213 439 -3 3 235 436 3 213 436 @a
16<EEDDBB77EEDDBB77><EEEEEEDDDDDDBBBBBB777777EEEEEEDDDDDDBBBBBB777777>fg bk
:b
:e
1 0 0 :F
np 215 422 :M
229 416 :L
229 428 :L
215 422 :L
eofill
220 424 -3 3 240 421 3 220 421 @a
0 G
:a
0 0 32 0<0000000000000000><0000000000000000><AAAAAAAAAAAAAAAA><0000000000000000>32<AAAAAAAAAAAAAAAA><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA>[1 .8 0][1 1 1]
:d
np 469 287 :M
455 293 :L
455 281 :L
469 287 :L
eofill
431 289 -3 3 464 286 3 431 286 @a
32<AAAAAAAAAAAAAAAA><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA>fg bk
:b
0 0 32 0<0000000000000000><0000000000000000><AAAAAAAAAAAAAAAA><0000000000000000>32<AAAAAAAAAAAAAAAA><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA>[1 .8 0][1 1 1]
:d
np 605 292 :M
591 298 :L
591 286 :L
605 292 :L
eofill
567 294 -3 3 600 291 3 567 291 @a
32<AAAAAAAAAAAAAAAA><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA>fg bk
:b
0 32 32 0<0000000000000000><FF00FF00FF00FF00><FF00FF00FF00FF00><0000000000000000>32<FF00FF00FF00FF00><FFFFFF000000FFFFFF000000FFFFFF000000FFFFFF000000>[1 .4 0][1 1 1]
:d
np 354 345 :M
340 351 :L
340 339 :L
354 345 :L
eofill
210 347 -3 3 349 344 3 210 344 @a
32<FF00FF00FF00FF00><FFFFFF000000FFFFFF000000FFFFFF000000FFFFFF000000>fg bk
:b
:e
0 .8 .8 :F
np 209 332 :M
223 326 :L
223 338 :L
209 332 :L
eofill
214 334 -3 3 354 331 3 214 331 @a
0 G
:a
0 48 0 0<0000000000000000><77BBDDEE77BBDDEE><0000000000000000><0000000000000000>16<77BBDDEE77BBDDEE><777777BBBBBBDDDDDDEEEEEE777777BBBBBBDDDDDDEEEEEE>[1 0 .6][1 1 1]
:d
np 288 319 :M
294 333 :L
282 333 :L
288 319 :L
eofill
-3 -3 290 374 3 3 287 324 @b
16<77BBDDEE77BBDDEE><777777BBBBBBDDDDDDEEEEEE777777BBBBBBDDDDDDEEEEEE>fg bk
:b
0 0 32 0<0000000000000000><0000000000000000><AAAAAAAAAAAAAAAA><0000000000000000>32<AAAAAAAAAAAAAAAA><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA>[1 .8 0][1 1 1]
:d
np 304 320 :M
310 334 :L
298 334 :L
304 320 :L
eofill
-3 -3 306 374 3 3 303 325 @b
32<AAAAAAAAAAAAAAAA><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA>fg bk
:b
48 0 48 0<EEDDBB77EEDDBB77><0000000000000000><EEDDBB77EEDDBB77><0000000000000000>16<EEDDBB77EEDDBB77><EEEEEEDDDDDDBBBBBB777777EEEEEEDDDDDDBBBBBB777777>[0 .533 0][1 1 1]
:d
np 273 319 :M
279 333 :L
267 333 :L
273 319 :L
eofill
-3 -3 275 374 3 3 272 324 @b
16<EEDDBB77EEDDBB77><EEEEEEDDDDDDBBBBBB777777EEEEEEDDDDDDBBBBBB777777>fg bk
:b
:e
.867 0 0 :F
np 260 375 :M
254 361 :L
266 361 :L
260 375 :L
eofill
-3 -3 262 370 3 3 259 320 @b
1 1 .8 :F
18 314 93 10 rF
0 G
18.5 314.5 92 9 rS
1 G
137 377 78 80 rF
0 G
137.5 377.5 77 79 rS
145 411 63 45 rC
gR
gS 140 375 73 81 rC
158 422 :M
f0_14 sf
-.022( Crate)A
146 437 :M
.149(Controller)A
153 452 :M
.163(\(G-link\))A
gR
gS 0 0 730 552 rC
139.5 380.5 74 28 rS
140 381 73 27 rC
gR
gS 135 345 83 63 rC
140 391 :M
f0_12 sf
.109 .011(Temp. + low)J
140 405 :M
.297 .03(Volt. sensors)J
gR
gS 0 0 730 552 rC
1 .2 0 :F
74 75 66 483.5 @j
0 G
73 74 66 483.5 @f
0 0 :M
 gsave newpath
matrix currentmatrix 63 440 translate 7 7 div 1 scale 4 4 4 270 630 arc
4 4 lineto
setmatrix closepath eoclip
.8 1 1 :F
4 lw
66.5 443.5 1.5 @e
.6 1 1 :F
66.5 443.5 0.5 @e
.4 1 1 :F
3 lw
66.5 443.5 1.5 @i
0 0 :M
 grestore
0 G
.016 lw
66.5 443.5 3 @e
0 0 :M
 gsave newpath
matrix currentmatrix 63 520 translate 7 7 div 1 scale 4 4 4 270 630 arc
4 4 lineto
setmatrix closepath eoclip
.8 1 1 :F
4 lw
66.5 523.5 1.5 @e
.6 1 1 :F
66.5 523.5 0.5 @e
.4 1 1 :F
3 lw
66.5 523.5 1.5 @i
0 0 :M
 grestore
0 G
.016 lw
66.5 523.5 3 @e
0 0 :M
 gsave newpath
matrix currentmatrix 23 480 translate 6 7 div 1 scale 4 4 4 270 630 arc
4 4 lineto
setmatrix closepath eoclip
.8 1 1 :F
4 lw
2 3 26 483.5 @f
.6 1 1 :F
25.5 483.5 0.5 @e
.4 1 1 :F
3 lw
25.5 483.5 1.5 @i
0 0 :M
 grestore
0 G
.016 lw
5 6 26 483.5 @f
0 0 :M
 gsave newpath
matrix currentmatrix 103 480 translate 6 7 div 1 scale 4 4 4 270 630 arc
4 4 lineto
setmatrix closepath eoclip
.8 1 1 :F
4 lw
2 3 106 483.5 @f
.6 1 1 :F
105.5 483.5 0.5 @e
.4 1 1 :F
3 lw
105.5 483.5 1.5 @i
0 0 :M
 grestore
0 G
.016 lw
5 6 106 483.5 @f
0 0 :M
 gsave newpath
matrix currentmatrix 85 447 translate 7 6 div 1 scale 3 3 3 270 630 arc
3 3 lineto
setmatrix closepath eoclip
.8 1 1 :F
4 lw
3 2 88.5 450 @f
.6 1 1 :F
88.5 449.5 0.5 @e
.4 1 1 :F
3 lw
88.5 449.5 1.5 @i
0 0 :M
 grestore
0 G
.016 lw
6 5 88.5 450 @f
0 0 :M
 gsave newpath
matrix currentmatrix 98 462 translate 7 6 div 1 scale 3 3 3 270 630 arc
3 3 lineto
setmatrix closepath eoclip
.8 1 1 :F
4 lw
3 2 101.5 465 @f
.6 1 1 :F
101.5 464.5 0.5 @e
.4 1 1 :F
3 lw
101.5 464.5 1.5 @i
0 0 :M
 grestore
0 G
.016 lw
6 5 101.5 465 @f
0 0 :M
 gsave newpath
matrix currentmatrix 97 500 translate 7 7 div 1 scale 4 4 4 270 630 arc
4 4 lineto
setmatrix closepath eoclip
.8 1 1 :F
4 lw
100.5 503.5 1.5 @e
.6 1 1 :F
100.5 503.5 0.5 @e
.4 1 1 :F
3 lw
100.5 503.5 1.5 @i
0 0 :M
 grestore
0 G
.016 lw
100.5 503.5 3 @e
0 0 :M
 gsave newpath
matrix currentmatrix 83 514 translate 7 7 div 1 scale 4 4 4 270 630 arc
4 4 lineto
setmatrix closepath eoclip
.8 1 1 :F
4 lw
86.5 517.5 1.5 @e
.6 1 1 :F
86.5 517.5 0.5 @e
.4 1 1 :F
3 lw
86.5 517.5 1.5 @i
0 0 :M
 grestore
0 G
.016 lw
86.5 517.5 3 @e
0 0 :M
 gsave newpath
matrix currentmatrix 44 515 translate 7 7 div 1 scale 4 4 4 270 630 arc
4 4 lineto
setmatrix closepath eoclip
.8 1 1 :F
4 lw
47.5 518.5 1.5 @e
.6 1 1 :F
47.5 518.5 0.5 @e
.4 1 1 :F
3 lw
47.5 518.5 1.5 @i
0 0 :M
 grestore
0 G
.016 lw
47.5 518.5 3 @e
0 0 :M
 gsave newpath
matrix currentmatrix 29 502 translate 7 7 div 1 scale 4 4 4 270 630 arc
4 4 lineto
setmatrix closepath eoclip
.8 1 1 :F
4 lw
32.5 505.5 1.5 @e
.6 1 1 :F
32.5 505.5 0.5 @e
.4 1 1 :F
3 lw
32.5 505.5 1.5 @i
0 0 :M
 grestore
0 G
.016 lw
32.5 505.5 3 @e
0 0 :M
 gsave newpath
matrix currentmatrix 28 460 translate 7 7 div 1 scale 4 4 4 270 630 arc
4 4 lineto
setmatrix closepath eoclip
.8 1 1 :F
4 lw
31.5 463.5 1.5 @e
.6 1 1 :F
31.5 463.5 0.5 @e
.4 1 1 :F
3 lw
31.5 463.5 1.5 @i
0 0 :M
 grestore
0 G
.016 lw
31.5 463.5 3 @e
0 0 :M
 gsave newpath
matrix currentmatrix 42 446 translate 7 6 div 1 scale 3 3 3 270 630 arc
3 3 lineto
setmatrix closepath eoclip
.8 1 1 :F
4 lw
3 2 45.5 449 @f
.6 1 1 :F
45.5 448.5 0.5 @e
.4 1 1 :F
3 lw
45.5 448.5 1.5 @i
0 0 :M
 grestore
0 G
.016 lw
6 5 45.5 449 @f
1 G
65.5 483.5 13.5 @i
0 G
1 lw
65.5 483.5 13 @e
42 455 52 18 rC
gR
gS 37 419 62 54 rC
42 469 :M
f1_18 sf
1.338(DIRC)A
gR
gS 0 0 730 552 rC
1 G
63 378 59 37 rF
0 G
63.5 378.5 58 36 rS
65 383 56 28 rC
gR
gS 60 347 66 64 rC
78 393 :M
f0_12 sf
(HIGH)S
65 407 :M
-.113(VOLTAGE)A
gR
gS 0 0 730 552 rC
0 .8 .8 :F
np 78 448 :M
78 437 :L
87 441 :L
78 448 :L
eofill
-1 -1 79 447 1 1 95 414 @b
0 G
1 G
8 377 50 51 rF
0 G
8.5 377.5 49 50 rS
11 388 45 30 rC
gR
gS 6 352 55 66 rC
20 399 :M
f0_14 sf
-.114(LED)A
14 414 :M
.066(Pulser)A
gR
gS 0 0 730 552 rC
0 0 .467 :F
np 30 461 :M
27 450 :L
35 451 :L
30 461 :L
eofill
-1 -1 31 460 1 1 33 428 @b
0 G
0 0 .467 :F
np 44 448 :M
35 441 :L
43 437 :L
44 448 :L
eofill
33 429 -1 1 44 446 1 33 428 @a
0 G
0 0 .467 :F
np 66 442 :M
55 442 :L
58 434 :L
66 442 :L
eofill
33 429 -1 1 65 441 1 33 428 @a
:a
0 0 32 0<0000000000000000><0000000000000000><FFFFFF0000FF0000><0000000000000000>32<FFFFFF0000FF0000><FFFFFFFFFFFFFFFFFF000000000000FFFFFF000000000000>[1 .6 .4][1 1 1]
:d
139 301 71 55 rF
:e
0 G
139.5 301.5 70 54 rS
140 315 71 30 rC
gR
gS 135 279 81 66 rC
148 326 :M
f0_14 sf
.158(Detector)A
152 341 :M
.148(Control)A
gR
gS 0 0 730 552 rC
:a
0 32 32 0<0000000000000000><FF00FF00FF00FF00><FF00FF00FF00FF00><0000000000000000>32<FF00FF00FF00FF00><FFFFFF000000FFFFFF000000FFFFFF000000FFFFFF000000>[1 .4 0][1 1 1]
:d
np 183 303 :M
177 289 :L
189 289 :L
183 303 :L
eofill
-3 -3 185 298 3 3 182 229 @b
32<FF00FF00FF00FF00><FFFFFF000000FFFFFF000000FFFFFF000000FFFFFF000000>fg bk
:b
:e
0 .8 .8 :F
np 164 227 :M
170 241 :L
158 241 :L
164 227 :L
eofill
-3 -3 166 302 3 3 163 232 @b
0 G
:a
0 32 32 0<0000000000000000><FF00FF00FF00FF00><FF00FF00FF00FF00><0000000000000000>32<FF00FF00FF00FF00><FFFFFF000000FFFFFF000000FFFFFF000000FFFFFF000000>[1 .4 0][1 1 1]
:d
np 183 380 :M
177 366 :L
189 366 :L
183 380 :L
eofill
-3 -3 185 375 3 3 182 356 @b
32<FF00FF00FF00FF00><FFFFFF000000FFFFFF000000FFFFFF000000FFFFFF000000>fg bk
:b
:e
0 .8 .8 :F
np 164 355 :M
170 369 :L
158 369 :L
164 355 :L
eofill
-3 -3 166 379 3 3 163 360 @b
0 G
:a
0 32 32 0<0000000000000000><FF00FF00FF00FF00><FF00FF00FF00FF00><0000000000000000>32<FF00FF00FF00FF00><FFFFFF000000FFFFFF000000FFFFFF000000FFFFFF000000>[1 .4 0][1 1 1]
:d
np 116 319 :M
130 313 :L
130 325 :L
116 319 :L
eofill
121 321 -3 3 140 318 3 121 318 @a
32<FF00FF00FF00FF00><FFFFFF000000FFFFFF000000FFFFFF000000FFFFFF000000>fg bk
:b
:e
0 .8 .8 :F
np 140 308 :M
126 314 :L
126 302 :L
140 308 :L
eofill
117 310 -3 3 135 307 3 117 307 @a
0 G
:a
0 32 32 0<0000000000000000><FF00FF00FF00FF00><FF00FF00FF00FF00><0000000000000000>32<FF00FF00FF00FF00><FFFFFF000000FFFFFF000000FFFFFF000000FFFFFF000000>[1 .4 0][1 1 1]
:d
np 107 379 :M
113 365 :L
121 374 :L
107 379 :L
eofill
-3 -3 113 376 3 3 136 349 @b
32<FF00FF00FF00FF00><FFFFFF000000FFFFFF000000FFFFFF000000FFFFFF000000>fg bk
:b
:e
0 .8 .8 :F
np 139 337 :M
133 351 :L
125 342 :L
139 337 :L
eofill
-3 -3 99 378 3 3 133 340 @b
0 G
11 284 108 28 rC
gR
gS 6 248 118 64 rC
13 294 :M
f0_12 sf
.497 .05(Water transmission)J
45 308 :M
.183 .018(test cell)J
gR
gS 0 0 730 552 rC
.867 0 0 :F
np 320 111 :M
334 105 :L
334 117 :L
320 111 :L
eofill
325 113 -3 3 468 110 3 325 110 @a
0 G
85 537 32 14 rC
gR
gS 80 501 42 50 rC
85 547 :M
f0_12 sf
.221(LEDs)A
gR
gS 0 0 730 552 rC
np 89 521 :M
99 527 :L
91 532 :L
89 521 :L
eofill
90 523 -1 1 101 536 1 90 522 @a
10.5 200.5 50 38 rS
67.5 199.5 122.5 237.5 17.5 @s
12 205 47 30 rC
gR
gS 7 169 57 66 rC
18 216 :M
f0_14 sf
.253(Hard-)A
20 231 :M
.223(ware)A
gR
gS 71 204 47 30 rC
gR
gS 66 168 57 66 rC
80 215 :M
f0_14 sf
.11(Soft-)A
79 230 :M
.223(ware)A
gR
endp
end
%%EndDocument

 endTexFig
 868 2754 a Fh(Figure)16 b(5:)951 2828 y(10)p eop
%%Page: 11 11
11 10 bop 79 53 a Ff(whic)o(h)12 b(m)o(ust)f(run)g(at)g
Fd(=sim)g Ff(10KHz)g(to)g(minimize)i(loss)e(of)g(luminosit)o(y)l(,)i(m)
o(ust)e(pre-pro)q(cess)h(data)e(in)j(the)e(fron)o(t-)79
110 y(end)19 b(CPUs)f(in)h(order)f(to)g(matc)o(h)f(the)i(2KHz)f(online)
i(farm)d(output)h(rate.)29 b(There)18 b(is)h(therefore)f(a)g(need)h(to)
79 166 y(push)d(co)q(de)g(dev)o(elop)q(ed)h(in)f(the)f(unix)h(en)o
(vironmen)o(t)g(bac)o(k)f(in)o(to)g(the)g(micro-pro)q(cessors.)79
231 y(T)l(esting)20 b(co)q(de)f(in)h(the)f(micros)g(will)h(b)q(e)g(a)e
(main)i(task)e(of)g(the)h(online)i(test)d(stand.)31 b(By)19
b(ha)o(ving)g(unix)h(and)79 287 y(micro-pro)q(cessor)f(v)o(ersions)g
(of)f(the)g(same)g(co)q(de,)i(w)o(e'll)f(b)q(e)g(able)h(to)e(v)o(erify)
g(the)h(co)q(de)g(and)g(determine)g(it's)79 344 y(p)q(erformance.)h
(All)14 b(algorithms)f(will)i(b)q(e)e(dev)o(elop)q(ed)i(in)f(standard)f
(C/C++,)g(and)g(so)g(will)h(b)q(e)g(transp)q(ortable)79
400 y(to)i(the)g(micros)g(without)g(ma)s(jor)f(re-writing.)23
b(Additional)17 b(con)o(trols)f(to)g(co)q(ordinate)g(di\013eren)o(t)g
(micros)g(p)q(er-)79 457 y(forming)h(di\013eren)o(t)f(tasks)g(will)i(b)
q(e)g(dev)o(elop)q(ed)g(in)f(conjunction)h(with)f(the)f(Babar)h(online)
h(core.)24 b(T)l(ests)16 b(and)79 513 y(comparisons)k(of)f(di\013eren)o
(t)h(compilers)h(will)g(b)q(e)f(p)q(ossible)i(in)e(a)f('real-w)o(orld')
h(en)o(vironmen)o(t,)g(and)g(w)o(e)f(will)79 570 y(b)q(egin)c
(addressing)g(the)f(issue)h(of)e(ho)o(w)h(to)f(store)g(and)i(do)o
(wnload)f(binary)g(executable)h(\014les)g(and)f(data)g(\014les)h(to)79
626 y(the)h(micros.)-28 784 y Fe(5)81 b(Calibration)26
b(Soft)n(w)n(are)-28 885 y Ff(The)19 b(calibration)g(system)g
(structure)f(for)g(Babar)g(is)h(only)g(v)m(aguely)g(de\014ned.)32
b(F)l(urthermore,)18 b(the)h(DIR)o(C)f(group)-28 942
y(hasn't)i(y)o(et)g(clearly)h(de\014ned)h(the)f(requiremen)o(ts)g(of)f
(the)g(calibration)i(system.)35 b(As)20 b(the)h(time)f(a)o(v)m(ailable)
j(for)c(a)-28 998 y(calibration)14 b(run)g(is)g(v)o(ery)f(short)f(\()p
Fc(\030)h Ff(1)g(min)o(ute\),)h(extensiv)o(e)g(co)q(de)g(dev)o(elopmen)
o(t)g(and)f(testing)g(are)g(necessary)l(.)20 b(The)-28
1055 y(online)g(test)d(stand)h(will)h(allo)o(w)g(us)f(to)f(test)h(p)q
(ossible)h(solutions,)g(and)g(to)e(answ)o(er)g(some)h(of)g(the)g(op)q
(en)g(questions)-28 1111 y(questions)e(ab)q(out)f(calibration,)h
(namely;)20 1194 y(1.)23 b(Goals.)54 b(What)17 b(are)g(realistic)i
(goals)e(for)g(dedicated)i(calibration)g(runs?)27 b(Whic)o(h)19
b(of)e(the)g(necessary)h(mea-)79 1251 y(suremen)o(ts)13
b(m)o(ust)g(b)q(e)g(done)h(online)h(in)f(a)e(dedicated)j(calibration)f
(run,)f(and)h(whic)o(h)g(are)e(b)q(est)i(done)f(b)o(y)g(o\017ine)79
1307 y(monitoring)j(of)e(collision)k(data?)i(P)o(ossible)c(goals)f
(migh)o(t)g(b)q(e:)123 1380 y Fc(\017)24 b Ff(Detector)15
b('liv)o(e')g(tests:)170 1436 y(W)l(e)i(need)g(to)f(kno)o(w)g(if)h(the)
g(detector)f(is)h(still)h(w)o(orking)e(after)g(a)g(sh)o(utdo)o(wn)g(or)
g(access.)24 b(This)17 b(m)o(ust)f(b)q(e)170 1493 y(done)g(online.)123
1557 y Fc(\017)24 b Ff(Discriminator)16 b(threshold)g(setting:)170
1614 y(This)g(m)o(ust)f(b)q(e)h(done)f(online.)123 1679
y Fc(\017)24 b Ff(Cross-talk)15 b(determination:)170
1735 y(This)h(m)o(ust)f(b)q(e)h(done)f(online.)123 1800
y Fc(\017)24 b Ff(TDC)15 b(linearit)o(y)h(and)g(slop)q(e:)170
1856 y(This)g(can)g(b)q(est)f(b)q(e)h(measured)f(online.)123
1921 y Fc(\017)24 b Ff(ADC)15 b(pulse)i(heigh)o(t/gain)e(measuremen)o
(t:)170 1977 y(This)h(needs)g(to)f(b)q(e)h(done)f(online,)i(and)e(rep)q
(eated)h(o\017ine.)123 2042 y Fc(\017)24 b Ff(TDC/ADC)14
b(slewing:)170 2098 y(This)i(needs)g(to)f(b)q(e)h(done)f(online,)i(and)
e(rep)q(eated)h(o\017ine.)123 2163 y Fc(\017)24 b Ff(Searc)o(h)16
b(for)e(hot/dead)h(c)o(hannels:)170 2219 y(This)h(needs)g(to)f(b)q(e)h
(done)f(online,)i(but)e(migh)o(t)g(get)g(re\014ned)h(o\017ine.)123
2284 y Fc(\017)24 b Ff(Channel)17 b(e\016ciency)f(map:)170
2340 y(This)g(can)g(b)q(e)f(measured)h(crudely)g(online,)h(but)e(will)i
(need)f(to)f(b)q(e)g(re\014ned)i(o\017ine.)123 2405 y
Fc(\017)24 b Ff(T0:)170 2461 y(This)16 b(can)g(b)q(e)f(measured)h
(crudely)g(online,)h(but)e(will)i(need)f(to)f(b)q(e)g(re\014ned)i
(o\017ine.)123 2526 y Fc(\017)24 b Ff(Time)16 b(resolution:)170
2583 y(This)g(can)g(b)q(e)f(measured)h(crudely)g(online,)h(but)e(will)i
(need)f(to)f(b)q(e)g(re\014ned)i(o\017ine.)123 2647 y
Fc(\017)24 b Ff(Bar)15 b(atten)o(uation:)170 2704 y(This)h(is)g(b)q
(est)f(measured)h(o\017ine.)951 2828 y Fh(11)p eop
%%Page: 12 12
12 11 bop 123 53 a Fc(\017)24 b Ff(Alignmen)o(t:)170
110 y(This)16 b(is)g(b)q(est)f(measured)h(o\017ine.)123
177 y Fc(\017)24 b Ff(W)l(ater)15 b(transmission:)170
233 y(This)f(m)o(ust)f(b)q(e)h(measured)f(online,)i(but)f(should)g(b)q
(e)g(done)f(through)g(the)h(detector)f(con)o(trol)g(system,)f(not)170
290 y(a)j(dedicated)i(calibration)f(run.)20 367 y(2.)23
b(Con)o(trol:)79 423 y(What)g(users)g(con)o(trols)f(are)h(needed)h(for)
f(dedicated)h(calibration)g(runs)f(that)g(aren't)f(already)h(a)o(v)m
(ailable)79 480 y(through)18 b(the)g(general)g(run)g(con)o(trol?)29
b(What)17 b(hardw)o(are)h(path)f(should)i(b)q(e)g(used)f(for)g(sending)
h(calibration)79 536 y(con)o(trol)c(signals,)h(run)f(con)o(trol)g(or)g
(detector)g(con)o(trol?)20 613 y(3.)23 b(Database:)79
670 y(What)16 b(data)g(do)g(w)o(e)g(need)i(to)d(store)h(for)g(the)g
(DIR)o(C,)g(and)h(in)g(what)f(format?)23 b(This)17 b(issue)h(m)o(ust)d
(b)q(e)i(settled)79 726 y(in)f(conjunction)g(with)g(the)f(DIR)o(C)h
(o\017ine.)20 804 y(4.)23 b(Hardw)o(are:)79 860 y(What)16
b(ph)o(ysical)h(apparatus)f(is)h(necessary)f(for)g(calibration?)25
b(Do)16 b(w)o(e)g(need)h(an)o(ything)g(b)q(esides)h(electronics)79
916 y(pulsing)h(and)d(a)h(uniform)g(illumination)i(the)e(image)g(plane)
h(with)f(LEDs?)25 b(Are)17 b(the)g(white)g(plastic)g(spheres)79
973 y(adequate)f(for)f(image)g(plane)i(illumination?)25
b(What)14 b(w)o(ould)i(b)q(e)h(the)e(purp)q(ose)h(of)f(laser)h
(pulsing,)h(and)f(is)g(the)79 1029 y(laser)g(necessary?)20
1107 y(5.)23 b(Electronics:)79 1163 y(What)17 b(con)o(trol)g
(electronics)i(is)e(needed)i(sp)q(eci\014cally)h(for)d(calibration?)28
b(F)l(or)17 b(LED)g(pulsing,)i(what)e(are)g(the)79 1219
y(requiremen)o(ts)e(in)h(terms)e(of)g(pulse)i(heigh)o(t,)f(pulse)h
(width,)f(and)g(pulse)h(time)f(adjustmen)o(t?)20 b(The)15
b(calibration)79 1276 y(system)j(of)f(Prot2)g(suggests)g(that)g(a)h
(pulse)h(width)f Fc(\024)h Ff(5nSec)f(is)g(necessary)g(to)g(calibrate)g
(the)g(TDCs,)g(and)79 1332 y(adjustmen)o(t)e(of)f(pulse)i(heigh)o(t)f
(o)o(v)o(er)f(2)h(orders)f(of)h(magnitude)g(is)h(necessary)f(to)f
(correctly)h(adjust)f(the)h(ligh)o(t)79 1389 y(in)o(tensit)o(y)l(.)k
(Adjustable)15 b(pulse)g(dela)o(ys)f(b)q(et)o(w)o(een)g(0)f(and)h
(100nSec)f(is)i(necessary)e(to)g(measure)h(TDC)f(linearit)o(y)79
1445 y(and)j(slop)q(e.)-28 1605 y Fe(6)81 b(Collab)r(oration)27
b(outside)g(the)f(ba)n(y)h(area)-28 1707 y Ff(P)o(eople)17
b(outside)g(the)f(ba)o(y)g(area)g(ma)o(y)g(participate)h(in)g(the)g
(test)e(stand)i(in)g(sev)o(eral)f(w)o(a)o(ys.)23 b(First,)15
b(satellite)j(instal-)-28 1763 y(lations)i(could)h(b)q(e)f(prepared)g
(at)f(remote)g(sites)h(with)g(a)f(subset)h(of)f(the)h(hardw)o(are)e
(used)j(at)e(LBL.)h(These)g(sites)-28 1819 y(w)o(ould)15
b(allo)o(w)g(indep)q(enden)o(t)i(dev)o(elopmen)o(t)f(w)o(ork,)d(or)i
(exploitation)h(of)e(the)h(soft)o(w)o(are)e(dev)o(elop)q(ed)j(at)e(LBL)
i(for)e(de-)-28 1876 y(tector/electronics)g(tests.)19
b(Remote)14 b(access)h(to)e(the)h(LBL)h(test)f(b)q(enc)o(h)h(will)g(b)q
(e)g(p)q(ossible)h(for)d(sp)q(ecial)j(tests.)j(DIR)o(C)-28
1932 y(p)q(ersonnel)c(in)o(terested)g(in)f(D)o(A)o(Q)g(could)h(arrange)
e(to)g(visit)i(LBL)f(and)g(w)o(ork)f(with)i(the)e(test)h(stand)f(after)
h(the)f(spring)-28 1989 y(of)i(1996.)j(D)o(A)o(Q/online)f(progress)d(w)
o(ould)i(b)q(e)g(rep)q(orted)f(regularly)h(through)f(DIR)o(C)g(notes)g
(and)g(presen)o(tations.)-28 2149 y Fe(7)81 b(Conclusion)-28
2250 y Ff(W)l(e)17 b(ha)o(v)o(e)g(presen)o(ted)g(our)g(prop)q(osal)g
(for)g(constructing)g(a)g(DIR)o(C)g(D)o(A)o(Q/online)h(test)f(b)q(enc)o
(h)h(at)e(LBL.)i(This)g(test)-28 2307 y(b)q(enc)o(h)g(w)o(ould)g(pro)o
(vide)f(the)h(en)o(vironmen)o(t)f(necessary)g(for)g(the)g(testing)g
(and)g(dev)o(elopmen)o(t)h(of)f(the)g(DIR)o(C)g(D)o(A)o(Q)-28
2363 y(and)k(calibration)h(systems.)36 b(The)20 b(goal)h(will)h(b)q(e)g
(to)e(ha)o(v)o(e)g(a)g(w)o(orking)h(system)f(in)h(time)g(for)f(the)h
(1998)f(CERN)-28 2419 y(3-sector)14 b(tests.)19 b(If)c(funds)g(are)f
(appro)o(v)o(ed,)g(the)g(test)g(b)q(enc)o(h)i(construction)f(w)o(ould)f
(b)q(egin)i(early)f(in)g(1996.)k(The)c(test)-28 2476
y(b)q(enc)o(h)h(m)o(ust)f(b)q(e)h(furnished)g(with)g(protot)o(yp)q(e)e
(DIR)o(C)i(and)f(Babar)g(D)o(A)o(Q)g(electronics.)951
2828 y Fh(12)p eop
%%Page: 13 13
13 12 bop -28 53 a Fe(A)81 b(DIR)n(C)27 b(D)n(A)n(Q)e(Hardw)n(are)i
(Summary)-28 155 y Ff(The)18 b(DIR)o(C)h(electronics)h(m)o(ust)d(p)q
(erform)h(a)g(n)o(um)o(b)q(er)h(of)f(tasks.)28 b(All)20
b(the)e(tasks)g(are)g(con)o(trolled)h(b)o(y)f(the)g(on-line)-28
211 y(soft)o(w)o(are)c(and)i(the)g(fast)f(con)o(trol)h(system,)f(and)i
(the)f(\014nal)g(pro)q(duct,)h(the)f(ra)o(w)f(data,)g(is)h(in)h(turn)f
(deliv)o(ered)i(to)d(the)-28 268 y(on-line)i(soft)o(w)o(are)c(b)q
(efore)j(b)q(eing)g(sen)o(t)f(to)g(the)g(lev)o(el)i(three)e(trigger)g
(for)f(further)h(analysis.)40 324 y(Starting)g(with)g(the)g(PMT)f(and)i
(going)f(to)o(w)o(ards)e(the)i(ph)o(ysics)h(analysis)g(the)f(follo)o
(wing)g(tasks)g(are)f(p)q(erformed:)20 401 y(1.)23 b(Detection)16
b(of)e(a)h(single)i(photo)q(electrons)f(p)q(erformed)f(b)o(y)g(the)g
(PMT.)20 479 y(2.)23 b(Detection)18 b(of)f(the)g(PMT)g(signal)h(and)f
(noise)h(rejection)g(b)o(y)f(the)h(analog)f(electronics,)i(whic)o(h)f
(consists)f(of)g(a)79 535 y(zero)e(crossing)h(discriminator)g(and)f(a)g
(sampling)h(ADC.)20 612 y(3.)23 b(Up)q(on)11 b(detection)g(of)f(a)g
(PMT)g(signal)h(a)f(time)g(stamp)g(corresp)q(onding)h(to)f(the)g
(signal)i(arriv)m(al)f(time)f(is)h(generated)79 669 y(b)o(y)k(a)g(TDC.)
f(The)i(amplitude)g(of)f(the)h(1/64)e(of)g(the)i(signals)g(will)g(b)q
(e)g(digitized)i(b)o(y)d(an)g(ADC.)20 746 y(4.)23 b(Since)e(the)d
(BaBar)h(ev)o(en)o(t)f(decision)j(tak)o(es)d(up)h(to)f(11.5)g
(microseconds)h(and)g(the)g(PEP)g(I)q(I)h(b)q(eam)f(crossing)79
802 y(frequency)j(is)f(4.2)f(nanoseconds,)i(the)f(time)g(stamp)f(and)h
(the)g(amplitude)i(v)m(alue)f(need)f(to)f(b)q(e)i(stored)e(in)79
859 y(FIF)o(Os.)g(The)c(presen)o(t)g(system)f(has)g(a)g(digital)i(FIF)o
(O)e(to)g(store)f(the)i(time)g(stamp)e(and)i(an)f(analog)g(FIF)o(O)h
(to)79 915 y(store)f(the)g(analog)g(v)m(alue)20 993 y(5.)23
b(The)d(electronics)g(con)o(tin)o(uously)g(examine)g(the)f(con)o(ten)o
(t)f(of)h(the)g(TDC)g(FIF)o(O)f(to)h(determine)h(if)g(the)f(data)79
1049 y(stored)j(lies)h(within)g(the)f(maxim)o(um)f(trigger)h(latency)g
(\(11.5us\).)38 b(When)22 b(the)g(data)g(stored)f(within)i(the)79
1105 y(FIF)o(Os)15 b(w)o(as)g(captured)g(prior)g(to)g(the)g(p)q
(ossible)i(trigger)e(it)g(is)h(discarded.)20 1183 y(6.)23
b(Up)q(on)16 b(reception)g(of)f(a)h(Lev)o(el)g(1)f(Accept)h(trigger)f
(signal)h(the)g(zero)f(suppressed)h(data)f(asso)q(ciated)h(with)g(this)
79 1239 y(particular)d(trigger)f(is)g(stored)g(in)h(an)f(ev)o(en)o(t)g
(bu\013er.)18 b(The)13 b(Lev)o(el)g(1)f(accept)g(trigger)f(signal)i
(has,)g(as)e(men)o(tioned)79 1296 y(ab)q(o)o(v)o(e,)18
b(up)h(to)f(11.5us)f(latency)h(o)o(v)o(er)g(the)g(ev)o(en)o(t)g
(itself.)30 b(11.5us)17 b(is)h(the)h(maxim)o(um)f(time)g(tak)o(en)g(to)
g(mak)o(e)79 1352 y(the)g(decision)h(that)e(there)h(w)o(as)f(indeed)i
(a)e(p)q(ossible)j(ph)o(ysics)e(ev)o(en)o(t.)27 b(The)18
b(minim)o(um)h(time)f(to)f(mak)o(e)g(that)79 1409 y(decision)j(is)f
(\(so)f(far\))f(10.5us.)28 b(Therefore,)19 b(the)f(electronics)i
(stores)d(in)i(the)g(ev)o(en)o(t)f(bu\013er)g(a)g(time)h(slice)g(of)79
1465 y(data)f(w)o(orth)g(1us)g(spanning)i(from)d(10.5us)h(to)g(11.5us.)
29 b(Since)20 b(another)e(Lev)o(el)h(1)g(accept)f(trigger)h(ma)o(y)e(b)
q(e)79 1521 y(receiv)o(ed)g(b)q(efore)e(the)g(ev)o(en)o(t)g(bu\013er)h
(is)f(read)g(out,there)g(are)g(sev)o(eral)g(ev)o(en)o(t)g(bu\013ers.)20
1599 y(7.)23 b(The)15 b(data)f(is)h(read)f(out)g(serially)i(from)e(the)
h(ev)o(en)o(t)f(bu\013er)g(and)h(sen)o(t)f(to)g(a)g(m)o(ultiplexer)j
(whic)o(h)e(accepts)g(data)79 1655 y(from)g(all)h(c)o(hannels)g(within)
h(a)d(sector)h(and)h(send)f(them)g(to)g(the)g(D)o(A)o(Q)g(o)o(v)o(er)f
(a)h(single)i(\014b)q(er)f(optic.)20 1732 y(8.)23 b(The)14
b(serial)h(data)e(from)h(all)g(c)o(hannels)h(within)g(a)f(sector)f(is)i
(receiv)o(ed)g(b)o(y)f(the)g(D)o(A)o(Q)f(electronics,)i(it)g(is)f(dem)o
(ul-)79 1789 y(tiplexed)k(so)e(that)g(the)g(data)f(from)h(eac)o(h)g(c)o
(hannel)i(or)d(group)h(of)g(c)o(hannels)i(can)e(b)q(e)h(written)f(in)o
(to)g(a)g(sp)q(eci\014c)79 1845 y(memory)f(lo)q(cation)h(of)f(the)g(R)o
(OM.)20 1922 y(9.)23 b(Once)17 b(the)f(data)f(is)h(stored)f(in)i
(memory)e(within)i(the)f(D)o(A)o(Q)f(subsystem)h(it)g(can)f(b)q(e)i
(formatted)d(and)i(sen)o(t)g(to)79 1979 y(the)g(lev)o(el)g(3)f(trigger)
g(via)g(a)g(net)o(w)o(ork.)-3 2056 y(10.)23 b(T)l(o)c(con)o(trol)f(the)
h(data)f(acceptance)h(and)g(the)g(data)f(\015o)o(w)g(the)g(soft)o(w)o
(are)f(and)i(hardw)o(are)f(are)g(v)o(ery)h(tigh)o(tly)79
2113 y(coupled.)34 b(Based)19 b(on)h(calibration)g(runs)g(thresholds)g
(need)g(to)e(b)q(e)i(adjusted,)g(c)o(hannels)h(disabled)g(and)e(so)79
2169 y(forth.)35 b(The)21 b(en)o(tire)g(BaBar)f(detector)g(m)o(ust)g(b)
q(e)h(sync)o(hronized)h(and)e(time)h(critical)h(signals)f(need)h(to)d
(b)q(e)79 2225 y(distributed.)30 b(The)19 b(system)e(needs)i(to)f(b)q
(e)g(monitored)g(as)g(w)o(ell.)30 b(All)19 b(those)f(functions)h(are)e
(originated)i(b)o(y)79 2282 y(the)d(soft)o(w)o(are)d(and)i(distributed)
i(via)f(the)f(R)o(OM)g(do)o(wn)g(to)g(the)g(fron)o(t)f(end)i
(electronics.)40 2359 y(The)22 b(Electronics)h(Hardw)o(are)e(for)g(the)
h(DIR)o(C)g(is)g(designed)h(to)e(b)q(e)i(mo)q(dular)f(at)f(the)h(DIR)o
(C)g(sector)f(lev)o(el.)-28 2416 y(There)15 b(are)f(so-called)i
(on-detector)e(electronics)i(and)f(o\013-detector)f(electronics)h(for)f
(eac)o(h)h(of)f(the)h(12)f(sectors.)19 b(The)-28 2472
y(on-detector)d(electronics)j(p)q(erforms)d(tasks)g(2-8)g(describ)q(ed)
j(ab)q(o)o(v)o(e)d(and)h(tasks)f(9)g(and)h(10)f(are)g(p)q(erformed)h(b)
o(y)g(the)-28 2528 y(o\013-detector)d(electronics.)40
2585 y(The)20 b(on-detector)f(electronics)i(is)f(housed)g(in)h(a)e(c)o
(hassis)h(con)o(taining)g(a)f(maxim)o(um)h(of)f(16)g(fron)o(t-end)g
(cards)-28 2641 y(and)h(a)g("crate)f(con)o(troller",)h(the)g(c)o
(hannel)h(m)o(ultiplexer.)36 b(Eac)o(h)20 b(fron)o(t-)f(end)h(card)g(p)
q(erforms)g(tasks)f(2-6)g(for)h(64)-28 2698 y(PMT)e(c)o(hannels.)33
b(Therefore,)20 b(as)f(far)f(as)h(the)g(data)g(path)g(is)g(concerned,)i
(the)f(fron)o(t-end)f(includes)i(the)e(analog)951 2828
y Fh(13)p eop
%%Page: 14 14
14 13 bop -28 53 a Ff(electronics,)16 b(TDC,)d(FIF)o(Os;)i(analog)f
(and)h(digital,)g(digitizer,)h(selectiv)o(e)g(readout)f(logic,)g(and)g
(ev)o(en)o(t)f(bu\013ers.)20 b(The)-28 110 y(crate)13
b(con)o(troller)h(accepts)g(the)f(serialized)j(data)d(from)g(16)g(fron)
o(t-end)g(cards)g(and)h(m)o(ultiplexes)i(them)d(in)o(to)h(one)f(line)
-28 166 y(going)i(to)g(the)g(o\013-detector)f(electronics.)40
223 y(The)f(data)e(arriv)o(e)h(at)g(the)g(o\013-detector)f(electronics)
j(on)e(the)h(p)q(ersonalit)o(y)g(mo)q(dule.)20 b(There)12
b(it)h(is)f(dem)o(ultiplexed)-28 279 y(and)h(formatted)f(to)h(b)q(e)h
(written)f(in)o(to)g(the)g(R)o(OM's)g(video)h(memory)l(.)19
b(The)13 b(data)g(stored)f(in)i(the)f(video)h(memory)f(can)-28
336 y(then)k(b)q(e)g(examined)g(b)o(y)g(the)f(lo)q(cal)i(P)o(o)o(w)o
(er)d(PC)h(or)g(directly)i(transferred)e(o)o(v)o(er)g(the)g(VME)g(bus)h
(to)f(a)g(commercial)-28 392 y(pro)q(cessor.)40 449 y(Of)i(course,)g
(all)g(the)g(actions)f(describ)q(ed)j(ab)q(o)o(v)o(e)d(are)g(started)f
(b)o(y)i(soft)o(w)o(are)e(calls)i(and)g(prompt)f(signals)h(orig-)-28
505 y(inating)h(from)e(the)i(BaBar)f(fast)f(con)o(trol)h(system.)28
b(The)19 b(D)o(A)o(Q)f(has)g(a)g(single)h(path)f(to)g(comm)o(unicate)g
(with)h(the)-28 561 y(fron)o(t-end)d(via)h(a)f(con)o(trol)g(link)h
(driv)o(en)g(from)f(the)g(p)q(ersonalit)o(y)h(mo)q(dule.)24
b(The)17 b(p)q(ersonalit)o(y)g(mo)q(dule's)g(hardw)o(are)-28
618 y(in)o(terprets)f(signals)g(from)f(the)h(fast)f(con)o(trol)h
(system)f(and)h(commands)g(from)f(the)h(soft)o(w)o(are)e(and)i
(distribute)h(a)e(set)-28 674 y(of)h(op-co)q(des)h(to)f(the)g(fron)o
(t-end)g(cards)g(via)h(the)f(fron)o(t-end)h(crate)f(con)o(troller)g
(\(m)o(ultiplexer\).)25 b(The)16 b(op-co)q(des)h(are)-28
731 y(deco)q(ded)f(b)o(y)g(the)f(fron)o(t-end)g(cards)g(to)g(p)q
(erform)g(sp)q(eci\014c)i(functions)f(\(see)f(list)h(of)f(prop)q(osed)g
(proto)q(col\).)-28 891 y Fe(B)81 b(DIR)n(C)27 b(Electronics)f(T)-7
b(est)27 b(Comp)r(onen)n(ts)20 992 y Ff(1.)c(Analog)16
b(c)o(hip.)79 1049 y(The)i(protot)o(yp)q(e)g(analog)f(c)o(hip,)i(a)f
(single)h(c)o(hannel)g(zero)f(crossing)g(discriminator)h(will)h(b)q(e)e
(tested)g(at)f(LAL)79 1105 y(Orsa)o(y)12 b(in)g(Octob)q(er,)h(1995.)18
b(The)12 b(\014nal)h(c)o(hips)g(with)f(four)g(c)o(hannels)h(will)g(lik)
o(ely)h(b)q(e)f(tested)f(at)f(the)h(factory)f(and)79
1162 y(also)17 b(at)f(LAL)i(for)e(acceptance)i(b)q(efore)f(b)q(eing)h
(moun)o(ted)f(on)g(the)g(fron)o(t-end)f(b)q(oard.)25
b(The)17 b(analog)g(section,)79 1218 y(discriminator)e(and)f(p)q
(ossibly)h(ampli\014er,)g(will)h(b)q(e)e(in)o(tegrated)g(in)g(a)g(four)
f(c)o(hannel)i(c)o(hip)g(designed)g(in)g(Orsa)o(y)l(.)20
1295 y(2.)23 b(TDC)15 b(c)o(hip.)79 1352 y(The)k(protot)o(yp)q(e)g
(TDC,)f(without)h(selectiv)o(e)h(readout,)f(is)h(in)o(tegrated)e(in)i
(a)f(16)f(c)o(hannel)i(c)o(hip.)33 b(It)19 b(will)h(b)q(e)79
1408 y(tested)e(at)f(P)o(aris)g(IV)h(in)g(the)g(next)f(few)h(mon)o(th)f
(using)h(LabView)h(for)d(con)o(trols)i(and)f(measuremen)o(ts.)27
b(The)79 1465 y(\014nal)16 b(v)o(ersion)e(of)g(the)h(TDC)f(will)i
(include)h(the)e(selectiv)o(e)h(readout)e(and)g(will,)i(most)e(lik)o
(ely)l(,)i(b)q(e)g(tested)e(at)g(the)79 1521 y(factory)g(for)h
(functionalit)o(y)h(and)g(then)f(at)g(P)o(aris)g(VI)g(for)g
(acceptance.)20 1598 y(3.)23 b(F)l(ron)o(t-end)15 b(card.)79
1655 y(The)21 b(protot)o(yp)q(e)f(fron)o(t-end)h(card)f(is)i(designed)g
(b)o(y)e(LAL)i(engineers)g(and)e(the)h(debugging)h(will)g(b)q(e)g(done)
79 1711 y(b)o(y)e(LAL)h(in)f(collab)q(oration)h(with)f(P)o(aris)g(VI.)g
(It)g(should)h(incorp)q(orate)f(the)g(protot)o(yp)q(e)f(analog)g(c)o
(hip,)j(the)79 1768 y(protot)o(yp)q(e)d(TDC)g(and)h(a)f(readout)g
(logic)i(implemen)o(ted)g(with)f(discrete)g(ICs.)34 b(Also)19
b(this)i(protot)o(yp)q(e)d(will)79 1824 y(include)23
b(a)d(VME)h(in)o(terface)f(for)g(test)g(purp)q(oses.)37
b(The)21 b(planned)h(completion)f(of)f(testing)h(this)g(b)q(oard)g(is)
79 1880 y(Jan)o(uary)l(,)c(1996.)24 b(The)17 b(\014nal)h(v)o(ersion)f
(of)f(the)h(fron)o(t-end)g(card)g(will)h(ha)o(v)o(e)f(the)g(eigh)o(t)g
(c)o(hannel)h(analog)e(c)o(hip.)79 1937 y(It)f(will)i(b)q(e)f(tested)f
(in)h(F)l(rance)g(and)f(probably)h(will)h(b)q(e)e(used)h(with)g(a)f
(DIR)o(C)g(protot)o(yp)q(e)f(at)h(CERN.)20 2014 y(4.)23
b(DIR)o(C)16 b(Crate)e(con)o(troller)h(\(Multiplexer\).)79
2071 y(A)f(protot)o(yp)q(e)g(design)h(should)g(b)q(e)g(completed)g(in)g
(Decem)o(b)q(er,)g(and)f(testing)g(completed)h(in)g(F)l(ebruary)l(,)g
(1996.)79 2127 y(This)h(will)g(b)q(e)g(tested)f(at)f(Ecole)i(P)o
(olytec)o(hnique)g(where)g(it)f(is)g(designed.)22 b(The)15
b(\014nal)h(v)o(ersion)f(should)h(not)e(b)q(e)79 2184
y(v)o(ery)i(di\013eren)o(t)g(from)f(the)g(protot)o(yp)q(e)g(and)h
(since)h(there)f(are)g(only)g(few)f(\(12)g(plus)i(spares\))e(of)h
(these)f(b)q(oards.)79 2240 y(Ecole)h(P)o(olytec)o(hnique)h(is)e(exp)q
(ected)i(to)d(handle)j(all)f(the)f(testing.)20 2317 y(5.)23
b(P)o(ersonalit)o(y)15 b(mo)q(dule.)79 2374 y(A)20 b(protot)o(yp)q(e)f
(is)i(b)q(eing)g(designed)g(b)o(y)f(LBNL)h(and)f(SLA)o(C.)f(A)h(b)q
(oard)g(should)h(b)q(e)g(tested)e(in)i(Decem)o(b)q(er.)79
2430 y(One)16 b(feature)e(of)h(this)g(protot)o(yp)q(e)f(is)i(that)e(it)
h(can)g(b)q(e)g(used)h(for)e(testing)h(with)g(up)h(to)e(four)g(fron)o
(t-end)h(b)q(oards)79 2487 y(without)e(using)h(the)f(m)o(ultiplexing)j
(and)d(dem)o(ultiplexing)j(functions)e(and)f(the)g(\014b)q(er)h(optic)g
(links.)20 b(Therefore)79 2543 y(without)d(the)f(DIR)o(C)g(crate)g(con)
o(troller.)24 b(Ho)o(w)o(ev)o(er,)15 b(this)i(will)h(require)f(some)f
(in)o(termediate)h(connection)h(to)79 2599 y(a)d(fron)o(t-end)f(crate.)
20 b(The)15 b(\014nal)g(v)o(ersion)g(of)g(the)g(p)q(ersonalit)o(y)g(mo)
q(dule)h(will)h(b)q(e)e(mass)f(pro)q(duced)i(and)f(tested)79
2656 y(since)i(the)e(same)g(design)h(will)h(b)q(e)f(used)f(for)g(the)g
(SVT,)g(DIR)o(C)h(and)f(IFR.)951 2828 y Fh(14)p eop
%%Page: 15 15
15 14 bop 20 53 a Ff(6.)23 b(D)o(A)o(Q)15 b(Board.)79
110 y(A)j(protot)o(yp)q(e)e(exists)i(at)e(LBNL)i(with)g(planned)h
(completion)f(of)f(testing,)g(with)h(the)f(p)q(ersonalit)o(y)h(mo)q
(dule,)79 166 y(in)g(Jan)o(uary)l(,)f(1996.)24 b(The)18
b(\014nal)f(R)o(OM)h(will)g(b)q(e)g(mass)e(pro)q(duced)j(and)e(tested.)
25 b(Ho)o(w)o(ev)o(er)16 b(the)h(\014nal)h(design)79
223 y(cannot)g(b)q(e)g(completed)g(b)q(efore)g(stringen)o(t)f(testing)h
(of)f(the)h(protot)o(yp)q(e)e(with)i(soft)o(w)o(are)e(dev)o(elop)q(ed)j
(for)e(the)79 279 y(exp)q(erimen)o(t.)951 2828 y Fh(15)p
eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF
