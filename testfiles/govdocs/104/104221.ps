%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 612 792 0 1 10 FMDOCUMENT
0 0 /Helvetica FMFONTDEFINE
1 0 /Times-BoldItalic FMFONTDEFINE
2 0 /Helvetica-Bold FMFONTDEFINE
3 0 /Times-Bold FMFONTDEFINE
4 0 /Times-Roman FMFONTDEFINE
5 0 /Times-Italic FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
(EPICS Release: R3.12) 72 57 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
(1) 552.44 57 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 720 558 720 2 L
0.5 H
2 Z
N
72 72 558 72 2 L
N
72 450 558 450 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 24 Q
(CaW) 180 604 T
(ave 3.1 \050Release Notes\051) 227.57 604 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 12 Q
(Ben-chin Cha  and  T) 180 532 T
(im Mooney) 299.14 532 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(Argonne National Laboratory) 180 518 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Advanced Photon Source) 180 504 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Experimental Facilities Division/Beamline Control) 180 490 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Draft) 180 476 T
0 F
( \050July 19, 1995\051) 208 476 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 420 558 427 C
0 0 0 1 0 0 0 K
72 426.29 170.57 426.29 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
181.43 426.29 558 426.29 2 L
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 14 Q
0 X
0 0 0 1 0 0 0 K
(1.) 160.5 431.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(CaW) 180 431.67 T
(ave 3.1 Announcement) 210.34 431.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 12 Q
(Overview) 72 401 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 10 Q
(A new CaW) 180 387.33 T
(ave  release, 3.1, has been created and is ready for user testing.) 228.63 387.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.42 (The primary improvements are in new capabilities for channel-access monitoring. CaW) 180 369.33 P
1.42 (ave) 544.12 369.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.69 (now provides three types of channel monitors: SIMPLE, QUEUE, and SCAN. The SIMPLE) 180 357.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.43 (monitor now supports arrays in the same way as the SIMPLE monitor supports scalars. A) 180 345.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.49 (SIMPLE monitor returns only the most recently cached value\050s\051 of the monitored channel. A) 180 333.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.77 (QUEUE monitor stores value changes into a buf) 180 321.33 P
0.77 (fer until the buf) 378.79 321.33 P
0.77 (fer is either full or has been) 443.41 321.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.23 (read. The SCAN monitor stores current values of selected process variables\050PVs\051 into arrays in) 180 309.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(response to a single trigger process variable.) 180 297.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5.17 (Because dif) 180 279.33 P
5.17 (ferent types of monitors allocate space dif) 231.92 279.33 P
5.17 (ferently) 430.49 279.33 P
5.17 (, a consistent set of) 460.94 279.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.7 (Add/Get/Clear monitor functions must be used. T) 180 267.33 P
1.7 (o change the monitor type for a process) 388.09 267.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(variable, one must \336rst clear the old monitor and then add a new monitor of the desired type.) 180 255.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2.87 (T) 180 237.33 P
2.87 (o support these new features, the high-level channel-access library has been modi\336ed) 185.41 237.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.16 (extensively) 180 225.33 P
-0.16 (.  A version function has been added so that clients have the information required to) 224.9 225.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2.59 (support both old and new versions. The version function returns the current version of) 180 213.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2.98 (CaW) 180 201.33 P
2.98 (ave; of the high-level, channel-access interface layer; and of the low-level EPICS) 199.75 201.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(channel-access library) 180 189.33 T
(.) 268.48 189.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.01 (In the high-level CA interface library) 180 171.33 P
0.01 (, the default timeout for single process variables has been) 328.52 171.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.36 (changed to 5 seconds; the timeout for lists of PVs and for arrays, has been changed to 10) 180 159.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.87 (seconds. An initialization routine is provided that resets the timeouts to 1 and 3 seconds for) 180 147.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.34 (single PVs and lists of PVs, respectively) 180 135.33 P
0.34 (. The initialization routine also turns on the option of) 343.31 135.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(automatically calling ca_pend_event after every single ca_put function call.) 180 123.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
(2. Changes in CaWave 3.1) 54 739 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
(2) 54 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
(CaWave 3.1 \050Release Notes\051) 238.48 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Document Revision: Draft) 437.47 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
540 72 54 72 2 L
0.5 H
2 Z
N
540 729 54 729 2 L
N
0 0 0 1 0 0 0 K
54 699 540 706 C
0 0 0 1 0 0 0 K
54 705.29 152.57 705.29 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
163.43 705.29 540 705.29 2 L
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 14 Q
0 X
0 0 0 1 0 0 0 K
(2.) 142.5 710.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Changes in CaW) 162 710.67 T
(ave 3.1) 262.35 710.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 12 Q
(New Functions) 54 680 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 10 Q
0.6 (New procedures and functions added to CaW) 162 666.33 P
0.6 (ave include the following \050descriptions of these) 346.42 666.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(new functions are given in the next section\051:) 162 654.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(\245) 180 636.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(caV) 189 636.33 T
(ersion) 204.74 636.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 180 622.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(caInit) 189 622.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 180 608.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(caT) 189 608.33 T
(imeStamp) 204.93 608.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 180 594.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(caMonitor) 189 594.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 180 580.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(caMonitorScan) 189 580.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 12 Q
(Bugs Fixed) 54 558 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 10 Q
(Bugs \336xed include the following:) 162 544.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 180 526.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(monitor on DBR_STRING type \336eld is possible) 189 526.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 180 512.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(monitor on DBR_ENUM type \336eld can return string or numeral value) 189 512.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 180 498.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(caget) 189 498.33 T
4 F
(, which failed to get the string array back, is \336xed) 211.21 498.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 180 484.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(caerr) 189 484.33 T
(or) 211.58 484.33 T
4 F
( function is \336xed) 221.02 484.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 180 470.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(casear) 189 470.33 T
(ch) 216.03 470.33 T
4 F
( on array problems is \336xed) 226.03 470.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 180 456.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(caput) 189 456.33 T
4 F
( on null string causing the IDL to crash is \336xed.) 215.39 456.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 12 Q
( On-line Help) 54 434 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 10 Q
-0.12 (On-line help on available functions can be accessed by the) 162 420.33 P
3 F
-0.12 (caHelp) 397.43 420.33 P
4 F
-0.12 ( command. The on-line help) 427.43 420.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.66 (is grouped into two categories) 162 408.33 P
3 F
0.66 (ca) 288.36 408.33 P
4 F
0.66 ( and) 297.8 408.33 P
3 F
0.66 (caEvent) 318.56 408.33 P
4 F
0.66 (. Instructions about each commands are given) 353 408.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(by the) 162 396.33 T
3 F
(caHelp) 189.22 396.33 T
4 F
( routine.) 219.22 396.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 12 Q
(Setup for IDL) 54 374 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 10 Q
14.14 (The script \336les) 162 360.33 P
5 F
14.14 (setupidl) 266.36 360.33 P
4 F
14.14 ( and) 298.03 360.33 P
5 F
14.14 (idl_startup.pr) 345.76 360.33 P
14.14 (o) 400.67 360.33 P
4 F
14.14 ( are provided in the) 405.67 360.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5.56 (/usr/local/epics/extensions/bin/sun4 directory) 162 348.33 P
5.56 (. The) 348.29 348.33 P
5 F
5.56 (setupidl) 382.47 348.33 P
4 F
5.56 ( will properly set up two) 414.14 348.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3.97 (environment variables CAIDL_SHARE and IDL_ST) 162 336.33 P
3.97 (AR) 389.84 336.33 P
3.97 (TUP for the user) 403.13 336.33 P
3.97 (.  The setup) 481.42 336.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.29 (procedure at the APS for running CaW) 162 324.33 P
0.29 (ave is given below) 319.05 324.33 P
0.29 (. \050Note, dif) 393.99 324.33 P
0.29 (ferent site or system may) 438.28 324.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(need to modify the) 162 312.33 T
5 F
(setupidl) 242.27 312.33 T
4 F
( to suit its own system environments.\051) 273.94 312.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1.) 177.5 294.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.02 ( In order to properly access all the EPICS extensions tools, a user should make sure that) 189 294.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the /usr/local/epics/extensions/bin/sun4  is in his search path.) 189 282.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2.) 177.5 267.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(sour) 191.5 267.33 T
(ce  /usr/local/epics/extensions/bin/sun4/setupidl) 210.21 267.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(The following environment variables are set by) 189 243.33 T
5 F
(setupidl) 380.91 243.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(CAIDL_SHARE=/usr/local/epics/extensions/bin/sun4/CaIDL.so) 216 219.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(IDL_ST) 216 207.33 T
(AR) 248.53 207.33 T
(TUP=/usr/local/epics/extensions/bin/sun4/idl_startup.pro) 261.82 207.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(IDL_DIR=/usr/local/idl) 216 195.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(IDL_P) 216 183.33 T
(A) 242.3 183.33 T
(TH=+/usr/local/idl) 248.41 183.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(IDL_DEVICE=X) 216 171.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3.) 177.5 156.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( A user can start the IDL by entering the Unix command:) 189 156.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(idl) 189 132.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
3.52 (The) 189 108.33 P
5 F
3.52 (CaW) 210.57 108.33 P
3.52 (ave.pr) 229.65 108.33 P
3.52 (o) 254.55 108.33 P
4 F
3.52 ( and) 259.55 108.33 P
5 F
3.52 (CaW) 286.03 108.33 P
3.52 (idgets.pr) 305.48 108.33 P
3.52 (o) 340.39 108.33 P
4 F
3.52 ( are automatically loaded into the IDL, the) 345.39 108.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.13 (procedures) 189 96.33 P
3 F
-0.13 (caV) 235.24 96.33 P
-0.13 (ersion) 250.98 96.33 P
4 F
-0.13 ( and the) 277.09 96.33 P
3 F
-0.13 (caInit) 310.86 96.33 P
4 F
-0.13 ( are automatically called by the) 335.86 96.33 P
5 F
-0.13 (idl_startup.pr) 462.84 96.33 P
-0.13 (o.) 517.76 96.33 P
4 F
-0.13 (  At) 525.26 96.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the end of start-up, a user will get the IDL prompt.) 189 84.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "2" 2
%%Page: "3" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
(3. New Functions/Procedures in CaWave 3.1) 378.43 739 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(EPICS Release: R3.12) 72 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(CaWave 3.1 \050Release Notes\051) 256.48 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
(3) 552.44 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 558 72 2 L
0.5 H
2 Z
N
72 729 558 729 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
1.83 (The IDL start-up \336le) 180 695.33 P
5 F
1.83 (idl_startup.pr) 272.87 695.33 P
1.83 (o) 327.79 695.33 P
4 F
1.83 ( allows the user to use the EPICS_EXENSIONS and) 332.79 695.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.14 (EPICS_EXTENSIONS_PVT environments to include more directories in the user search path) 180 683.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(for accessing private versions of IDL programs.) 180 671.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.46 (In case a user wants to override the default setting, \050s\051he can provide a private version of) 180 653.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(idl_startup.pr) 180 641.33 T
(o) 234.92 641.33 T
4 F
(to override the default setting.) 242.42 641.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 565 558 572 C
0 0 0 1 0 0 0 K
72 571.29 170.57 571.29 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
181.43 571.29 558 571.29 2 L
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 14 Q
0 X
0 0 0 1 0 0 0 K
(3.) 160.5 576.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(New Functions/Pr) 180 576.67 T
(ocedur) 287.46 576.67 T
(es in CaW) 328.43 576.67 T
(ave 3.1) 389.1 576.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 10 Q
0.16 (The names of procedures and functions de\336ned in CaW) 180 550.33 P
0.16 (ave can be entered in any combination) 403.2 550.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.51 (of upper and lower case in IDL. However) 180 538.33 P
0.51 (, all letters making up process variable names must) 349.78 538.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(have the correct case.) 180 526.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 12 Q
(CaV) 72 504 T
(ersion) 94.22 504 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 10 Q
0.29 (This procedure returns the version of CaW) 180 490.33 P
0.29 (ave currently loaded into the IDL.  A typical string) 352.04 490.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(returned by) 180 478.33 T
3 F
(caV) 228.32 478.33 T
(ersion) 244.06 478.33 T
4 F
( follows:) 270.17 478.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(CaW) 180 460.33 T
(ave V) 199.75 460.33 T
(ersion 3.1\050Lca2.1\051 \050EPICS V) 222.24 460.33 T
(ersion 3.12.0Beta13\051) 337.5 460.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.01 (This version string indicates that CaW) 180 442.33 P
0.01 (ave 3.1 is loaded into the IDL; that it uses version 2.1 of) 332.86 442.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.04 (the high-level channel-access library) 180 430.33 P
1.04 (, Lca; and that it is linked with the low-level library of) 329.37 430.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(EPICS version 3.12.0Beta13.) 180 418.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Example) 180 382.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(        caV) 207 370.33 T
(ersion) 241.99 370.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 12 Q
(CaInit) 72 330 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 10 Q
-0.1 (This procedure  resets the timeouts used by the CaW) 180 316.33 P
-0.1 (ave functions.  It sets the timeouts used by) 389.09 316.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.09 (ca_pend_io to 1.0 second for a single process variable and to 3.0 seconds for a list of PVs or a) 180 304.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.47 (non scalar type of PV) 180 292.33 P
0.47 (.   It resets the timeout used by ca_pend_event to 0.001 seconds. It also) 267.25 292.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.02 (turns on the option of automatically calling ca_pend_event at the end of each) 180 280.33 P
3 F
-0.02 (caput) 490.55 280.33 P
4 F
-0.02 ( to a single) 514.44 280.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(PV) 180 268.33 T
(.) 191.49 268.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Example) 180 232.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(        caInit) 207 220.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 12 Q
(caT) 72 186 T
(imeStamp) 91.12 186 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 10 Q
(CaT) 180 172.33 T
(imeStamp\050\324name\325\051) 196.68 172.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
1.35 (This function returns the time stamp for the monitored process variable \324name\325.  The time) 180 136.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.07 (stamp re\337ects the last value change occurring for the monitored name.  The returned string) 180 124.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(consists of date and time information.) 180 112.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "3" 3
%%Page: "4" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
(3. New Functions/Procedures in CaWave 3.1) 54 739 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
(4) 54 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
(CaWave 3.1 \050Release Notes\051) 238.48 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Document Revision: Draft) 437.47 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
540 72 54 72 2 L
0.5 H
2 Z
N
540 729 54 729 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 10 Q
(Example) 162 713.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(        print,caT) 189 701.33 T
(imeStamp\050\324chademoai1\325\051) 245.03 701.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 12 Q
(CaMonitor) 54 667 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 10 Q
(caMonitor\050\324name\325, op_keywor) 162 653.33 T
(d, type_keywor) 284.38 653.33 T
(d, maxqueue=n\051) 344.55 653.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(This function can Add/Get/Clear monitoring of the speci\336ed process variable \324name\325.) 162 635.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.85 (This function supports the SIMPLE, and QUEUE monitor types, de\336ned in CaW) 162 617.33 P
0.85 (ave, with a) 494.7 617.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.24 (single function. It uses two keywords, operation and type, to determine which monitor function) 162 605.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(will be called, and it returns the values accordingly) 162 593.33 T
(.) 365.48 593.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.18 (It provides two types of process variable monitors: a simple, current-value-change monitor and) 162 575.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.22 (a queue-value-change monitor \050QUEUE type\051.  For a simple, value-change monitor) 162 563.33 P
0.22 (, the name) 498.18 563.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.05 (can accept a list of process variable names; for a QUEUE-type monitor) 162 551.33 P
1.05 (, the name can only) 457.77 551.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(accept a single process variable name.) 162 539.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.21 (The simple monitor can also be used to monitor the array or non scalar type record. In getting) 162 521.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.8 (the monitored non scalar type of values back, the name can only accept a single process) 162 509.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.62 (variable name. If an array of PV names is requested in getting the values back, only the \336rst) 162 497.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(value of the monitored PV names is returned.) 162 485.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.92 (For a given PV name, dif) 162 467.33 P
1.92 (ferent space is allocated for each dif) 272.5 467.33 P
1.92 (ferent type of monitor) 428.21 467.33 P
1.92 (.  A) 521.45 467.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.54 (consistent type of Add/Get/Clear monitor function should be used. T) 162 455.33 P
0.54 (o change a monitor type) 441.17 455.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(for a PV) 162 443.33 T
(, a user \336rst has to clear the old type monitor then add the new monitor type.) 194.59 443.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(A change-of-connection event is automatically added for each of the monitor channels.) 162 425.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Op_keyword:) 162 389.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(/ADD) 162 371.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     Add CA monitor for the speci\336ed  PV \324name\325) 189 359.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     Return 0 for success, -1 for failure) 189 347.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(/CLEAR) 162 335.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(    Clear CA monitor and free space for the  speci\336ed \324name\325.) 189 323.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(    Return 0 for success, -1 for failure.) 189 311.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(/GET) 162 299.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     Get monitor values back for the speci\336ed \324name\325.) 189 287.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     Dif) 189 275.33 T
(ferent values are returned for dif) 214.65 275.33 T
(ferent types of monitors.) 344.14 275.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     If the PV name is a scalar type of record, the current value in double precision) 189 251.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     is returned.) 189 239.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     If the PV name is a vector type of record, a native type array of the current values) 189 215.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     is returned. The default returned array size is the same as the native array size. The) 189 203.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     maxqueue can be used to specify the number of values to be returned for a vector) 189 191.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     type of record.) 189 179.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     If a QUEUE type is speci\336ed, a real array is returned. The \336rst number is the) 189 155.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     buf) 189 143.33 T
(fer full indicator) 214.65 143.33 T
(, the second number is the number of values,) 279.79 143.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     and the rest are monitor values.) 189 131.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     The over\337ow indicator can be 0 or 1; 1 indicates that the buf) 189 107.33 T
(fer is full, any new) 443.5 107.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     value change will be lost.  The number of values returned cannot exceed) 189 95.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "4" 4
%%Page: "5" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
(3. New Functions/Procedures in CaWave 3.1) 378.43 739 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(EPICS Release: R3.12) 72 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(CaWave 3.1 \050Release Notes\051) 256.48 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
(5) 552.44 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 558 72 2 L
0.5 H
2 Z
N
72 729 558 729 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(     the maxqueue; it can be -1 if nothing is returned or if the function fails.) 207 713.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      The queue buf) 207 689.33 T
(fer is cleared after each /Get call and is ready to queue for a new) 279.58 689.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.3 (      value. If no more data is returned by the monitor queue, a list of two integer numbers) 207 677.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      [0   -1] is returned.) 207 665.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(T) 180 635.33 T
(ype_keyword:) 185.41 635.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(/QUEUE) 180 617.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(    Queues the value changes for the monitored channel until the user reads them.) 207 605.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(    For queueing the monitor) 207 593.33 T
(, the same maxqueue must be used in the /Add  and) 318.54 593.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(    /Get options.) 207 581.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(MAXQUEUE=n) 180 557.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     The number n speci\336es the size of an array for a QUEUE-type monitor) 207 545.33 T
(.) 502.77 545.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     Data may be lost if the size speci\336ed is too small,  and the) 207 533.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     data come too fast, i.e., before a user is able to cache them.) 207 521.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Examples) 180 497.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(    An example of using the simple monitor is given below) 207 485.33 T
(. In this example, the process) 438.84 485.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(    variable name used is \324chademoai1.V) 207 473.33 T
(AL) 365.95 473.33 T
(\325.) 378.36 473.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(         print,caMonitor\050\324chademoai1.V) 207 449.33 T
(AL) 355.96 449.33 T
(\325,/add\051) 368.37 449.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(         print,caMonitor\050\324chademoai1.V) 207 437.33 T
(AL) 355.96 437.33 T
(\325,/get\051) 368.37 437.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(         print,caMonitor\050\324chademoai1.V) 207 425.33 T
(AL) 355.96 425.33 T
(\325,/clear\051) 368.37 425.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(    An example of using the queue monitor is given below) 207 401.33 T
(. In this example, the process) 436.05 401.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(    variable name used is \324chademoai1.V) 207 389.33 T
(AL) 365.95 389.33 T
(\325, and the buf) 378.36 389.33 T
(fer used for queuing is 100.) 431.5 389.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(    The buf) 207 377.33 T
(fer is automatically cleaned at the end of each get. The maximum number) 248.2 377.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(    of values that can be queued is 100.) 207 365.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(         print, caMonitor\050\324chademoai1.V) 207 341.33 T
(AL) 358.46 341.33 T
(\325,/add,/queue,maxqueue=100\051) 370.87 341.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(         print, caMonitor\050\324chademoai1.V) 207 329.33 T
(AL) 358.46 329.33 T
(\325,/get,/queue,maxqueue=100\051) 370.87 329.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(         print, caMonitor\050\324chademoai1.V) 207 317.33 T
(AL) 358.46 317.33 T
(\325,/clear) 370.87 317.33 T
(,/queue\051) 398.51 317.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 12 Q
(CaMonitorScan) 72 283 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 10 Q
(CaMonitorScan\050\324name\325, pvnames, op-keywor) 180 269.33 T
(d, max=n\051) 362.37 269.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
1.32 (This function can Add/Get/Clear/Zero the monitor of the speci\336ed process variable \324name\325) 180 251.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(that triggers the scanning for the input list of pvnames.) 180 239.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.28 (It automatically places monitors on each of the process variables in the list \324pvnames\325. It uses) 180 221.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.99 (the op-keyword to determine what type of operation will be performed on the monitor) 180 209.33 P
0.99 (. The) 536.46 209.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2.32 (max=n keyword speci\336es the array size to be used in allocating space for each process) 180 197.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(variable. This function returns the values according to the op-keyword speci\336ed.) 180 185.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(A change-of-connection event is automatically added for each of the monitor channels) 180 167.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Op_keyword:) 180 131.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(/ADD) 180 113.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     Add CA monitors for the speci\336ed \324name\325 and all PVs in pvnames.) 207 101.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     Return 0 for success, -1 for failure.) 207 89.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "5" 5
%%Page: "6" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
(3. New Functions/Procedures in CaWave 3.1) 54 739 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
(6) 54 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
(CaWave 3.1 \050Release Notes\051) 238.48 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Document Revision: Draft) 437.47 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
540 72 54 72 2 L
0.5 H
2 Z
N
540 729 54 729 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 10 Q
(/CLEAR) 162 701.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(    Clear the whole set of CA monitors and free space for the  speci\336ed \324name\325) 189 689.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(    Return 0 for success, -1 for failure.) 189 677.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(/GET) 162 653.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     Get the monitor real  arrays back for the speci\336ed set of pvnames.) 189 641.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     Return -1 for failure, 0 for no data. If scanning has started, the scan) 189 629.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     data so far caught by CaW) 189 617.33 T
(ave are returned as a real array) 307.06 617.33 T
(. The \336rst) 429.12 617.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     number is the current number of values detected and is followed by the) 189 605.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     exact number of sequential sets of real values corresponding to \324pvnames\325.) 189 593.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(/ZERO) 162 569.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(    At the end of the scan, the old data caught by CaW) 189 557.33 T
(ave are kept in memory) 402.05 557.33 T
(.) 495.82 557.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(    Before doing a new scan, zero out the old scan data.) 189 545.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(MAX=n) 162 521.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     The number n speci\336es the number of data points that can be acquired.) 189 509.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Example) 162 485.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(An example of using scan monitor is given below) 189 473.33 T
(. In this example the scan trigger) 387.22 473.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(control process variable name is \324cha:scan1.V) 189 461.33 T
(AL) 371.55 461.33 T
(\325, the pvnames to be acquired include) 383.96 461.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\324cha:scan1.R1CV\325, \324cha:scan1.R2CV\325, \324cha:scan1.R3CV\325, \324cha:scan1.R4CV\325,) 189 449.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\324cha:scan1.D1CV\325, \325cha:scan1.D2CV\325, \325cha:scan1.D3CV\325, and \324cha:scan1.D4CV\325.) 189 437.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(The maximum number of data to be acquired is 100.) 189 425.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(pvnames=[ \325cha:scan1.R1CV\325, \325cha:scan1.R2CV\325,\325cha:scan1.R3CV\325, $) 189 401.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(         \325cha:scan1.R4CV\325, \325cha:scan1.D1CV\325,\325 cha:scan1.D2CV\325,  $) 189 389.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(         \325cha:scan1.D3CV\325, \325cha:scan1.D4CV\325 ]) 189 377.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(print,caMonitorScan\050\324cha:scan1.V) 189 353.33 T
(AL) 326.01 353.33 T
(\325,pvnames,/add,max=100\051) 338.42 353.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(print,caMonitorScan\050\324cha:scan1.V) 189 341.33 T
(AL) 326.01 341.33 T
(\325,pvnames,/zero,max=100\051) 338.42 341.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(print,caMonitorScan\050\324cha:scan1.V) 189 329.33 T
(AL) 326.01 329.33 T
(\325,pvnames,/get,max=100\051) 338.42 329.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(print,caMonitorScan\050\324cha:scan1.V) 189 317.33 T
(AL) 326.01 317.33 T
(\325,pvnames,/clear) 338.42 317.33 T
(,max=100\051) 404.11 317.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "6" 6
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 6
%%DocumentFonts: Helvetica
%%+ Times-BoldItalic
%%+ Helvetica-Bold
%%+ Times-Bold
%%+ Times-Roman
%%+ Times-Italic
%%EOF
